"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
log = ...
SDK_VERSION = ...
def config_from_api_key(api_key): # -> Configuration:
    ...

class Flywheel:
    """Main client class for the Python SDK.

    Normally initialized via a call to `flywheel.Client` rather than by directly
    calling this class.

    :param str api_key: The API key to authenticate with.
    :param int minimum_supported_major_version: Minimum major version of the SDK the
        caller accepts.
    :param bool root: Sets default parameter for requests to return a complete list
        regardless of permissions - for site admin users. Deprecated - use `exhaustive`
        instead.
    :param bool skip_version_check: Deprecated--does nothing.
    :param bool subjects_in_resolver: Deprecated--does nothing.
    :param int request_timeout: The client timeout for making requests, in seconds.
    :param int connect_timeout: The client timeout for making connections, in seconds.
    :param bool exhaustive: Sets default parameter for requests to return a complete
        list regardless of permissions - for site admin users.
    """
    def __init__(self, api_key, minimum_supported_major_version=..., root=..., skip_version_check=..., subjects_in_resolver=..., request_timeout=..., connect_timeout=..., exhaustive=...) -> None:
        ...
    
    def enable_debug(self, message_cutoff=...): # -> None:
        ...
    
    def disable_debug(self): # -> None:
        ...
    
    def add_acquisition(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a new acquisition

        Create a new acquisition

        :param AcquisitionInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def add_acquisition_analysis(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create an analysis and upload files.

        When query param \"job\" is \"true\", send JSON to create an analysis and job.  Otherwise, multipart/form-data to upload files and create an analysis.

        :param str cid: (required)
        :param union[AdhocAnalysisInput,JobAnalysisInput] body: (required)
        :param bool job: returns job_id instead of analysis.id
        :param bool job: returns job_id instead of analysis.id
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def add_acquisition_analysis_note(self, container_id, analysis_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a note to a(n) acquisition analysis.

        Add a note to a(n) acquisition analysis.

        :param str container_id: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param NoteInput body: note content (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def add_acquisition_note(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a note to a(n) acquisition.

        Add a note to a(n) acquisition.

        :param str container_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def add_acquisition_tag(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a tag to a(n) acquisition.

        Propagates changes to projects, sessions and acquisitions

        :param str cid: (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def add_acquisition_tags(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add multiple tags to a(n) acquisition

        Add multiple tags to a(n) acquisition

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_acquisition(self, acquisition_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a acquisition

        Read-write project permissions are required to delete an acquisition. </br>Admin project permissions are required if the acquisition contains data uploaded by sources other than users and jobs.

        :param str acquisition_id: (required)
        :param ContainerDeleteReason delete_reason: Provide a reason for the deletion
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_acquisition_analysis(self, cid, analysis_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete an analysis

        Delete an analysis for a container.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param ContainerDeleteReason delete_reason: Provide a reason for the deletion
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_acquisition_analysis_note(self, cid, analysis_id, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a note from a(n) acquisition analysis.

        Remove a note from a(n) acquisition analysis.

        :param str cid: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str note_id: 24-char hex note id (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_acquisition_file(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a file

        A user with read-write or higher permissions on the container may delete files that were uploaded by users or were the output of jobs. (Specifically, files whose `origin.type` is either `job` or `user`.) <br/> A user with admin permissions on the container may delete any file.

        :param str cid: (required)
        :param str filename: (required)
        :param ContainerDeleteReason delete_reason: A reason for deletion when audit-trail is enabled
        :param bool force: Force deletion of the file even if some checks fail. Deprecated, will be removed in a future release.
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_acquisition_note(self, cid, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a note from a(n) acquisition

        Remove a note from a(n) acquisition

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_acquisition_tag(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a tag

        Delete a tag

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_acquisition_tags(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple tags from a(n) acquisition

        Delete multiple tags from a(n) acquisition

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_acquisitions_by_ids(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple acquisitions by ID list

        Delete multiple acquisitions by ID list

        :param list[str] body: List of IDs to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_acquisitions_by_query(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """*DEPRECATED* Delete multiple acquisitions by query

        Delete multiple acquisitions by query

        :param list[Filter] body: Query for containers to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def download_file_from_acquisition(self, acquisition_id, file_name, dest_file, **kwargs): # -> None:
        """Download a file.

        Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.  To generate a ticket:   - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.   - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.  When \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.  When virus_scan feature is enabled the quarantined files only can be downloaded using signed urls otherwise it will return with a HTTP 400 response.

        :param str acquisition_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_acquisition_file_zip_info(self, acquisition_id, file_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.

        :param str acquisition_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_acquisition_download_url(self, acquisition_id, file_name, **kwargs): # -> None:
        """Get a signed URL to download a named child file.

        :param str acquisition_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_input_from_acquisition_analysis(self, acquisition_id, analysis_id, filename, dest_file, **kwargs): # -> None:
        """Download analysis inputs with filter.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for matching inputs in the analysis. If no \"ticket\" query param is included, inputs will be downloaded directly.

        :param str acquisition_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_acquisition_analysis_input_zip_info(self, acquisition_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.

        :param str acquisition_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_acquisition_analysis_input_download_url(self, acquisition_id, analysis_id, filename, **kwargs): # -> None:
        """Get a signed URL to download a named child file.

        :param str acquisition_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_output_from_acquisition_analysis(self, acquisition_id, analysis_id, filename, dest_file, **kwargs): # -> None:
        """Download analysis outputs with filter.

        If \"ticket\" query param is included and not empty, download outputs. If \"ticket\" query param is included and empty, create a ticket for matching outputs in the analysis. If no \"ticket\" query param is included, outputs will be downloaded directly.

        :param str acquisition_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_acquisition_analysis_output_zip_info(self, acquisition_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.

        :param str acquisition_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_acquisition_analysis_output_download_url(self, acquisition_id, analysis_id, filename, **kwargs): # -> None:
        """Get a signed URL to download a named child file.

        :param str acquisition_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_acquisition(self, acquisition_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a single acquisition

        Get a single acquisition

        :param str acquisition_id: (required)
        :param JoinType join:
        :param bool join_avatars: add name and avatar to notes
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: AcquisitionOutput
        """
        ...
    
    def get_acquisition_analyses(self, cid, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get analyses for a(n) acquisition.

        Returns analyses that directly belong to this resource.

        :param str cid: (required)
        :param bool inflate_job:
        :param bool join_avatars:
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]]
        """
        ...
    
    def get_acquisition_analysis(self, cid, analysis_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get an analysis.

        Get an analysis.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param bool inflate_job: Return job as an object instead of an id
        :param bool join_avatars:
        :param JoinType join:
        :param bool async_: Perform the request asynchronously
        :return: union[AnalysisOutputInflatedJob,AnalysisOutput]
        """
        ...
    
    def get_acquisition_file_info(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get info for a particular file.

        Get info for a particular file.

        :param str cid: Container Id (required)
        :param str filename: (required)
        :param bool async_: Perform the request asynchronously
        :return: FileOutput
        """
        ...
    
    def get_acquisition_note(self, cid, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a note of a(n) acquisition.

        Get a note of a(n) acquisition

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def get_acquisition_tag(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the value of a tag, by name.

        Get the value of a tag, by name

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def get_all_acquisitions(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a list of acquisitions

        Get a list of acquisitions.

        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param JoinType join:
        :param bool join_avatars: add name and avatar to notes
        :param str collection_id:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[AcquisitionListOutput],Page]
        """
        ...
    
    def modify_acquisition(self, acquisition_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update an acquisition

        Update an acquisition

        :param str acquisition_id: (required)
        :param AcquisitionModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_acquisition_analysis(self, cid, analysis_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify an analysis.

        Modify an analysis.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param AnalysisModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_acquisition_file(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify a file&#x27;s attributes

        Note: If modifying a file's modality, the current classification will be cleared (except for items in the \"Custom\" list)

        :param str cid: (required)
        :param str filename: (required)
        :param FileModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_acquisition_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update classification for a particular file.

        If replacing a file's classification, the modality can optionally be modified as well.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_acquisition_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info for a particular file.

        Modify and return the file 'info' field

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_acquisition_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update or replace info for a(n) acquisition.

        Update or replace info for a(n) acquisition. Keys that contain '$' or '.' will be sanitized in the process of being updated on the container.

        :param str cid: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_acquisition_note(self, cid, note_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a note of a(n) acquisition.

        Update a note of a(n) acquisition

        :param str cid: (required)
        :param str note_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: int
        """
        ...
    
    def rename_acquisition_tag(self, cid, value, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Rename a tag.

        Rename a tag

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def upload_file_to_acquisition(self, container_id, file, signed=..., **kwargs): # -> list[Any] | str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upload a file to a(n) acquisition.

        Upload a file to a(n) acquisition.

        :param str container_id: (required)
        :param str file: The file to upload (required)
        :param bool preserve_metadata:
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str metadata: Metadata object as a JSON-encoded string
        :param list[str] x_accept_feature: redirect header
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: union[list[FileOutput],UploadTicketOutput]
        """
        ...
    
    def upload_output_to_acquisition_analysis(self, cid, analysis_id, file, signed=..., **kwargs): # -> list[Any] | str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upload an output file to an analysis.

        Upload an output file to an analysis

        :param str cid: (required)
        :param str analysis_id: (required)
        :param str file: The file to upload (required)
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: list[FileOutput]
        """
        ...
    
    def add_analysis_note(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a note to a(n) analysis.

        Add a note to a(n) analysis.

        :param str container_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def add_analysis_tag(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a tag to a(n) analysis.

        Propagates changes to projects, sessions and acquisitions

        :param str container_id: (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def delete_analyses_by_ids(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple analyses by ID list

        Delete multiple analyses by ID list

        :param list[str] body: List of IDs to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_analyses_by_query(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """*DEPRECATED* Delete multiple analyses by query

        Delete multiple analyses by query

        :param list[Filter] body: Query for containers to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_analysis(self, analysis_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete an analysis

        Delete an analysis by its id  Args:     analysis_id: The id of the analysis     auth_session: The auth session     delete_reason: The reason for deletion (required when audit-trail is enabled)

        :param str analysis_id: 24-char hex analysis id (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_analysis_file(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a file

        A user with read-write or higher permissions on the container may delete files that were uploaded by users or were the output of jobs. (Specifically, files whose `origin.type` is either `job` or `user`.) <br/> A user with admin permissions on the container may delete any file.

        :param str cid: (required)
        :param str filename: (required)
        :param ContainerDeleteReason delete_reason: A reason for deletion when audit-trail is enabled
        :param bool force: Force deletion of the file even if some checks fail. Deprecated, will be removed in a future release.
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_analysis_note(self, container_id, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a note from a(n) analysis

        Remove a note from a(n) analysis

        :param str container_id: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_analysis_tag(self, container_id, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a tag

        Delete a tag

        :param str container_id: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def download_file_from_analysis(self, analysis_id, file_name, dest_file, **kwargs): # -> None:
        """Download a file.

        Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.  To generate a ticket:   - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.   - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.  When \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.  When virus_scan feature is enabled the quarantined files only can be downloaded using signed urls otherwise it will return with a HTTP 400 response.

        :param str analysis_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_analysis_file_zip_info(self, analysis_id, file_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.

        :param str analysis_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_analysis_download_url(self, analysis_id, file_name, **kwargs): # -> None:
        """Get a signed URL to download a named child file.

        :param str analysis_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_input_from_analysis(self, analysis_id, filename, dest_file, **kwargs): # -> None:
        """Download analysis inputs with filter.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for matching inputs in the analysis. If no \"ticket\" query param is included, inputs will be downloaded directly.

        :param str analysis_id: 24-character hex ID (required)
        :param str filename: input filename (required)
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_analysis_input_zip_info(self, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.

        :param str analysis_id: 24-character hex ID (required)
        :param str filename: input filename (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_analysis_input_download_url(self, analysis_id, filename, **kwargs): # -> None:
        """Get a signed URL to download a named child file.

        :param str analysis_id: 24-character hex ID (required)
        :param str filename: input filename (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_output_from_analysis(self, analysis_id, filename, dest_file, **kwargs): # -> None:
        """Download output file from analysis

        Download output file from analysis

        :param str analysis_id: Container ID (required)
        :param str filename: output file name (required)
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_analysis_output_zip_info(self, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.

        :param str analysis_id: Container ID (required)
        :param str filename: output file name (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_analysis_output_download_url(self, analysis_id, filename, **kwargs): # -> None:
        """Get a signed URL to download a named child file.

        :param str analysis_id: Container ID (required)
        :param str filename: output file name (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_all_analyses(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Find all analyses

        Returns a page of analyses  Args:     filter (t.Optional[str]):     The filters to apply     sort (t.List[Tuple[str,int]): Sorting, as a list of (str, int) tuples     limit (t.Optional[int]):      The maximum number of entries to return     skip (t.Optional[int]):       The number of entries to skip     page (t.Optional[int]):       Page number     after_id (t.Optional[str]):   Id to return results after  Returns:     Page: if a above argument is not None

        :param bool inflate_job: Return job as an object instead of an id
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]]
        """
        ...
    
    def get_analyses(self, container_name, container_id, subcontainer_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get nested analyses for a container

        Returns analyses that belong to containers of the specified type that belong to ContainerId.  Ex: `projects/{ProjectId}/acquisitions/analyses` will return any analyses that have an acquisition that is under that project as a parent. The `all` keyword is also supported, for example: projects/{ProjectId}/all/analyses will return any analyses that have any session or acquisition or the project itself as a parent. 

        :param str container_name: The parent container type (required)
        :param str container_id: The parent container id (required)
        :param str subcontainer_name: The sub container type (required)
        :param bool async_: Perform the request asynchronously
        :return: list[AnalysisListOutput]
        """
        ...
    
    def get_analysis(self, analysis_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get an analysis.

        Get an analysis by its id

        :param str analysis_id: 24-char hex analysis id (required)
        :param bool inflate_job: expand job info
        :param bool join_avatars: add name and avatar to notes
        :param JoinType join:
        :param bool async_: Perform the request asynchronously
        :return: union[AnalysisOutput,AnalysisOutputInflatedJob]
        """
        ...
    
    def get_analysis_file_info(self, container_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get metadata for an input file of an analysis.

        Get metadata for an input file of an analysis.

        :param str container_id: Container Id (required)
        :param str filename: (required)
        :param bool async_: Perform the request asynchronously
        :return: FileOutput
        """
        ...
    
    def get_analysis_input_files(self, container_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get metadata for input file(s) for an analysis.

        Get metadata for input file(s) for an analysis. There may be more than one since input filenames are not guaranteed to be unique.

        :param str container_id: Container Id (required)
        :param str filename: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[FileOutput]
        """
        ...
    
    def get_analysis_note(self, container_id, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a note of a(n) analysis.

        Get a note of a(n) analysis

        :param str container_id: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def get_analysis_output_file(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get metadata for an output file of an analysis.

        Get metadata for an output file of an analysis.

        :param str cid: Container Id (required)
        :param str filename: (required)
        :param FileContainerType ctype:
        :param bool async_: Perform the request asynchronously
        :return: FileOutput
        """
        ...
    
    def get_analysis_tag(self, container_id, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the value of a tag, by name.

        Get the value of a tag, by name

        :param str container_id: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def modify_analysis(self, analysis_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify an analysis.

        Modify an analysis by its id  Args:     analysis_id: The id of the analysis     analysis_modify: The modifications to make     auth_session: The auth session

        :param str analysis_id: 24-char hex analysis id (required)
        :param AnalysisModifyInput body: new analysis fields (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_analysis_file(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify a file&#x27;s attributes

        Note: If modifying a file's modality, the current classification will be cleared (except for items in the \"Custom\" list)

        :param str cid: (required)
        :param str filename: (required)
        :param FileModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_analysis_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update classification for a particular file.

        If replacing a file's classification, the modality can optionally be modified as well.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_analysis_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info for a particular file.

        Modify and return the file 'info' field

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_analysis_info(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update or replace info for a(n) analysis.

        Update or replace info for a(n) analysis. Keys that contain '$' or '.' will be sanitized in the process of being updated on the container.

        :param str container_id: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_analysis_note(self, container_id, note_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a note of a(n) analysis.

        Update a note of a(n) analysis

        :param str container_id: (required)
        :param str note_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: int
        """
        ...
    
    def rename_analysis_tag(self, container_id, value, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Rename a tag.

        Rename a tag

        :param str container_id: (required)
        :param str value: The tag to interact with (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def upload_output_to_analysis(self, container_id, file, signed=..., **kwargs): # -> list[Any] | str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upload an output file to an analysis.

        Upload an output file to an analysis

        :param str container_id: (required)
        :param str file: The file to upload (required)
        :param str ticket:
        :param bool preserve_metadata:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str metadata: Metadata object as a JSON-encoded string
        :param list[str] x_accept_feature: redirect header
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: union[list[FileOutput],UploadTicketOutput]
        """
        ...
    
    def add_audit_trail_report(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Starts generation of an Audit Trail Report

        Start generation of a new Audit Trail Report.

        :param CreateReportInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: AuditTrailReport
        """
        ...
    
    def delete_audit_trail_report(self, report_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Deletes an Audit Trail Report

        Delete an Audit Trail Report

        :param str report_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def download_audit_trail_report(self, report_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Download Audit Trail Report

        Download Audit Trail Reports

        :param str report_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def list_audit_trail_reports(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List Audit Trail Reports

        List Audit Trail Reports.

        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[AuditTrailReport]]
        """
        ...
    
    def modify_audit_trail_report(self, report_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify an Audit Trail Report

        Modify an Audit Trail Report

        :param str report_id: (required)
        :param ModifyReportInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: AuditTrailReport
        """
        ...
    
    def get_auth_status(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get Login status

        Get the current login status of the requestor

        :param bool async_: Perform the request asynchronously
        :return: AuthSessionOutput
        """
        ...
    
    def cancel_batch(self, batch_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Cancel a Job

        Cancels jobs that are still pending, returns number of jobs cancelled. Moves a 'running' batch job to 'cancelled'.

        :param str batch_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: CancelledBatchOutput
        """
        ...
    
    def create_batch_job_from_jobs(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a batch job proposal from preconstructed jobs and insert it as &#x27;pending&#x27;.

        Create a batch job proposal from preconstructed jobs and insert it as 'pending'.

        :param PremadeJobsBatchProposalInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: PremadeJobsBatchProposal
        """
        ...
    
    def get_all_batches(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a list of batch jobs the user has created.

        Requires login.

        :param bool async_: Perform the request asynchronously
        :return: list[Batch]
        """
        ...
    
    def get_batch(self, batch_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get batch job details.

        :param str batch_id: (required)
        :param bool jobs: If true, return job objects instead of job ids
        :param bool async_: Perform the request asynchronously
        :return: union[ClassicBatchJobOutput,ClassicBatchJobOutputInflatedJobs,PremadeJobsBatchJobOutput,PremadeJobsBatchJobOutputInflatedJobs]
        """
        ...
    
    def propose_batch(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a batch job proposal and insert it as &#x27;pending&#x27;.

        Create a batch job proposal and insert it as 'pending'.

        :param ClassicBatchProposalInput body: The batch proposal (required)
        :param bool async_: Perform the request asynchronously
        :return: ClassicBatchProposalOutput
        """
        ...
    
    def start_batch(self, batch_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Launch a job.

        Creates jobs from proposed inputs, returns jobs enqueued. Moves 'pending' batch job to 'running'.

        :param str batch_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[JobOutput]
        """
        ...
    
    def bulk_move_sessions(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Perform a bulk move of sessions to either a subject or project

        Move sessions

        :param BulkMoveInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[MoveConflict]
        """
        ...
    
    def get_change_log(self, container_type, container_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get Change Log

        :param ChangeLogContainerType container_type: (required)
        :param str container_id: (required)
        :param int version: Optional version if retrieving logs for file
        :param bool async_: Perform the request asynchronously
        :return: ChangeLogDocument
        """
        ...
    
    def get_field_change_log(self, container_type, container_id, field, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get change logs by specific field, in reverse chronological order

        :param ChangeLogContainerType container_type: (required)
        :param str container_id: (required)
        :param str field: (required)
        :param int version: Optional version if retrieving logs for file
        :param bool async_: Perform the request asynchronously
        :return: FieldChangeLogDocument
        """
        ...
    
    def add_collection(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a collection

        Create a collection

        :param CollectionInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def add_collection_note(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a note to a(n) collection.

        Add a note to a(n) collection.

        :param str container_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def add_collection_permission(self, collection_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a permission

        Add a permission

        :param str collection_id: (required)
        :param AccessPermission body: (required)
        :param bool async_: Perform the request asynchronously
        :return: AccessPermissionOutput
        """
        ...
    
    def add_collection_tag(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a tag to a(n) collection.

        Propagates changes to projects, sessions and acquisitions

        :param str cid: (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def add_collection_tags(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add multiple tags to a(n) collection

        Add multiple tags to a(n) collection

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_collection(self, collection_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a collection

        Delete Collections.

        :param str collection_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_collection_file(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a file

        A user with read-write or higher permissions on the container may delete files that were uploaded by users or were the output of jobs. (Specifically, files whose `origin.type` is either `job` or `user`.) <br/> A user with admin permissions on the container may delete any file.

        :param str cid: (required)
        :param str filename: (required)
        :param ContainerDeleteReason delete_reason: A reason for deletion when audit-trail is enabled
        :param bool force: Force deletion of the file even if some checks fail. Deprecated, will be removed in a future release.
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_collection_note(self, cid, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a note from a(n) collection

        Remove a note from a(n) collection

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_collection_tag(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a tag

        Delete a tag

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_collection_tags(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple tags from a(n) collection

        Delete multiple tags from a(n) collection

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_collection_user_permission(self, collection_id, user_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a permission

        Delete a permission

        :param str collection_id: (required)
        :param str user_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def delete_collections_by_ids(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple collections by ID list

        Delete multiple collections by ID list

        :param list[str] body: List of IDs to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_collections_by_query(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """*DEPRECATED* Delete multiple collections by query

        Delete multiple collections by query

        :param list[Filter] body: Query for containers to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def download_file_from_collection(self, collection_id, file_name, dest_file, **kwargs): # -> None:
        """Download a file.

        Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.  To generate a ticket:   - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.   - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.  When \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.  When virus_scan feature is enabled the quarantined files only can be downloaded using signed urls otherwise it will return with a HTTP 400 response.

        :param str collection_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_collection_file_zip_info(self, collection_id, file_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.

        :param str collection_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_collection_download_url(self, collection_id, file_name, **kwargs): # -> None:
        """Get a signed URL to download a named child file.

        :param str collection_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_all_collections(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all collections.

        List all collections.

        :param bool exhaustive:
        :param bool join_avatars: add name and avatar to notes
        :param bool join_files:
        :param JoinType join:
        :param bool stats:
        :param bool include_all_info: Include all info in returned objects
        :param str user_id:
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[CollectionWithStats],list[CollectionOutput]]
        """
        ...
    
    def get_all_collections_curators(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all curators of collections

        List all curators of collections

        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param bool async_: Perform the request asynchronously
        :return: list[Curator]
        """
        ...
    
    def get_collection(self, collection_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve a single collection

        Retrieve a single collection

        :param str collection_id: (required)
        :param bool join_avatars: add name and avatar to notes
        :param JoinType join:
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: CollectionOutput
        """
        ...
    
    def get_collection_acquisitions(self, collection_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List acquisitions in a collection

        List acquisitions in a collection

        :param str collection_id: (required)
        :param str session: The id of a session, to which the acquisitions returned will be restricted
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[AcquisitionListOutput],Page]
        """
        ...
    
    def get_collection_file_info(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get info for a particular file.

        Get info for a particular file.

        :param str cid: Container Id (required)
        :param str filename: (required)
        :param bool async_: Perform the request asynchronously
        :return: FileOutput
        """
        ...
    
    def get_collection_note(self, cid, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a note of a(n) collection.

        Get a note of a(n) collection

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def get_collection_sessions(self, collection_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List sessions in a collection

        List sessions in a collection.

        :param str collection_id: (required)
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[SessionListOutput],Page]
        """
        ...
    
    def get_collection_tag(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the value of a tag, by name.

        Get the value of a tag, by name

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def get_collection_user_permission(self, collection_id, user_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List a user&#x27;s permissions for this group.

        List a user's permissions for this group

        :param str collection_id: (required)
        :param str user_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: AccessPermissionOutput
        """
        ...
    
    def modify_collection(self, collection_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a collection and its contents

        Update a collection and its contents

        :param str collection_id: (required)
        :param CollectionInputWithContents body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_collection_file(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify a file&#x27;s attributes

        Note: If modifying a file's modality, the current classification will be cleared (except for items in the \"Custom\" list)

        :param str cid: (required)
        :param str filename: (required)
        :param FileModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_collection_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update classification for a particular file.

        If replacing a file's classification, the modality can optionally be modified as well.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_collection_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info for a particular file.

        Modify and return the file 'info' field

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_collection_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update or replace info for a(n) collection.

        Update or replace info for a(n) collection. Keys that contain '$' or '.' will be sanitized in the process of being updated on the container.

        :param str cid: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_collection_note(self, cid, note_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a note of a(n) collection.

        Update a note of a(n) collection

        :param str cid: (required)
        :param str note_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: int
        """
        ...
    
    def modify_collection_user_permission(self, collection_id, user_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a user&#x27;s permission for this group.

        Update a users permission for this group

        :param str collection_id: (required)
        :param str user_id: (required)
        :param AccessPermissionUpdate body: (required)
        :param bool async_: Perform the request asynchronously
        :return: AccessPermissionOutput
        """
        ...
    
    def rename_collection_tag(self, cid, value, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Rename a tag.

        Rename a tag

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def upload_file_to_collection(self, container_id, file, signed=..., **kwargs): # -> list[Any] | str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upload a file to a(n) collection.

        Upload a file to a(n) collection.

        :param str container_id: (required)
        :param str file: The file to upload (required)
        :param bool preserve_metadata:
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str metadata: Metadata object as a JSON-encoded string
        :param list[str] x_accept_feature: redirect header
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: union[list[FileOutput],UploadTicketOutput]
        """
        ...
    
    def get_config(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get public configuration

        return config dict

        :param bool async_: Perform the request asynchronously
        :return: ConfigOut
        """
        ...
    
    def get_config_js(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return public Scitran configuration information in javascript format.

        return config as a JavaScript string assignment

        :param bool async_: Perform the request asynchronously
        :return: object
        """
        ...
    
    def get_version(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get server and database schema version info

        return database version dict

        :param bool async_: Perform the request asynchronously
        :return: Version
        """
        ...
    
    def cleanup_info(self, container_type, path, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a custom field from all applicable containers

        Clean up a custom field from all containers of a type.

        :param InfoContainerType container_type: (required)
        :param str path: The dot-separated custom field name to delete (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def add_container_analysis(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create an analysis and upload files.

        When query param \"job\" is \"true\", send JSON to create an analysis and job.  Otherwise, multipart/form-data to upload files and create an analysis.

        :param str cid: (required)
        :param union[AdhocAnalysisInput,JobAnalysisInput] body: (required)
        :param bool job: returns job_id instead of analysis.id
        :param bool job: returns job_id instead of analysis.id
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def add_container_analysis_note(self, container_id, analysis_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a note to a(n) container analysis.

        Add a note to a(n) container analysis.

        :param str container_id: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param NoteInput body: note content (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def add_container_note(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a note to a(n) container.

        Add a note to a(n) container.

        :param str container_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def add_container_tag(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a tag to a(n) container.

        Propagates changes to projects, sessions and acquisitions

        :param str cid: (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def add_container_tags(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add multiple tags to a(n) container

        Add multiple tags to a(n) container

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def add_view(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a new data view

        Create container view

        :param str container_id: (required)
        :param ContainerIdViewInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ViewIdOutput
        """
        ...
    
    def delete_container(self, container_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a container

        Delete Container

        :param str container_id: (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_container_analysis(self, cid, analysis_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete an analysis

        Delete an analysis for a container.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param ContainerDeleteReason delete_reason: Provide a reason for the deletion
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_container_analysis_note(self, cid, analysis_id, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a note from a(n) container analysis.

        Remove a note from a(n) container analysis.

        :param str cid: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str note_id: 24-char hex note id (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_container_file(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a file

        A user with read-write or higher permissions on the container may delete files that were uploaded by users or were the output of jobs. (Specifically, files whose `origin.type` is either `job` or `user`.) <br/> A user with admin permissions on the container may delete any file.

        :param str cid: (required)
        :param str filename: (required)
        :param ContainerDeleteReason delete_reason: A reason for deletion when audit-trail is enabled
        :param bool force: Force deletion of the file even if some checks fail. Deprecated, will be removed in a future release.
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_container_note(self, cid, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a note from a(n) container

        Remove a note from a(n) container

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_container_tag(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a tag

        Delete a tag

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_container_tags(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple tags from a(n) container

        Delete multiple tags from a(n) container

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def download_file_from_container(self, container_id, file_name, dest_file, **kwargs): # -> None:
        """Download a file.

        Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.  To generate a ticket:   - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.   - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.  When \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.  When virus_scan feature is enabled the quarantined files only can be downloaded using signed urls otherwise it will return with a HTTP 400 response.

        :param str container_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_container_file_zip_info(self, container_id, file_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.

        :param str container_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_container_download_url(self, container_id, file_name, **kwargs): # -> None:
        """Get a signed URL to download a named child file.

        :param str container_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_input_from_container_analysis(self, container_id, analysis_id, filename, dest_file, **kwargs): # -> None:
        """Download analysis inputs with filter.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for matching inputs in the analysis. If no \"ticket\" query param is included, inputs will be downloaded directly.

        :param str container_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_container_analysis_input_zip_info(self, container_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.

        :param str container_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_container_analysis_input_download_url(self, container_id, analysis_id, filename, **kwargs): # -> None:
        """Get a signed URL to download a named child file.

        :param str container_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_output_from_container_analysis(self, container_id, analysis_id, filename, dest_file, **kwargs): # -> None:
        """Download analysis outputs with filter.

        If \"ticket\" query param is included and not empty, download outputs. If \"ticket\" query param is included and empty, create a ticket for matching outputs in the analysis. If no \"ticket\" query param is included, outputs will be downloaded directly.

        :param str container_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_container_analysis_output_zip_info(self, container_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.

        :param str container_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_container_analysis_output_download_url(self, container_id, analysis_id, filename, **kwargs): # -> None:
        """Get a signed URL to download a named child file.

        :param str container_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_container(self, container_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve a single container

        Find Container by ID

        :param str container_id: (required)
        :param JoinType join:
        :param bool join_avatars:
        :param bool async_: Perform the request asynchronously
        :return: union[GroupContainerOutput,ProjectContainerOutput,SubjectContainerOutput,SessionContainerOutput,AcquisitionContainerOutput,AnalysisContainerOutput,CollectionContainerOutput]
        """
        ...
    
    def get_container_analyses(self, cid, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get analyses for a(n) container.

        Returns analyses that directly belong to this resource.

        :param str cid: (required)
        :param bool inflate_job:
        :param bool join_avatars:
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]]
        """
        ...
    
    def get_container_analysis(self, cid, analysis_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get an analysis.

        Get an analysis.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param bool inflate_job: Return job as an object instead of an id
        :param bool join_avatars:
        :param JoinType join:
        :param bool async_: Perform the request asynchronously
        :return: union[AnalysisOutputInflatedJob,AnalysisOutput]
        """
        ...
    
    def get_container_file_info(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get info for a particular file.

        Get info for a particular file.

        :param str cid: Container Id (required)
        :param str filename: (required)
        :param bool async_: Perform the request asynchronously
        :return: FileOutput
        """
        ...
    
    def get_container_note(self, cid, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a note of a(n) container.

        Get a note of a(n) container

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def get_container_tag(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the value of a tag, by name.

        Get the value of a tag, by name

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def get_views(self, container_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return a list of all views belonging to container

        View all containers

        :param str container_id: The ID of the container, one of user, group or project. Use \"site\" as containerId to save or get a site data view. (required)
        :param str filter:
        :param str sort:
        :param int limit:
        :param int skip:
        :param int page:
        :param str after_id:
        :param bool async_: Perform the request asynchronously
        :return: list[ViewOutput]
        """
        ...
    
    def modify_container(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a container and its contents

        Modify Container

        :param str container_id: (required)
        :param ContainerUpdate body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_container_analysis(self, cid, analysis_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify an analysis.

        Modify an analysis.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param AnalysisModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_container_file(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify a file&#x27;s attributes

        Note: If modifying a file's modality, the current classification will be cleared (except for items in the \"Custom\" list)

        :param str cid: (required)
        :param str filename: (required)
        :param FileModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_container_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update classification for a particular file.

        If replacing a file's classification, the modality can optionally be modified as well.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_container_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info for a particular file.

        Modify and return the file 'info' field

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_container_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update or replace info for a(n) container.

        Update or replace info for a(n) container. Keys that contain '$' or '.' will be sanitized in the process of being updated on the container.

        :param str cid: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_container_note(self, cid, note_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a note of a(n) container.

        Update a note of a(n) container

        :param str cid: (required)
        :param str note_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: int
        """
        ...
    
    def rename_container_tag(self, cid, value, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Rename a tag.

        Rename a tag

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def upload_file_to_container(self, container_id, file, signed=..., **kwargs): # -> list[Any] | str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upload a file to a(n) container.

        Upload a file to a(n) container.

        :param str container_id: (required)
        :param str file: The file to upload (required)
        :param bool preserve_metadata:
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str metadata: Metadata object as a JSON-encoded string
        :param list[str] x_accept_feature: redirect header
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: union[list[FileOutput],UploadTicketOutput]
        """
        ...
    
    def upload_output_to_container_analysis(self, cid, analysis_id, file, signed=..., **kwargs): # -> list[Any] | str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upload an output file to an analysis.

        Upload an output file to an analysis

        :param str cid: (required)
        :param str analysis_id: (required)
        :param str file: The file to upload (required)
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: list[FileOutput]
        """
        ...
    
    def delete_view_execution(self, data_view_execution_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a data_view_execution

        :param str data_view_execution_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def get_all_data_view_executions(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a list of data_view_executions

        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[DataViewExecution]]
        """
        ...
    
    def get_data_view_execution(self, data_view_execution_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a single data_view_execution

        :param str data_view_execution_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DataViewExecution
        """
        ...
    
    def get_data_view_execution_data(self, data_view_execution_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the data from a data_view_execution

        :param str data_view_execution_id: (required)
        :param str ticket: download ticket id
        :param FileFormat file_format:
        :param str file_name: download ticket filename
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def save_data_view_execution(self, data_view_execution_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Save a data_view_execution to a project

        :param str data_view_execution_id: (required)
        :param FileFormat file_format:
        :param bool async_: Perform the request asynchronously
        :return: File
        """
        ...
    
    def delete_by_search(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete containers by a search query

        :param DeleteBySearchQuery body: (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_save_search(self, search_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a saved search

        :param str search_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def get_all_saved_searches(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get Queries

        :param bool exhaustive: Return all queries, Admin only
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[SaveSearchOutput],SaveSearchPage]
        """
        ...
    
    def get_mapped_fields(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get fields mapped for search

        :param str path: Dot-separated subfield to drill down to
        :param bool async_: Perform the request asynchronously
        :return: object
        """
        ...
    
    def get_saved_search(self, sid, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return a saved search query

        :param str sid: (required)
        :param bool async_: Perform the request asynchronously
        :return: SaveSearch
        """
        ...
    
    def get_search_query_suggestions(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get suggestions for a structured search query

        Send the search query from the start of the string, and get a set of suggested replacements back. When utilizing a suggestion, the caller should replace the contents from the \"from\" field to the end of the string with the provided \"value\".

        :param StructuredQuery body: (required)
        :param bool async_: Perform the request asynchronously
        :return: StructuredQuerySuggestions
        """
        ...
    
    def get_search_status(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the status of search (Mongo Connector)

        :param bool async_: Perform the request asynchronously
        :return: SearchStatus
        """
        ...
    
    def parse_search_query(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Parse a structured search query

        Validates a search query, returning any parse errors that were encountered. In the future, this endpoint may return the abstract syntax tree or evaluated query.

        :param StructuredQuery body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ParsedQueryResponse
        """
        ...
    
    def replace_search(self, sid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Replace a search query

        :param str sid: (required)
        :param SaveSearchUpdate body: (required)
        :param bool async_: Perform the request asynchronously
        :return: SaveSearch
        """
        ...
    
    def save_search(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Save a search query

        :param SaveSearchInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def search(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Perform a search query

        :param SearchQuery body: (required)
        :param bool simple: Unwrap result documents into a list.
        :param int size: The maximum number of results to return.
        :param bool facets: Include additional statistics about the search results. Internal use only.
        :param bool csv: Format the response as a CSV file
        :param bool async_: Perform the request asynchronously
        :return: union[list[SearchResponse],object]
        """
        ...
    
    def create_device(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a new device.

        Will create a new device record together with an api key. Request must be an admin request.

        :param DeviceCreate body: (required)
        :param bool async_: Perform the request asynchronously
        :return: EgressDevice
        """
        ...
    
    def delete_device(self, device_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a device

        Delete a device

        :param str device_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_device_key(self, device_id, key_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete Device Key

        :param str device_id: (required)
        :param str key_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def generate_key(self, device_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Generate device API key

        Regenerate device API key

        :param str device_id: (required)
        :param ApiKeyInputWithOptionalLabel body:
        :param bool async_: Perform the request asynchronously
        :return: object
        """
        ...
    
    def get_all_devices(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all devices.

        Requires login.

        :param bool join_keys: Return device key. Admins only
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[EgressDevice],EgressDevicePage]
        """
        ...
    
    def get_all_devices_status(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get status for all known devices.

        ok - missing - error - unknown

        :param bool async_: Perform the request asynchronously
        :return: dict(str, DeviceStatusEntry)
        """
        ...
    
    def get_current_device(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get current device.

        Get current device.

        :param bool async_: Perform the request asynchronously
        :return: EgressDevice
        """
        ...
    
    def get_device(self, device_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get device details

        :param str device_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: EgressDevice
        """
        ...
    
    def modify_device(self, device_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a device

        Update a device

        :param str device_id: (required)
        :param DeviceAdminUpdate body: (required)
        :param bool async_: Perform the request asynchronously
        :return: EgressDevice
        """
        ...
    
    def regenerate_key(self, device_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """This method is DEPRECATED, use generate_key instead

        :param str device_id: (required)
        :param ApiKeyInputWithOptionalLabel body:
        :param bool async_: Perform the request asynchronously
        :return: object
        """
        ...
    
    def update_device(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify a device&#x27;s type, name, interval, info or set errors.

        Will modify the device record of the device making the request. Type may only be set once if not already specified at creation. Request must be a drone request.

        :param DeviceSelfUpdate body: (required)
        :param bool async_: Perform the request asynchronously
        :return: EgressDevice
        """
        ...
    
    def create_project_aet(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a new DIMSE project AET

        Will create a new DIMSE AET that refers to a Flywheel project. AETs can only be created by admins and use drone access via DIMSE.

        :param ProjectAETInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: BaseAET
        """
        ...
    
    def create_service_aet(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a new DIMSE service AET

        Will create a new DIMSE AET that refers to an external DICOM node. Service AETs can be used to issue C-MOVEs to from project AETs. Requires login. AETs can only be created by admins.

        :param union[ProjectAETInput,ServiceAETInput] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ServiceAET
        """
        ...
    
    def delete_project_aet(self, project_aet, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a DIMSE project AET

        Delete DIMSE project by AET. AETs can only be deleted by admins.

        :param str project_aet: (required)
        :param bool async_: Perform the request asynchronously
        :return: dict(str, int)
        """
        ...
    
    def delete_service_aet(self, service_aet, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a DIMSE service AET

        Delete DIMSE service by AET. AETs can only be deleted by admins.

        :param str service_aet: (required)
        :param bool async_: Perform the request asynchronously
        :return: dict(str, int)
        """
        ...
    
    def get_all_project_aets(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all DIMSE project AETs

        Will list all DIMSE AETs referring to a Flywheel project. Project AETs can be used to issue C-FIND and C-MOVE on Flywheel projects. Requires login and admin privilege.

        :param bool async_: Perform the request asynchronously
        :return: list[ProjectAET]
        """
        ...
    
    def get_all_service_aets(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all DIMSE services AETs

        Will list all DIMSE AETs referring to external DICOM nodes. Requires login and admin privilege.

        :param bool async_: Perform the request asynchronously
        :return: list[ServiceAET]
        """
        ...
    
    def get_project_aet(self, project_aet, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get DIMSE project AET

        Get DIMSE project by AET, id or project id. Requires admin privilege.

        :param str project_aet: (required)
        :param bool async_: Perform the request asynchronously
        :return: ProjectAET
        """
        ...
    
    def get_service_aet(self, service_aet, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get DIMSE service by AET or id

        Get a DIMSE service. Requires login and admin privilege.

        :param str service_aet: (required)
        :param bool async_: Perform the request asynchronously
        :return: ServiceAET
        """
        ...
    
    def create_download_ticket(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a download ticket

        Use filters in the payload to exclude/include files. To pass a single filter, each of its conditions should be satisfied. If a file pass at least one filter, it is included in the targets.

        :param DownloadInput body: Specification for the download to be performed (required)
        :param DownloadStrategy type: The download type, one of: bulk, classic or full. Default is classic.
        :param bool bulk:
        :param bool metadata: For \"full\" download, whether or not to include metadata sidecars. Default is false.
        :param bool analyses: For \"full\" download, whether or not to include analyses. Default is false.
        :param str prefix: A string to customize the name of the download in the format <prefix>_<timestamp>.tar. Defaults to \"scitran\".
        :param bool async_: Perform the request asynchronously
        :return: DownloadTicketStub
        """
        ...
    
    def download_ticket(self, ticket, dest_file, **kwargs): # -> None:
        """Download files listed in the given ticket.

        You can use POST to create a download ticket The files listed in the ticket are put into a tar archive

        :param str ticket: ID of the download ticket (required)
        :param DownloadFormat format:
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def add_file_tags(self, file_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add list of tags on a file.

        Add the tags on a file to the list of tags

        :param str file_id: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[str]
        """
        ...
    
    def delete_file(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a File

        A user with read-write or higher permissions on the container may delete files that were uploaded by users or were the output of jobs. (Specifically, files whose `origin.type` is either `job` or `user`.) <br/> A user with admin permissions on the container may delete any file.

        :param str file_id: (required)
        :param int version: Version of the file to delete (defaults to current version)
        :param ContainerDeleteReason delete_reason: A reason for deletion when audit-trail is enabled
        :param bool force: Force deletion of the file even if some checks fail. Deprecated, will be removed in a future release.
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_file_tags(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove the specified tags from most recent file version

        Remove the specified tags from most recent file version

        :param str file_id: (required)
        :param list[str] body: List of application-specific tags
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_files_by_ids(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple files by ID list

        Delete multiple files by ID list

        :param list[str] body: List of IDs to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_files_by_query(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """*DEPRECATED* Delete multiple files by query

        Delete multiple files by query

        :param list[Filter] body: Query for containers to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def get_all_files(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return all files

        Get metadata of all current user files

        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param bool async_: Perform the request asynchronously
        :return: PageGenericFileOutput
        """
        ...
    
    def get_file(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get File

        Get file details

        :param str file_id: (required)
        :param int version:
        :param bool async_: Perform the request asynchronously
        :return: FileOutput
        """
        ...
    
    def get_file_info(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get Info

        Get info dict for any file version. Returns:     dict of key/value pairs

        :param str file_id: (required)
        :param int version:
        :param bool async_: Perform the request asynchronously
        :return: object
        """
        ...
    
    def get_file_tags(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return a file tags, from any version

        Return a file tags, from any version

        :param str file_id: (required)
        :param int version:
        :param bool async_: Perform the request asynchronously
        :return: list[str]
        """
        ...
    
    def get_file_versions(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get Versions

        Get file version details

        :param str file_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[FileVersionOutput]
        """
        ...
    
    def get_file_zip_info(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get Zip Info

        Get info on zipfile

        :param str file_id: (required)
        :param int version:
        :param str ticket:
        :param bool async_: Perform the request asynchronously
        :return: ZipfileInfo
        """
        ...
    
    def modify_file_classification(self, file_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify Classification

        Modify classification of most recent file version

        :param str file_id: (required)
        :param FileClassificationDelta body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_file_info(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify Info

        Add info to most recent file version, adding items or replacing some existing ones. Parameters:     info (dict) -- key/value pairs to add Returns:     dict added

        :param str file_id: (required)
        :param object body:
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def move_file(self, file_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Move and/or rename a file

        Move a file to a new container and/or give it a new name

        :param str file_id: (required)
        :param FileMoveInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def replace_file_info(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Replace Info

        Add info to most recent file version, replacing all existing values. Parameters:     info (dict) -- all key/value pairs to populate info Returns:     dict added

        :param str file_id: (required)
        :param object body:
        :param bool async_: Perform the request asynchronously
        :return: object
        """
        ...
    
    def restore_file(self, file_id, version, evaluate_gear_rules, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Restore a File

        Restore a specific version of a file as the active version. This will create a new version which will be identical to the restored version.

        :param str file_id: (required)
        :param int version: (required)
        :param bool evaluate_gear_rules: Specify if gear rules should be reevaluated on the newly created file version (required)
        :param bool async_: Perform the request asynchronously
        :return: FileOutput
        """
        ...
    
    def set_file_tags(self, file_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Set list of tags on a file.

        Set the tags on a file to the list of tags provided

        :param str file_id: (required)
        :param list[str] body: List of application-specific tags (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def upsert_file(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upsert a File

        Create or update a file

        :param FileUpsertInput body: (required)
        :param bool force_update:
        :param bool async_: Perform the request asynchronously
        :return: FileUpsertOutput
        """
        ...
    
    def add_gear(self, gear_name, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create or update a gear.

        If no existing gear is found, one will be created Otherwise, the specified gear will be updated

        :param str gear_name: Name of the gear to interact with (required)
        :param GearDocumentLegacyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearIdOutput
        """
        ...
    
    def add_gear_permission(self, gear_name, permission_type, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add an individual permission to the given gear

        :param str gear_name: Name of the gear to interact with (required)
        :param GearPermissionsType permission_type: (required)
        :param GearPermissionsInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearSeries
        """
        ...
    
    def delete_gear(self, gear_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a gear (not recommended)

        :param str gear_id: Id of the gear to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_gear_permission(self, gear_name, permission_type, permission_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete an individual permission of the given gear

        :param str gear_name: (required)
        :param GearPermissionsType permission_type: (required)
        :param str permission_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_gear_permissions(self, gear_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete permissions of the given gear

        :param str gear_name: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def get_all_gears(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all gears

        List all gears

        :param str project_id:
        :param bool all_versions: return all versions of each gear
        :param bool include_invalid: return gears with the 'invalid' flag set
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[GearDocument],Page]
        """
        ...
    
    def get_gear(self, gear_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve details about a specific gear

        Retrieve details about a specific gear

        :param str gear_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearDocument
        """
        ...
    
    def get_gear_context(self, gear_id, container_name, container_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get context values for the given gear and container.

        Ref: https://github.com/flywheel-io/gears/tree/master/spec#contextual-values

        :param str gear_id: (required)
        :param str container_name: (required)
        :param str container_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: dict(str, union[GearContextValueOutput,GearContextValueOutputUnfound])
        """
        ...
    
    def get_gear_invocation(self, gear_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a schema for invoking a gear

        Get a schema for invoking a gear.

        :param str gear_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: object
        """
        ...
    
    def get_gear_series(self, gear_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get gear series.

        Gets the series for the gear by its name

        :param str gear_name: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearSeries
        """
        ...
    
    def get_gear_suggest(self, gear_id, container_name, container_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get files with input suggestions, parent containers, and child containers for the given container.

        :param str gear_id: Id of the gear to interact with (required)
        :param str container_name: Type of the container to interact with (required)
        :param str container_id: Id of the container to interact with (required)
        :param str filter:
        :param str sort:
        :param int limit:
        :param int skip:
        :param int page:
        :param list[str] include: Include only \"children\" or \"files\"
        :param str collection: Get suggestions for a collection
        :param bool async_: Perform the request asynchronously
        :return: GearSuggestionOutput
        """
        ...
    
    def get_gear_ticket(self, ticket_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve a specific gear ticket

        :param str ticket_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearTicket
        """
        ...
    
    def get_my_gear_tickets(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve all gear tickets for the current user

        :param bool async_: Perform the request asynchronously
        :return: list[str]
        """
        ...
    
    def modify_gear_series(self, gear_name, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a gear series

        :param str gear_name: Name of the gear series to modify (required)
        :param GearSeriesUpdate body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearSeries
        """
        ...
    
    def prepare_add_gear(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Prepare a gear upload

        Prepare a gear upload

        :param GearDocumentInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearTicketOutput
        """
        ...
    
    def replace_gear_permissions(self, gear_name, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Replace permissions for the given gear

        :param str gear_name: Name of the gear to interact with (required)
        :param GearPermissions body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearSeries
        """
        ...
    
    def save_gear(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Report the result of a gear upload and save the ticket

        Report the result of a gear upload and save the ticket

        :param GearSaveSubmission body: The ticket, repo and pointer (required)
        :param bool async_: Perform the request asynchronously
        :return: GearDocument
        """
        ...
    
    def add_group(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a group

        Create a new group.

        :param GroupInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def add_group_permission(self, group_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a permission

        Adds permission to the group  Args:     group_id: the id of the group     permission: The access permission     auth_session: The auth session of the user  Returns     AccessPermissionOutput: The added permission

        :param str group_id: (required)
        :param AccessPermission body: (required)
        :param bool async_: Perform the request asynchronously
        :return: AccessPermissionOutput
        """
        ...
    
    def add_group_permission_template(self, group_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a permission template

        Add a permission template

        :param str group_id: (required)
        :param RolePermission body: (required)
        :param bool propagate:
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: RolePermissionOutput
        """
        ...
    
    def add_group_tag(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a tag to a(n) group.

        Propagates changes to projects, sessions and acquisitions

        :param str cid: (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def add_group_tags(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add multiple tags to a(n) group

        Add multiple tags to a(n) group

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def add_role_to_group(self, group_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a role to the pool of roles in a group

        Add a group role.

        :param str group_id: (required)
        :param GroupRole body: (required)
        :param bool async_: Perform the request asynchronously
        :return: RoleOutput
        """
        ...
    
    def delete_group(self, group_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete group

        Delete a group.

        :param str group_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_group_tag(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a tag

        Delete a tag

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_group_tags(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple tags from a(n) group

        Delete multiple tags from a(n) group

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_group_user_permission(self, group_id, user_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a permission

        Deletes a permission from the group  Args:     group_id: the id of the group     user_id: The id of the user     auth_session: The auth session of the user

        :param str group_id: (required)
        :param str user_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def delete_group_user_permission_template(self, group_id, user_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a permission

        Delete a permission

        :param str group_id: (required)
        :param str user_id: (required)
        :param bool propagate:
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def delete_groups_by_ids(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple groups by ID list

        Delete multiple groups by ID list

        :param list[str] body: List of IDs to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_groups_by_query(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """*DEPRECATED* Delete multiple groups by query

        Delete multiple groups by query

        :param list[Filter] body: Query for containers to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def get_all_group_roles(self, group_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get list of group roles

        Gets all group roles

        :param str group_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[RoleOutput]
        """
        ...
    
    def get_all_groups(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all groups

        Find all groups.

        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[GroupOutput]]
        """
        ...
    
    def get_group(self, group_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get group info

        Get a group by ID.

        :param str group_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: GroupOutput
        """
        ...
    
    def get_group_projects(self, group_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get all projects in a group

        Get projects for a group

        :param str group_id: (required)
        :param bool exhaustive:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[ProjectListOutput]]
        """
        ...
    
    def get_group_role(self, group_id, role_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return the role identified by the RoleId

        Get a group role.

        :param str group_id: (required)
        :param str role_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: RoleOutput
        """
        ...
    
    def get_group_tag(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the value of a tag, by name.

        Get the value of a tag, by name

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def get_group_user_permission(self, group_id, user_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List a user&#x27;s permissions for this group.

        List a user's permissions for this group

        :param str group_id: (required)
        :param str user_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: AccessPermissionOutput
        """
        ...
    
    def get_group_user_permission_template(self, group_id, user_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List a user&#x27;s permissions for this group.

        List a user's permissions for this group.

        :param str group_id: (required)
        :param str user_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: RolePermissionOutput
        """
        ...
    
    def modify_group(self, group_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update group

        Modify a group.

        :param str group_id: (required)
        :param GroupUpdate body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_group_user_permission(self, group_id, user_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a user&#x27;s permission for this group.

        Update a user's permission for this group.

        :param str group_id: (required)
        :param str user_id: (required)
        :param AccessPermissionUpdate body: (required)
        :param bool async_: Perform the request asynchronously
        :return: AccessPermissionOutput
        """
        ...
    
    def modify_group_user_permission_template(self, group_id, user_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a user&#x27;s permission for this group.

        Update a user's permission for this group.

        :param str group_id: (required)
        :param str user_id: (required)
        :param RolePermissionUpdate body: (required)
        :param bool propagate:
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: RolePermissionOutput
        """
        ...
    
    def remove_role_from_group(self, group_id, role_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove the role from the group

        Delete a group role.

        :param str group_id: (required)
        :param str role_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def rename_group_tag(self, cid, value, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Rename a tag.

        Rename a tag

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def add_job(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a job

        Add a job

        :param InputJob body: (required)
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def add_job_logs(self, job_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add logs to a job.

        :param str job_id: (required)
        :param list[JobLog] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def ask_jobs(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Ask the queue a question

        Ask the queue a question, receiving work or statistics in return.

        :param JobAsk body: (required)
        :param bool async_: Perform the request asynchronously
        :return: JobAskResponse
        """
        ...
    
    def ask_jobs_state(self, job_state, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Ask job count by state

        Ask the queue for the number of jobs for a given state and query.

        :param JobState job_state: (required)
        :param JobAsk body: (required)
        :param bool async_: Perform the request asynchronously
        :return: JobAskStateResponse
        """
        ...
    
    def complete_job(self, job_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Complete a job, with information

        :param str job_id: (required)
        :param JobComplete body: (required)
        :param str job_ticket_id: ticket id for job completion
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def determine_provider_for_job(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Determine the effective compute provider for a proposed job.

        :param InputJob body: (required)
        :param bool async_: Perform the request asynchronously
        :return: Provider
        """
        ...
    
    def engine_complete_job(self, job_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Complete a job, with information.

        :param str job_id: (required)
        :param JobComplete body: (required)
        :param str job_ticket_id: ticket id for job completion
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def engine_prepare_complete_job(self, job_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a ticket for completing a job, with id and status.

        :param str job_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: JobTicketOutput
        """
        ...
    
    def get_all_jobs(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return all jobs

        :param bool include_parent_info: Include the parent info for the jobs
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[JobListOutput],Page]
        """
        ...
    
    def get_job(self, job_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get job details

        :param str job_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: JobOutput
        """
        ...
    
    def get_job_config(self, job_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a job&#x27;s config

        :param str job_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: JobOutputConfig
        """
        ...
    
    def get_job_detail(self, job_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get job container details

        :param str job_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: JobDetail
        """
        ...
    
    def get_job_logs(self, job_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get job logs

        :param str job_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: JobLogRecord
        """
        ...
    
    def get_jobs_stats(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get stats about all current jobs

        :param bool async_: Perform the request asynchronously
        :return: object
        """
        ...
    
    def get_next_job(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the next job in the queue

        Used by the engine.

        :param list[str] tags:
        :param list[str] tags:
        :param bool async_: Perform the request asynchronously
        :return: Job
        """
        ...
    
    def modify_job(self, job_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a job.

        Updates timestamp. Enforces a valid state machine transition, if any. Rejects any change to a job that is not currently in 'pending' or 'running' state. Accepts the same body as /api/jobs/add, except all fields are optional.

        :param str job_id: (required)
        :param JobModify body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def prepare_complete_job(self, job_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a ticket for completing a job, with id and status.

        :param str job_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: JobTicketOutput
        """
        ...
    
    def reap_jobs(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Reap stale jobs

        :param bool async_: Perform the request asynchronously
        :return: OrphanedCount
        """
        ...
    
    def retry_job(self, job_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retry a job.

        The job must have a state of 'failed', and must not have already been retried. The failed jobs config is copied to a new job. The ID of the new job is returned.

        :param str job_id: (required)
        :param str compute_provider_id:
        :param bool ignore_state:
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def update_job_profile(self, job_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update profile information on a job. (e.g. machine type, etc)

        Update profile information on a job. (e.g. machine type, etc)

        :param str job_id: (required)
        :param InputJobProfile body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def update_jobs_priority(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a job priority.

        :param JobPriorityUpdate body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def get_jupyterlab_server(self, jupyterlab_server_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get jupyterlab server

        Get jupyterlab server

        :param str jupyterlab_server_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: JupyterlabServerResponse
        """
        ...
    
    def modify_jupyterlab_server(self, jupyterlab_server_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a jupyterlab server

        Update a jupyterlab server

        :param str jupyterlab_server_id: (required)
        :param JupyterlabServerModify body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def add_modality(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a new modality.

        handlers.modalityhandler.ModalityHandler.post

        :param ModalityInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def delete_modality(self, modality_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a modality

        :param str modality_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def get_all_modalities(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all modalities.

        Requires login.

        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[ModalityOutput],Page]
        """
        ...
    
    def get_modality(self, modality_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a modality&#x27;s classification specification

        :param str modality_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModalityOutput
        """
        ...
    
    def replace_modality(self, modality_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Replace modality

        :param str modality_id: (required)
        :param ModalityModify body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModalityOutput
        """
        ...
    
    def clean_packfiles(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Clean up expired upload tokens and invalid token directories.

        Clean up expired upload tokens and invalid token directories.

        :param bool async_: Perform the request asynchronously
        :return: PackfileCleanupOutput
        """
        ...
    
    def add_project(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a new project

        :param ProjectInput body: (required)
        :param bool inherit: Inherit permissions from the group permission template
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def add_project_analysis(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create an analysis and upload files.

        When query param \"job\" is \"true\", send JSON to create an analysis and job.  Otherwise, multipart/form-data to upload files and create an analysis.

        :param str cid: (required)
        :param union[AdhocAnalysisInput,JobAnalysisInput] body: (required)
        :param bool job: returns job_id instead of analysis.id
        :param bool job: returns job_id instead of analysis.id
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def add_project_analysis_note(self, container_id, analysis_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a note to a(n) project analysis.

        Add a note to a(n) project analysis.

        :param str container_id: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param NoteInput body: note content (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def add_project_note(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a note to a(n) project.

        Add a note to a(n) project.

        :param str container_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def add_project_permission(self, project_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a permission

        Add user to a project  Args:     project_id: The id of the project     permission: The permission to add     auth_session: The auth session  Returns:     RolePermissionOutput: The added permission

        :param str project_id: (required)
        :param RolePermission body: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: RolePermissionOutput
        """
        ...
    
    def add_project_rule(self, project_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a new rule for a project.

        :param str project_id: (required)
        :param GearRuleInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearRuleOutput
        """
        ...
    
    def add_project_tag(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a tag to a(n) project.

        Propagates changes to projects, sessions and acquisitions

        :param str cid: (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def add_project_tags(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add multiple tags to a(n) project

        Add multiple tags to a(n) project

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def catalog_list(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Catalog List

        :param str search_string: Include only results containing the search string
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[CatalogListOutput],Page]
        """
        ...
    
    def delete_project(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a project

        Only site admins and users with \"admin\" project permissions may delete a project

        :param str project_id: (required)
        :param ContainerDeleteReason delete_reason: A reason for deletion when audit-trail is enabled
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_project_analysis(self, cid, analysis_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete an analysis

        Delete an analysis for a container.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param ContainerDeleteReason delete_reason: Provide a reason for the deletion
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_project_analysis_note(self, cid, analysis_id, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a note from a(n) project analysis.

        Remove a note from a(n) project analysis.

        :param str cid: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str note_id: 24-char hex note id (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_project_file(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a file

        A user with read-write or higher permissions on the container may delete files that were uploaded by users or were the output of jobs. (Specifically, files whose `origin.type` is either `job` or `user`.) <br/> A user with admin permissions on the container may delete any file.

        :param str cid: (required)
        :param str filename: (required)
        :param ContainerDeleteReason delete_reason: A reason for deletion when audit-trail is enabled
        :param bool force: Force deletion of the file even if some checks fail. Deprecated, will be removed in a future release.
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_project_note(self, cid, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a note from a(n) project

        Remove a note from a(n) project

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_project_tag(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a tag

        Delete a tag

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_project_tags(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple tags from a(n) project

        Delete multiple tags from a(n) project

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_project_user_permission(self, project_id, uid, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a permission

        :param str project_id: (required)
        :param str uid: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def delete_projects_by_ids(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple projects by ID list

        Delete multiple projects by ID list

        :param list[str] body: List of IDs to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_projects_by_query(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """*DEPRECATED* Delete multiple projects by query

        Delete multiple projects by query

        :param list[Filter] body: Query for containers to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def download_file_from_project(self, project_id, file_name, dest_file, **kwargs): # -> None:
        """Download a file.

        Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.  To generate a ticket:   - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.   - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.  When \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.  When virus_scan feature is enabled the quarantined files only can be downloaded using signed urls otherwise it will return with a HTTP 400 response.

        :param str project_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_project_file_zip_info(self, project_id, file_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.

        :param str project_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_project_download_url(self, project_id, file_name, **kwargs): # -> None:
        """Get a signed URL to download a named child file.

        :param str project_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_input_from_project_analysis(self, project_id, analysis_id, filename, dest_file, **kwargs): # -> None:
        """Download analysis inputs with filter.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for matching inputs in the analysis. If no \"ticket\" query param is included, inputs will be downloaded directly.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_project_analysis_input_zip_info(self, project_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_project_analysis_input_download_url(self, project_id, analysis_id, filename, **kwargs): # -> None:
        """Get a signed URL to download a named child file.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_output_from_project_analysis(self, project_id, analysis_id, filename, dest_file, **kwargs): # -> None:
        """Download analysis outputs with filter.

        If \"ticket\" query param is included and not empty, download outputs. If \"ticket\" query param is included and empty, create a ticket for matching outputs in the analysis. If no \"ticket\" query param is included, outputs will be downloaded directly.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_project_analysis_output_zip_info(self, project_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_project_analysis_output_download_url(self, project_id, analysis_id, filename, **kwargs): # -> None:
        """Get a signed URL to download a named child file.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def end_project_packfile_upload(self, token, metadata, file_count, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """End a packfile upload

        :param str token: (required)
        :param str metadata: Metadata object as a JSON-encoded string (required)
        :param int file_count: Number of files uploaded into this packfile. (required)
        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def get_all_projects(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a list of projects

        :param bool counts: Append the count of subjects in each project
        :param bool stats: Return the status of subjects and sessions in each project
        :param bool join_avatars: Return the joined avatars of the permissions
        :param JoinType join:
        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[ProjectListOutput],Page]
        """
        ...
    
    def get_all_projects_groups(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all groups which have a project in them

        :param bool exhaustive: returns exhaustive list if correct permissions
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: list[GroupOutput]
        """
        ...
    
    def get_catalog_list_filter_options(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get all filter options for sharing a project

        :param bool async_: Perform the request asynchronously
        :return: SharingFilterOptions
        """
        ...
    
    def get_project(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a single project

        :param str project_id: (required)
        :param JoinType join:
        :param bool join_avatars: add name and avatar to notes
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: ProjectOutput
        """
        ...
    
    def get_project_acquisitions(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all acquisitions for the given project.

        :param str project_id: (required)
        :param str collection_id:
        :param bool exhaustive:
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[AcquisitionListOutput],Page]
        """
        ...
    
    def get_project_analyses(self, cid, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get analyses for a(n) project.

        Returns analyses that directly belong to this resource.

        :param str cid: (required)
        :param bool inflate_job:
        :param bool join_avatars:
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]]
        """
        ...
    
    def get_project_analysis(self, cid, analysis_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get an analysis.

        Get an analysis.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param bool inflate_job: Return job as an object instead of an id
        :param bool join_avatars:
        :param JoinType join:
        :param bool async_: Perform the request asynchronously
        :return: union[AnalysisOutputInflatedJob,AnalysisOutput]
        """
        ...
    
    def get_project_file_info(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get info for a particular file.

        Get info for a particular file.

        :param str cid: Container Id (required)
        :param str filename: (required)
        :param bool async_: Perform the request asynchronously
        :return: FileOutput
        """
        ...
    
    def get_project_note(self, cid, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a note of a(n) project.

        Get a note of a(n) project

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def get_project_rule(self, project_id, rule_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a project rule.

        Get a project rule.

        :param str project_id: (required)
        :param str rule_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearRuleOutput
        """
        ...
    
    def get_project_rules(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all rules for a project.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[GearRuleOutput]
        """
        ...
    
    def get_project_sessions(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all sessions for the given project.

        Returns a page of sessions by their parent

        :param str project_id: 24-char hex subject id (required)
        :param JoinType join: join file origins
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[SessionListOutput]]
        """
        ...
    
    def get_project_settings(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a(n) project settings

        Route for getting settings from a a(n) project

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: ProjectSettingsOutput
        """
        ...
    
    def get_project_subjects(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all subjects for the given project.

        List all subjects for the given project.

        :param str project_id: (required)
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[SubjectOutputForList]]
        """
        ...
    
    def get_project_tag(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the value of a tag, by name.

        Get the value of a tag, by name

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def get_project_user_permission(self, project_id, uid, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List a user&#x27;s permissions for this project.

        Get a user's permission from a project  Args:     project_id: The id of the project     uid: The id of the user     auth_session: The auth session  Returns:     RolePermissionOutput: The permission

        :param str project_id: (required)
        :param str uid: (required)
        :param bool async_: Perform the request asynchronously
        :return: RolePermissionOutput
        """
        ...
    
    def modify_project(self, project_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a project

        :param str project_id: (required)
        :param ProjectModify body: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_project_analysis(self, cid, analysis_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify an analysis.

        Modify an analysis.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param AnalysisModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_project_file(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify a file&#x27;s attributes

        Note: If modifying a file's modality, the current classification will be cleared (except for items in the \"Custom\" list)

        :param str cid: (required)
        :param str filename: (required)
        :param FileModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_project_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update classification for a particular file.

        If replacing a file's classification, the modality can optionally be modified as well.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_project_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info for a particular file.

        Modify and return the file 'info' field

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_project_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update or replace info for a(n) project.

        Update or replace info for a(n) project. Keys that contain '$' or '.' will be sanitized in the process of being updated on the container.

        :param str cid: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_project_note(self, cid, note_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a note of a(n) project.

        Update a note of a(n) project

        :param str cid: (required)
        :param str note_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: int
        """
        ...
    
    def modify_project_rule(self, project_id, rule_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a rule on a project.

        Update a rule on a project.

        :param str project_id: (required)
        :param str rule_id: (required)
        :param GearRuleModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearRuleOutput
        """
        ...
    
    def modify_project_settings(self, project_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify a(n) project settings

        Route for modifying settings for a a(n) project

        :param str project_id: (required)
        :param ProjectSettingsInput body: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: ProjectSettingsOutput
        """
        ...
    
    def modify_project_user_permission(self, project_id, uid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a user&#x27;s permission for this project.

        Update a user's permission for this project.

        :param str project_id: (required)
        :param str uid: (required)
        :param RolePermissionUpdate body: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: RolePermissionOutput
        """
        ...
    
    def project_copy(self, project_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Copy By Reference

        Copy a project and its descendants to a new project tree

        :param str project_id: (required)
        :param ProjectCopyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ProjectCopyOutput
        """
        ...
    
    def project_packfile_upload(self, project_id, token, file, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add files to an in-progress packfile

        :param str project_id: (required)
        :param str token: (required)
        :param str file: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[FileOutput]
        """
        ...
    
    def recalc_all_projects(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Recalculate all sessions against their project templates.

        Iterates all projects that have a session template. Recalculate if projects' sessions satisfy the template. Returns list of modified session ids.

        :param bool async_: Perform the request asynchronously
        :return: SessionTemplateRecalcOutput
        """
        ...
    
    def recalc_project(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Currently does nothing--will eventually calculate if sessions in the project satisfy the template.

        Currently does nothing--will eventually calculate if sessions in the project satisfy the template.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: SessionTemplateRecalcOutput
        """
        ...
    
    def remove_project_rule(self, project_id, rule_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a project rule.

        :param str project_id: (required)
        :param str rule_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def remove_project_template(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove the session template for a project.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def rename_project_tag(self, cid, value, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Rename a tag.

        Rename a tag

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def set_project_template(self, project_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Set the session template for a project.

        :param str project_id: (required)
        :param ProjectTemplateListInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def start_project_packfile_upload(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Start a packfile upload to project

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: UploadTokenOutput
        """
        ...
    
    def upload_file_to_project(self, container_id, file, signed=..., **kwargs): # -> list[Any] | str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upload a file to a(n) project.

        Upload a file to a(n) project.

        :param str container_id: (required)
        :param str file: The file to upload (required)
        :param bool preserve_metadata:
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str metadata: Metadata object as a JSON-encoded string
        :param list[str] x_accept_feature: redirect header
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: union[list[FileOutput],UploadTicketOutput]
        """
        ...
    
    def upload_output_to_project_analysis(self, cid, analysis_id, file, signed=..., **kwargs): # -> list[Any] | str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upload an output file to an analysis.

        Upload an output file to an analysis

        :param str cid: (required)
        :param str analysis_id: (required)
        :param str file: The file to upload (required)
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: list[FileOutput]
        """
        ...
    
    def upsert_project_hierarchy(self, project_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create or update subject, session and acquisition containers in the project.

        Create, update or just return an existing container sub-hierarchy as-is for the given project. Useful for efficient and highly parallel automated imports using device authN, based on common routing fields such as id, uid and label.

        :param str project_id: (required)
        :param ProjectHierarchyInput body: (required)
        :param str uid_scope:
        :param bool async_: Perform the request asynchronously
        :return: ProjectHierarchyOutput
        """
        ...
    
    def collect_usage(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Collect daily usage statistics.

        Collects usage statistics for the selected day (or yesterday if no day is given)

        :param int year: The year portion of the date
        :param int month: The month portion of the date
        :param int day: The day portion of the date
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def get_access_log_report(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a report of access log entries for the given parameters

        :param bool csv: Set to download a csv file instead of json
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order.(e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return
        :param int skip: The number of entries to skip
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param datetime start_date: An ISO formatted timestamp for the start time of the report
        :param datetime end_date: An ISO formatted timestamp for the end time of the report
        :param str user: User id of the target user
        :param str subject: Limit the report to the subject code of subject accessed
        :param str project: Limit the report to the project id
        :param list[AccessType] access_types: The list of access_types to filter logs
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: list[ReportAccessLogEntry]
        """
        ...
    
    def get_access_log_types(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the list of types of access log entries

        :param bool async_: Perform the request asynchronously
        :return: list[str]
        """
        ...
    
    def get_daily_usage_range_report(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a daily usage report for a given range of dates.

        :param datetime start_date: An ISO formatted timestamp for the start time of the report
        :param datetime end_date: An ISO formatted timestamp for the end time of the report
        :param str group: Limit the report to the given group id
        :param str project: Limit the report to the given project id
        :param bool async_: Perform the request asynchronously
        :return: list[DailyReportUsage]
        """
        ...
    
    def get_daily_usage_report(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a daily usage report for the given month.

        If no year/month pair is given, the current month will be used.

        :param int year: The year portion of the date
        :param int month: The month portion of the date
        :param str group: Limit the report to the given group id
        :param str project: Limit the report to the given project id
        :param bool async_: Perform the request asynchronously
        :return: list[DailyReportUsage]
        """
        ...
    
    def get_legacy_usage_report(self, type, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a usage report for the site grouped by month or project

        This report is DEPRECATED and will be removed in a future release

        :param str type: The type of usage report to generate (required)
        :param datetime start_date: An ISO formatted timestamp for the start time of the report
        :param datetime end_date: An ISO formatted timestamp for the end time of the report
        :param bool async_: Perform the request asynchronously
        :return: list[LegacyUsageReport]
        """
        ...
    
    def get_project_report(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get project report

        Get project report

        :param list[str] projects: Specify multiple times to include projects in the report
        :param datetime start_date: Report start date
        :param datetime end_date: Report end date
        :param bool async_: Perform the request asynchronously
        :return: ProjectReportList
        """
        ...
    
    def get_site_report(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the site report

        :param bool async_: Perform the request asynchronously
        :return: SiteReport
        """
        ...
    
    def get_usage_availability(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get year/month combinations where report data is available.

        Get year/month combinations where report data is available. Returns:     Returns the list of months where report data is available

        :param bool async_: Perform the request asynchronously
        :return: ReportAvailabilityList
        """
        ...
    
    def get_usage_report(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a usage report for the given month.

        If no year/month pair is given, the current month will be used.

        :param int year: The year portion of the date
        :param int month: The month portion of the date
        :param str project: Project to filter to
        :param bool async_: Perform the request asynchronously
        :return: list[ReportUsage]
        """
        ...
    
    def lookup_path(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Perform path based lookup of a single node in the Flywheel hierarchy

        This will perform a deep lookup of a node. See /resolve for more details.

        :param ResolveInput body: (required)
        :param bool full_tree:
        :param bool exhaustive:
        :param bool include_all_info: Include all info in returned objects
        :param bool async_: Perform the request asynchronously
        :return: ResolverNode
        """
        ...
    
    def resolve_path(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Perform path based lookup of nodes in the Flywheel hierarchy

        This will perform a deep lookup of a node (i.e. group/project/session/acquisition) and its children, including any files. The query path is an array of strings in the following order (by default):    * group id   * project label   * session label   * acquisition label  Additionally, analyses for project/session/acquisition nodes can be resolved by inserting the literal string `\"analyses\"`. e.g. `['scitran', 'MyProject', 'analyses']`.  Files for projects, sessions, acquisitions and analyses can be resolved by inserting the literal string `\"files\"`. e.g. `['scitran', 'MyProject', 'files']`.  An ID can be used instead of a label by formatting the string as `<id:project_id>`. The full path to the node, and the node's children will be included in the response.

        :param ResolveInput body: (required)
        :param bool full_tree: Parse full download style paths (e.g. group/PROJECTS/project_label/SUBJECTS/...)
        :param bool minattr: Return only minimal attributes
        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param bool include_all_info: Include all info in returned objects
        :param bool async_: Perform the request asynchronously
        :return: ResolveOutput
        """
        ...
    
    def add_role(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a new role

        :param RoleInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: RoleOutput
        """
        ...
    
    def delete_role(self, role_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the role

        :param str role_id: The ID of the role (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def get_all_roles(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get list of all roles

        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[RoleOutput],Page]
        """
        ...
    
    def get_role(self, role_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return the role identified by the RoleId

        :param str role_id: The ID of the role (required)
        :param bool async_: Perform the request asynchronously
        :return: RoleOutput
        """
        ...
    
    def modify_role(self, role_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update the role identified by RoleId

        :param str role_id: (required)
        :param RoleUpdate body: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: RoleOutput
        """
        ...
    
    def add_session(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a new session

        Create a session.

        :param SessionInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def add_session_analysis(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create an analysis and upload files.

        When query param \"job\" is \"true\", send JSON to create an analysis and job.  Otherwise, multipart/form-data to upload files and create an analysis.

        :param str cid: (required)
        :param union[AdhocAnalysisInput,JobAnalysisInput] body: (required)
        :param bool job: returns job_id instead of analysis.id
        :param bool job: returns job_id instead of analysis.id
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def add_session_analysis_note(self, container_id, analysis_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a note to a(n) session analysis.

        Add a note to a(n) session analysis.

        :param str container_id: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param NoteInput body: note content (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def add_session_note(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a note to a(n) session.

        Add a note to a(n) session.

        :param str container_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def add_session_tag(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a tag to a(n) session.

        Propagates changes to projects, sessions and acquisitions

        :param str cid: (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def add_session_tags(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add multiple tags to a(n) session

        Add multiple tags to a(n) session

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_session(self, session_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a session

        Read-write project permissions are required to delete a session. Admin project permissions are required if the session or it's acquisitions contain data uploaded by sources other than users and jobs.

        :param str session_id: (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_session_analysis(self, cid, analysis_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete an analysis

        Delete an analysis for a container.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param ContainerDeleteReason delete_reason: Provide a reason for the deletion
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_session_analysis_note(self, cid, analysis_id, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a note from a(n) session analysis.

        Remove a note from a(n) session analysis.

        :param str cid: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str note_id: 24-char hex note id (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_session_file(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a file

        A user with read-write or higher permissions on the container may delete files that were uploaded by users or were the output of jobs. (Specifically, files whose `origin.type` is either `job` or `user`.) <br/> A user with admin permissions on the container may delete any file.

        :param str cid: (required)
        :param str filename: (required)
        :param ContainerDeleteReason delete_reason: A reason for deletion when audit-trail is enabled
        :param bool force: Force deletion of the file even if some checks fail. Deprecated, will be removed in a future release.
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_session_note(self, cid, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a note from a(n) session

        Remove a note from a(n) session

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_session_tag(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a tag

        Delete a tag

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_session_tags(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple tags from a(n) session

        Delete multiple tags from a(n) session

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_sessions_by_ids(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple sessions by ID list

        Delete multiple sessions by ID list

        :param list[str] body: List of IDs to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_sessions_by_query(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """*DEPRECATED* Delete multiple sessions by query

        Delete multiple sessions by query

        :param list[Filter] body: Query for containers to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def download_file_from_session(self, session_id, file_name, dest_file, **kwargs): # -> None:
        """Download a file.

        Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.  To generate a ticket:   - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.   - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.  When \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.  When virus_scan feature is enabled the quarantined files only can be downloaded using signed urls otherwise it will return with a HTTP 400 response.

        :param str session_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_session_file_zip_info(self, session_id, file_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.

        :param str session_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_session_download_url(self, session_id, file_name, **kwargs): # -> None:
        """Get a signed URL to download a named child file.

        :param str session_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_input_from_session_analysis(self, session_id, analysis_id, filename, dest_file, **kwargs): # -> None:
        """Download analysis inputs with filter.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for matching inputs in the analysis. If no \"ticket\" query param is included, inputs will be downloaded directly.

        :param str session_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_session_analysis_input_zip_info(self, session_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.

        :param str session_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_session_analysis_input_download_url(self, session_id, analysis_id, filename, **kwargs): # -> None:
        """Get a signed URL to download a named child file.

        :param str session_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_output_from_session_analysis(self, session_id, analysis_id, filename, dest_file, **kwargs): # -> None:
        """Download analysis outputs with filter.

        If \"ticket\" query param is included and not empty, download outputs. If \"ticket\" query param is included and empty, create a ticket for matching outputs in the analysis. If no \"ticket\" query param is included, outputs will be downloaded directly.

        :param str session_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_session_analysis_output_zip_info(self, session_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.

        :param str session_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_session_analysis_output_download_url(self, session_id, analysis_id, filename, **kwargs): # -> None:
        """Get a signed URL to download a named child file.

        :param str session_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_all_sessions(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a list of sessions

        Finds all sessions.

        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param bool join_avatars: add name and avatar to notes
        :param JoinType join: join file origins
        :param bool include_all_info: Include all info in returned objects
        :param str user_id:
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[SessionListOutput]]
        """
        ...
    
    def get_session(self, session_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a single session

        Get a single session

        :param str session_id: (required)
        :param bool join_avatars: add name and avatar to notes
        :param JoinType join:
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: SessionOutput
        """
        ...
    
    def get_session_acquisitions(self, session_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List acquisitions in a session

        Get acquisitions.

        :param str session_id: (required)
        :param str collection_id:
        :param bool exhaustive:
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[AcquisitionListOutput],Page]
        """
        ...
    
    def get_session_analyses(self, cid, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get analyses for a(n) session.

        Returns analyses that directly belong to this resource.

        :param str cid: (required)
        :param bool inflate_job:
        :param bool join_avatars:
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]]
        """
        ...
    
    def get_session_analysis(self, cid, analysis_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get an analysis.

        Get an analysis.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param bool inflate_job: Return job as an object instead of an id
        :param bool join_avatars:
        :param JoinType join:
        :param bool async_: Perform the request asynchronously
        :return: union[AnalysisOutputInflatedJob,AnalysisOutput]
        """
        ...
    
    def get_session_file_info(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get info for a particular file.

        Get info for a particular file.

        :param str cid: Container Id (required)
        :param str filename: (required)
        :param bool async_: Perform the request asynchronously
        :return: FileOutput
        """
        ...
    
    def get_session_jobs(self, session_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return any jobs that use inputs from this session

        Gets session jobs.

        :param str session_id: (required)
        :param list[str] states: filter results by job state
        :param list[str] tags: filter results by job tags
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[JobsList,Page]
        """
        ...
    
    def get_session_note(self, cid, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a note of a(n) session.

        Get a note of a(n) session

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def get_session_tag(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the value of a tag, by name.

        Get the value of a tag, by name

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def modify_session(self, session_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a session

        Modify a session.

        :param str session_id: (required)
        :param SessionModify body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_session_analysis(self, cid, analysis_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify an analysis.

        Modify an analysis.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param AnalysisModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_session_file(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify a file&#x27;s attributes

        Note: If modifying a file's modality, the current classification will be cleared (except for items in the \"Custom\" list)

        :param str cid: (required)
        :param str filename: (required)
        :param FileModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_session_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update classification for a particular file.

        If replacing a file's classification, the modality can optionally be modified as well.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_session_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info for a particular file.

        Modify and return the file 'info' field

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_session_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update or replace info for a(n) session.

        Update or replace info for a(n) session. Keys that contain '$' or '.' will be sanitized in the process of being updated on the container.

        :param str cid: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_session_note(self, cid, note_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a note of a(n) session.

        Update a note of a(n) session

        :param str cid: (required)
        :param str note_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: int
        """
        ...
    
    def rename_session_tag(self, cid, value, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Rename a tag.

        Rename a tag

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def session_copy(self, session_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Smart copy a session

        Smart copy a session

        :param str session_id: (required)
        :param SessionCopyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def upload_file_to_session(self, container_id, file, signed=..., **kwargs): # -> list[Any] | str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upload a file to a(n) session.

        Upload a file to a(n) session.

        :param str container_id: (required)
        :param str file: The file to upload (required)
        :param bool preserve_metadata:
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str metadata: Metadata object as a JSON-encoded string
        :param list[str] x_accept_feature: redirect header
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: union[list[FileOutput],UploadTicketOutput]
        """
        ...
    
    def upload_output_to_session_analysis(self, cid, analysis_id, file, signed=..., **kwargs): # -> list[Any] | str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upload an output file to an analysis.

        Upload an output file to an analysis

        :param str cid: (required)
        :param str analysis_id: (required)
        :param str file: The file to upload (required)
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: list[FileOutput]
        """
        ...
    
    def add_provider(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a new provider

        :param IngressProvider body: (required)
        :param bool async_: Perform the request asynchronously
        :return: EgressProviderId
        """
        ...
    
    def add_site_rule(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a new site rule.

        :param GearRuleInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearRule
        """
        ...
    
    def delete_provider(self, provider_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the provider identified by ProviderId

        Returns an empty 204 response if successful. The provider will be deleted asynchronously; if it is a storage provider, any files on the provider that have been deleted but not yet cleaned up will be hard deleted. Use the `get_provider` operation to check the deletion status.

        :param str provider_id: The ID of the provider (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def get_bookmark_list(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get Bookmark List

        :param bool async_: Perform the request asynchronously
        :return: list[Bookmark]
        """
        ...
    
    def get_provider(self, provider_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return the provider identified by ProviderId

        Return the provider identified by ProviderId

        :param str provider_id: The ID of the provider (required)
        :param bool async_: Perform the request asynchronously
        :return: EgressProvider
        """
        ...
    
    def get_provider_config(self, provider_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return the configuration for provider identified by ProviderId

        The returned configuration will be redacted, with any privileged values replaced with null.

        :param str provider_id: The ID of the provider (required)
        :param bool async_: Perform the request asynchronously
        :return: object
        """
        ...
    
    def get_providers(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return a list of all providers on the site

        Return a list of all providers on the site

        :param ProviderClass _class: Limit the response to the given provider class
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param bool async_: Perform the request asynchronously
        :return: list[EgressProvider]
        """
        ...
    
    def get_site_rule(self, rule_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a site rule.

        :param str rule_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearRule
        """
        ...
    
    def get_site_rules(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all site rules.

        :param int limit:
        :param str after_id:
        :param str name:
        :param bool async_: Perform the request asynchronously
        :return: list[GearRule]
        """
        ...
    
    def get_site_settings(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return administrative site settings

        Returns the site settings, which includes center-pays gear list. If the site settings have never been created, then center_gears will be null, rather than an empty list.

        :param bool async_: Perform the request asynchronously
        :return: SiteSettings
        """
        ...
    
    def modify_bookmark_list(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify Bookmark List

        :param list[Bookmark] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[Bookmark]
        """
        ...
    
    def modify_provider(self, provider_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update the provider identified by ProviderId

        Update the provider identified by ProviderId

        :param str provider_id: The ID of the provider (required)
        :param IngressUpdateProvider body: (required)
        :param bool async_: Perform the request asynchronously
        :return: EgressProvider
        """
        ...
    
    def modify_site_rule(self, rule_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a site rule.

        :param str rule_id: (required)
        :param GearRuleModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearRule
        """
        ...
    
    def modify_site_settings(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update administrative site settings

        :param IngressSiteSettings body: (required)
        :param bool async_: Perform the request asynchronously
        :return: SiteSettings
        """
        ...
    
    def remove_site_rule(self, rule_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a site rule.

        :param str rule_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def add_subject(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a new subject

        Create a new subject

        :param SubjectInput body: subject object to create (required)
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def add_subject_analysis(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create an analysis and upload files.

        When query param \"job\" is \"true\", send JSON to create an analysis and job.  Otherwise, multipart/form-data to upload files and create an analysis.

        :param str cid: (required)
        :param union[AdhocAnalysisInput,JobAnalysisInput] body: (required)
        :param bool job: returns job_id instead of analysis.id
        :param bool job: returns job_id instead of analysis.id
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def add_subject_analysis_note(self, container_id, analysis_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a note to a(n) subject analysis.

        Add a note to a(n) subject analysis.

        :param str container_id: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param NoteInput body: note content (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def add_subject_note(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a note to a(n) subject.

        Add a note to a(n) subject.

        :param str container_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def add_subject_tag(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a tag to a(n) subject.

        Propagates changes to projects, sessions and acquisitions

        :param str cid: (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def add_subject_tags(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add multiple tags to a(n) subject

        Add multiple tags to a(n) subject

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def create_master_subject_code(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Request a master subject code for the given patient

        The workflow is the following.   - send `patient_id` (e.g., MRN) and/or `first_name`, `last_name`, `date_of_birth`   - indicate whether to use `patient_id` for identification or `first_name`, `last_name`, `date_of_birth`     by the `use_patient_id` field   - the response will contain a master subject code   - if you send the same identifying information again, you will receive the same code  Note that if you received a MSC code for example by just providing the `patient_id`, you can save more information for that MSC in a second request (`first_name`, `last_name`, `date_of_birth`). Only the missing fields will be set, so you can't update any existing field (e.g. changing the name). Since you can create multiple MSC codes with the same name and date of birth using different patient ids, you will get HTTP 400 error if you request an MSC code by name and date of birth and there are multiple matches. In this case you need to use patient id.

        :param union[MasterSubjectCodeInput,MasterSubjectCodeDobInput] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: MasterSubjectCodeOutput
        """
        ...
    
    def delete_subject(self, subject_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a subject

        Read-write project permissions are required to delete a subject. Admin project permissions are required if the subject or it's acquisitions contain data uploaded by sources other than users and jobs.

        :param str subject_id: 24-char hex subject id (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subject_analysis(self, cid, analysis_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete an analysis

        Delete an analysis for a container.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param ContainerDeleteReason delete_reason: Provide a reason for the deletion
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subject_analysis_note(self, cid, analysis_id, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a note from a(n) subject analysis.

        Remove a note from a(n) subject analysis.

        :param str cid: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str note_id: 24-char hex note id (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subject_file(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a file

        A user with read-write or higher permissions on the container may delete files that were uploaded by users or were the output of jobs. (Specifically, files whose `origin.type` is either `job` or `user`.) <br/> A user with admin permissions on the container may delete any file.

        :param str cid: (required)
        :param str filename: (required)
        :param ContainerDeleteReason delete_reason: A reason for deletion when audit-trail is enabled
        :param bool force: Force deletion of the file even if some checks fail. Deprecated, will be removed in a future release.
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subject_note(self, cid, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a note from a(n) subject

        Remove a note from a(n) subject

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subject_tag(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a tag

        Delete a tag

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subject_tags(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple tags from a(n) subject

        Delete multiple tags from a(n) subject

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_subjects_by_ids(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple subjects by ID list

        Delete multiple subjects by ID list

        :param list[str] body: List of IDs to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subjects_by_query(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """*DEPRECATED* Delete multiple subjects by query

        Delete multiple subjects by query

        :param list[Filter] body: Query for containers to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def download_file_from_subject(self, subject_id, file_name, dest_file, **kwargs): # -> None:
        """Download a file.

        Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.  To generate a ticket:   - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.   - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.  When \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.  When virus_scan feature is enabled the quarantined files only can be downloaded using signed urls otherwise it will return with a HTTP 400 response.

        :param str subject_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_subject_file_zip_info(self, subject_id, file_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.

        :param str subject_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_subject_download_url(self, subject_id, file_name, **kwargs): # -> None:
        """Get a signed URL to download a named child file.

        :param str subject_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_input_from_subject_analysis(self, subject_id, analysis_id, filename, dest_file, **kwargs): # -> None:
        """Download analysis inputs with filter.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for matching inputs in the analysis. If no \"ticket\" query param is included, inputs will be downloaded directly.

        :param str subject_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_subject_analysis_input_zip_info(self, subject_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.

        :param str subject_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_subject_analysis_input_download_url(self, subject_id, analysis_id, filename, **kwargs): # -> None:
        """Get a signed URL to download a named child file.

        :param str subject_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_output_from_subject_analysis(self, subject_id, analysis_id, filename, dest_file, **kwargs): # -> None:
        """Download analysis outputs with filter.

        If \"ticket\" query param is included and not empty, download outputs. If \"ticket\" query param is included and empty, create a ticket for matching outputs in the analysis. If no \"ticket\" query param is included, outputs will be downloaded directly.

        :param str subject_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_subject_analysis_output_zip_info(self, subject_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.

        :param str subject_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_subject_analysis_output_download_url(self, subject_id, analysis_id, filename, **kwargs): # -> None:
        """Get a signed URL to download a named child file.

        :param str subject_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_all_subjects(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a list of subjects

        Get a list of subjects

        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param JoinType join: join file origins
        :param bool join_avatars: add name and avatar to notes
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[SubjectOutputForList]]
        """
        ...
    
    def get_subject(self, subject_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a single subject

        Get an subject by its id  Args:     subject_id: The id of the subject     join: Attribute to join on     join_avatars: Join the user avatars for permissions     auth_session: The auth session  Returns:     SubjectOutput

        :param str subject_id: 24-char hex subject id (required)
        :param JoinType join: join file origins
        :param bool join_avatars: add name and avatar to notes
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: SubjectOutput
        """
        ...
    
    def get_subject_analyses(self, cid, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get analyses for a(n) subject.

        Returns analyses that directly belong to this resource.

        :param str cid: (required)
        :param bool inflate_job:
        :param bool join_avatars:
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]]
        """
        ...
    
    def get_subject_analysis(self, cid, analysis_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get an analysis.

        Get an analysis.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param bool inflate_job: Return job as an object instead of an id
        :param bool join_avatars:
        :param JoinType join:
        :param bool async_: Perform the request asynchronously
        :return: union[AnalysisOutputInflatedJob,AnalysisOutput]
        """
        ...
    
    def get_subject_file_info(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get info for a particular file.

        Get info for a particular file.

        :param str cid: Container Id (required)
        :param str filename: (required)
        :param bool async_: Perform the request asynchronously
        :return: FileOutput
        """
        ...
    
    def get_subject_note(self, cid, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a note of a(n) subject.

        Get a note of a(n) subject

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def get_subject_sessions(self, subject_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List sessions of a subject

        List sessions of a subject

        :param str subject_id: 24-char hex subject id (required)
        :param JoinType join: join file origins
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[SessionListOutput]]
        """
        ...
    
    def get_subject_tag(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the value of a tag, by name.

        Get the value of a tag, by name

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def modify_subject(self, subject_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a subject

        Update a subject

        :param str subject_id: 24-char hex subject id (required)
        :param SubjectModify body: subject object to modify (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_subject_analysis(self, cid, analysis_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify an analysis.

        Modify an analysis.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param AnalysisModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_subject_file(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify a file&#x27;s attributes

        Note: If modifying a file's modality, the current classification will be cleared (except for items in the \"Custom\" list)

        :param str cid: (required)
        :param str filename: (required)
        :param FileModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_subject_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update classification for a particular file.

        If replacing a file's classification, the modality can optionally be modified as well.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_subject_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info for a particular file.

        Modify and return the file 'info' field

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_subject_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update or replace info for a(n) subject.

        Update or replace info for a(n) subject. Keys that contain '$' or '.' will be sanitized in the process of being updated on the container.

        :param str cid: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_subject_note(self, cid, note_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a note of a(n) subject.

        Update a note of a(n) subject

        :param str cid: (required)
        :param str note_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: int
        """
        ...
    
    def rename_subject_tag(self, cid, value, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Rename a tag.

        Rename a tag

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def upload_file_to_subject(self, container_id, file, signed=..., **kwargs): # -> list[Any] | str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upload a file to a(n) subject.

        Upload a file to a(n) subject.

        :param str container_id: (required)
        :param str file: The file to upload (required)
        :param bool preserve_metadata:
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str metadata: Metadata object as a JSON-encoded string
        :param list[str] x_accept_feature: redirect header
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: union[list[FileOutput],UploadTicketOutput]
        """
        ...
    
    def upload_output_to_subject_analysis(self, cid, analysis_id, file, signed=..., **kwargs): # -> list[Any] | str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upload an output file to an analysis.

        Upload an output file to an analysis

        :param str cid: (required)
        :param str analysis_id: (required)
        :param str file: The file to upload (required)
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: list[FileOutput]
        """
        ...
    
    def verify_master_subject_code(self, code, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Verify that the given master subject code exists or not

        Verify that the given master subject code exists or not

        :param str code: code id (required)
        :param bool async_: Perform the request asynchronously
        :return: MasterSubjectCodeOutput
        """
        ...
    
    def fetch_tree(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Query a portion of the flywheel hierarchy, returning only the requested fields.

        This is a build-your-own request endpoint that can fetch from anywhere in the hierarchy, returning just the fields that you care about.  # Fields Each fetch-level described must include a list of fields to return. These fields can be anything on the container (except info), and will be included in the response if they are present in the container.  # Joins Children or parents can be joined as part of this request, by specifying an additional subdocument of the given name. Check /tree/graph for a list of containers and their connections.  # Filter Joined documents can be further filtered (with the exception of inputs & files) by passing a filter in the subdocument. Filtering follows the same convention as top-level pagination.  # Sort Joined documents can be sorted as well, following the convention as top-level pagination.  # Limit Joins can be limited to a the first N documents by specifying a limit in the subdocument.  # Join-origin Passing `true` for the `join-origin` flag in the files subdocument will populates the `join-origin` map for each container with files.

        :param GraphFilter body: (required)
        :param bool exhaustive:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[object]]
        """
        ...
    
    def get_tree_graph(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a description of the flywheel hiearchy

        Get a description of the flywheel hiearchy

        :param bool async_: Perform the request asynchronously
        :return: dict(str, TreeGraphNode)
        """
        ...
    
    def check_uids_exist(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Check for existence of UIDs system-wide

        Check if any of the given list of UIDs exist in the system

        :param union[UidCheckInputSessions,UidCheckInputAcquisitions] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: UidCheckOutput
        """
        ...
    
    def cleanup_signed_upload_url(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Cleanup unused file blob previously uploaded using signed URL

        :param SignedUrlCleanupInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def complete_s3_multipart_upload(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Complete S3 multipart signed url upload

        Complete S3 uploads exceeding 5GB and create the final object in the bucket. Expected an upload id returned previously by the `POST /upload/signed-url` endpoint and the e-tags returned by S3 after uploaded each file part.

        :param CompleteS3MultipartUploadInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: CompleteMultipartUploadOutput
        """
        ...
    
    def create_signed_upload_url(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create new signed upload URL

        Return a signed upload URL for the requested storage provider_id. Multiple URLs are returned for S3 uploads exceeding 5GB.

        :param SignedUrlUploadInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: SignedUrlUploadOutput
        """
        ...
    
    def upload_by_label(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Multipart form upload with N file fields, each with their desired filename.

        ### Default behavior: > For technical reasons, no form field names can be repeated. Instead, use   (file1, file2) and so forth.  > A non-file form field called \"metadata\" is also required, which must be   a string containing JSON.  > See ``api/schemas/input/labelupload.json`` for the format of this metadata.  ### Signed URL upload with ``ticket`` > Upload a single file directly to the storage backend. The workflow is the following:    - Send a request with an empty ``?ticket=`` query parameter to get an upload ticket and URL   - Upload the file using a PUT request to the upload URL   - Once done, send a POST request to this endpoint with the upload ticket to finalize the upload.   The file will be placed into the DB via this POST request.

        :param bool preserve_metadata:
        :param str ticket: Use empty value to get a ticket, and provide the ticket id to finalize the upload
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str files:
        :param object metadata: Metadata object
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: union[list[File],UploadTicketOutput]
        """
        ...
    
    def upload_by_reaper(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Bottom-up UID matching of Multipart form upload with N file fields, each with their desired filename.

        ### Default behavior:  > Upload data, allowing users to move sessions during scans without causing new data to be   created in referenced project/group.  ### Evaluation Order:  * If a matching acquisition UID is found anywhere on the system, the related files will be placed under that acquisition. * **OR** If a matching session UID is found, a new acquistion is created with the specified UID under that Session UID. * **OR** If a matching group ID and project label are found, a new session and acquisition will be created within that project * **OR** If a matching group ID is found, a new project and session and acquisition will be created within that group. * **OR** A new session and acquisition will be created within a special \"Unknown\" group and project, which is only visible to system administrators.  ### Signed URL upload with ``ticket`` > Upload a single file directly to the storage backend. The workflow is the following:    - Send a request with an empty ``?ticket=`` query parameter to get an upload ticket and URL   - Upload the file using a PUT request to the upload URL   - Once done, send a POST request to this endpoint with the upload ticket to finalize the upload.   The file will be placed into the DB via this POST request.

        :param bool preserve_metadata:
        :param str ticket: Use empty value to get a ticket, and provide the ticket id to finalize the upload
        :param bool uid_placement:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str files:
        :param object metadata: Metadata object
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: union[list[File],UploadTicketOutput]
        """
        ...
    
    def upload_by_uid(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Multipart form upload with N file fields, each with their desired filename.

        ### Default behavior: > Same behavior as /api/upload/label,   except the metadata field must be uid format   See ``api/schemas/input/uidupload.json`` for the format of this metadata.  ### Signed URL upload with ``ticket`` > Upload a single file directly to the storage backend. The workflow is the following:    - Send a request with an empty ``?ticket=`` query parameter to get an upload ticket and URL   - Upload the file using a PUT request to the upload URL   - Once done, send a POST request to this endpoint with the upload ticket to finalize the upload.   The file will be placed into the DB via this POST request.

        :param bool preserve_metadata:
        :param str ticket: Use empty value to get a ticket, and provide the ticket id to finalize the upload
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str files:
        :param object metadata: Metadata object
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: union[list[File],UploadTicketOutput]
        """
        ...
    
    def upload_signed_fs_file(self, token, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upload file to local filesystem storage provider

        The POST `/api/upload/signed-url` endpoint returns a url with a jwt token pointing to this endpoint if the storage provider is a local filesystem then the file can be uploaded simply by sending the file content in the body of the payload. The destination storage provider and the file path are encoded in the jwt token.

        :param str token: Upload token (required)
        :param str body: Signed filesystem file upload payload (required)
        :param bool async_: Perform the request asynchronously
        :return: SignedFSUploadOutput
        """
        ...
    
    def add_user(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a new user

        Add a new user

        :param UserInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: UserOutputId
        """
        ...
    
    def delete_user(self, user_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a user

        Delete a user

        :param str user_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_user_key(self, id_, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete User Api Key

        :param str id_: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def generate_user_key(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Generates user api key

        Generate user api key for the current user.

        :param CoreModelsApiKeyApiKeyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ApiKeyOutput
        """
        ...
    
    def get_all_users(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return a list of all users

        Gets all users with pagination  Args:

        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[UserOutput],OutputUserPage]
        """
        ...
    
    def get_current_user(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get information about the current user

        Gets the current user  Args:     auth_session (AuthSession): session from incoming request Returns:     CurrentUserOutput: Pydantic model for client side user data

        :param bool async_: Perform the request asynchronously
        :return: CurrentUserOutput
        """
        ...
    
    def get_current_user_avatar(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the avatar of the current user

        Gets avatar of current user  Args:     auth_session (AuthSession): session from incoming request Returns:     str: url of avatar

        :param str default:
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def get_current_user_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get info of the current user

        Gets user info fields.  Args:     fields (str): csv of arbitrary keys to look for in user info     auth_session (AuthSession): session from incoming request Returns:     dict: arbitrary data matching the provided csv values

        :param str fields: Get only the specified fields from user's info. Accept multiple fields separated by comma. 
        :param bool async_: Perform the request asynchronously
        :return: object
        """
        ...
    
    def get_current_user_jobs(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return list of jobs created by the current user

        Gets jobs assigned to user with optional gear name regex  Args:     gear_name (str): name of gear to filter by     auth_session (AuthSession): session from incoming request Returns:     list: List of jobs linked to the user

        :param str gear: Gear name. Get only the jobs which are related to a specific gear. 
        :param bool exhaustive:
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: UserJobs
        """
        ...
    
    def get_user(self, user_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get information about the specified user

        Get user by id  Args:     uid (str): string matching uid pattern Returns:     UserOutput: Pydantic model for sending data to client

        :param str user_id: (required)
        :param bool include_deleted:
        :param bool async_: Perform the request asynchronously
        :return: UserOutput
        """
        ...
    
    def get_user_acquisitions(self, uid, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get all acquisitions that belong to the given user.

        Get all acquisitions that belong to the given user.

        :param str uid: (required)
        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param bool async_: Perform the request asynchronously
        :return: list[AcquisitionListOutput]
        """
        ...
    
    def get_user_avatar(self, user_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the avatar of the specified user

        gets avatar of user and redirects to it  Args:     user_id (str): user id matching user_id regex Returns:     RedirectResponse: redirects user to avatar Raises (ResourceNotFound): Raises 404 if no user avatar

        :param str user_id: (required)
        :param str default:
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def get_user_collections(self, user_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get all collections that belong to the given user.

        :param str user_id: (required)
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[CollectionWithStats],list[CollectionOutput],Page]
        """
        ...
    
    def get_user_groups(self, uid, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all groups the specified user is a member of

        :param str uid: (required)
        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: list[GroupOutput]
        """
        ...
    
    def get_user_projects(self, uid, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get all projects that belong to the given user.

        Get all projects that belong to the given user.

        :param str uid: (required)
        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param bool async_: Perform the request asynchronously
        :return: list[ProjectListOutput]
        """
        ...
    
    def get_user_sessions(self, uid, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get all sessions that belong to the given user.

        Get all sessions that belong to the given user.

        :param str uid: (required)
        :param bool exhaustive:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param bool async_: Perform the request asynchronously
        :return: list[SessionListOutput]
        """
        ...
    
    def modify_current_user_info(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update or replace info for the current user.

        Modifies user info fields  Args:     info (Info): Model representing arbitrary data     auth_session (AuthSession): session from incoming request Returns:     None

        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def modify_user(self, uid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update the specified user

        Update the specified user

        :param str uid: (required)
        :param ModifyUserInput body: (required)
        :param bool clear_permissions:
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def sync_user(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Sync a center user to enterprise (Sync service use ONLY)

        :param str cid: (required)
        :param SyncUserInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def data_view_columns(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return a list of all known column aliases for use in data views

        :param bool async_: Perform the request asynchronously
        :return: list[DataViewColumnAlias]
        """
        ...
    
    def delete_view(self, view_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a data view

        Soft deletes data view in database

        :param str view_id: The ID of the view (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def evaluate_view(self, view_id, container_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Execute a view, returning data in the preferred format.

        :param str view_id: The ID of the view (required)
        :param str container_id: The target container for view execution (required)
        :param str ticket: download ticket id
        :param str filename: download ticket filename
        :param FileFormat format: Available values : csv, tsv, json, ndjson, json_flat, json-row-column
        :param str sort: The sort fields and order.(e.g. label:asc,created:desc)
        :param str filter: An optional filter expression
        :param int skip: The optional number of rows to skip
        :param int limit: The optional max number of rows to return
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def evaluate_view_adhoc(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Execute an ad-hoc view, returning data in the preferred format.

        :param str container_id: The target container for view execution (required)
        :param ContainerPipelineInput body: (required)
        :param str filename: download ticket filename
        :param FileFormat format: Available values : csv, tsv, json, ndjson, json_flat, json-row-column
        :param str ticket: download ticket id
        :param str sort: The sort fields and order.(e.g. label:asc,created:desc)
        :param str filter: An optional filter expression
        :param int skip: The optional number of rows to skip
        :param int limit: The optional max number of rows to return
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def get_view(self, view_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return the view identified by ViewId

        :param str view_id: The ID of the view (required)
        :param bool async_: Perform the request asynchronously
        :return: ViewOutput
        """
        ...
    
    def modify_view(self, view_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update the view identified by ViewId

        :param str view_id: The ID of the view (required)
        :param ContainerModify body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def queue_adhoc(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Execute an ad-hoc view, returning a reference to the created data view execution.

        :param str container_id: The target container for view execution (required)
        :param ContainerPipelineInput body: (required)
        :param str sort: The sort fields and order.(e.g. label:asc,created:desc)
        :param str filter: An optional filter expression
        :param int skip: The optional number of rows to skip
        :param int limit: The optional max number of rows to return
        :param bool async_: Perform the request asynchronously
        :return: DataViewExecution
        """
        ...
    
    def queue_saved(self, view_id, container_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Execute a view, returning a reference to the created data view execution.

        Execute a view, returning a reference to the created data view execution.

        :param str view_id: The ID of the view (required)
        :param str container_id: The target container for view execution (required)
        :param str sort: The sort fields and order.(e.g. label:asc,created:desc)
        :param str filter: An optional filter expression
        :param int skip: The optional number of rows to skip
        :param int limit: The optional max number of rows to return
        :param bool async_: Perform the request asynchronously
        :return: DataViewExecution
        """
        ...
    
    def save_view_data_to_container(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Execute a view, saving data to the target container / file

        Execute a view, saving data to the target container / file

        :param str container_id: The target container for view execution (required)
        :param ContainerIdViewInputExecuteAndSave body: (required)
        :param FileFormat format: Available values : csv, tsv, json, ndjson, json_flat, json-row-column
        :param str ticket: download ticket id
        :param str filter: An optional filter expression
        :param str sort: The sort fields and order.(e.g. label:asc,created:desc)
        :param int skip: The optional number of rows to skip
        :param int limit: The optional max number of rows to return
        :param bool async_: Perform the request asynchronously
        :return: File
        """
        ...
    
    def enable_feature(self, value): # -> None:
        """Enable feature named value, via the x-accept-feature header"""
        ...
    
    def perform_version_check(self): # -> None:
        ...
    
    def add_nodes_to_collection(self, collection_id, level, node_ids, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Generic method to add a list of nodes to a collection.

        :param str collection_id: (required) The id of the collection to update
        :param str level: (required) The level of nodes to add (e.g. session or acquisition)
        :param list[str] node_ids: (required) The list of node ids of type level to add
        :return: None
        """
        ...
    
    def add_sessions_to_collection(self, collection_id, session_ids, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a list of sessions to a collection.

        :param str collection_id: (required) The id of the collection to update
        :param list[str] session_ids: (required) The list of session ids to add
        :return: None
        """
        ...
    
    def add_acquisitions_to_collection(self, collection_id, acquisition_ids, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a list of acquisitions to a collection.

        :param str collection_id: (required) The id of the collection to update
        :param list[str] acquisition_ids: (required) The list of acquisition ids to add
        :return: None
        """
        ...
    
    def change_job_state(self, job_id, state): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Change a job state.

        :param str job_id: (required) The id of the job to modify
        :param str state: (required) The new job state
        :return: None
        """
        ...
    
    def get(self, id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the specified object by id.

        Objects that can be retrieved in this way are:
            group, project, session, subject, acquisition, analysis and collection

        :param str id: The id of the object to retrieve
        :return: ContainerOutput
        """
        ...
    
    def resolve(self, path, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Perform a path based lookup of nodes in the Flywheel hierarchy.

        :param str path: (required) The path to resolve
        :return: ResolverOutput
        """
        ...
    
    def lookup(self, path): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Perform a path based lookup of a single node in the Flywheel hierarchy.

        :param str path: (required) The path to resolve
        :return: ResolverOutput
        """
        ...
    
    def file_url(self, path):
        """Perform a path based lookup of a file in the Flywheel hierarchy, and return a single-use download URL.

        :param str path: (required) The path to resolve
        :return: The file URL if found, otherwise raises an error
        """
        ...
    
    def download_tar(self, containers, dest_file, include_types=..., exclude_types=...): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Download the given set of containers as a tarball to dest_file.

        Supports downloading Projects, Sessions, Acquisitions and/or Analyses.

        :param containers: (required) The container, or list of containers to download.
        :param str dest_file: (required) The destination file on disk
        :param list include_types: The optional list of types to include in the download (e.g. ['nifti'])
        :param list exclude_types: The optional list of types to exclude from the download (e.g. ['dicom'])
        :return: A summary of the download
        """
        ...
    
    def download_zip(self, containers, dest_file, include_types=..., exclude_types=...): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Download the given set of containers as a zip archive to dest_file.

        Supports downloading Projects, Sessions, Acquisitions and/or Analyses.

        :param containers: (required) The container, or list of containers to download.
        :param str dest_file: (required) The destination file on disk
        :param list include_types: The optional list of types to include in the download (e.g. ['nifti'])
        :param list exclude_types: The optional list of types to exclude from the download (e.g. ['dicom'])
        :return: A summary of the download
        """
        ...
    
    def download_file_from_acquisition_as_data(self, acquisition_id, file_name, **kwargs): # -> bytes | Any | None:
        """Download a file.

        Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.  To generate a ticket:   - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.   - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.  When \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.  When virus_scan feature is enabled the quarantined files only can be downloaded using signed urls otherwise it will return with a HTTP 400 response.

        :param str acquisition_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :return: The binary file data
        """
        ...
    
    def download_input_from_acquisition_analysis_as_data(self, acquisition_id, analysis_id, filename, **kwargs): # -> bytes | Any | None:
        """Download analysis inputs with filter.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for matching inputs in the analysis. If no \"ticket\" query param is included, inputs will be downloaded directly.

        :param str acquisition_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :return: The binary file data
        """
        ...
    
    def download_output_from_acquisition_analysis_as_data(self, acquisition_id, analysis_id, filename, **kwargs): # -> bytes | Any | None:
        """Download analysis outputs with filter.

        If \"ticket\" query param is included and not empty, download outputs. If \"ticket\" query param is included and empty, create a ticket for matching outputs in the analysis. If no \"ticket\" query param is included, outputs will be downloaded directly.

        :param str acquisition_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :return: The binary file data
        """
        ...
    
    def set_acquisition_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update classification with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :return: ModifiedResult
        """
        ...
    
    def replace_acquisition_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Entirely replace classification with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :return: ModifiedResult
        """
        ...
    
    def delete_acquisition_file_classification_fields(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the specified fields from  + name + .

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :return: ModifiedResult
        """
        ...
    
    def set_acquisition_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def replace_acquisition_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Entirely replace info with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def delete_acquisition_file_info_fields(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the specified fields from  + name + .

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def set_acquisition_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info with the provided fields.

        :param str cid: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def replace_acquisition_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Entirely replace info with the provided fields.

        :param str cid: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def delete_acquisition_info_fields(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the specified fields from  + name + .

        :param str cid: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def download_file_from_analysis_as_data(self, analysis_id, file_name, **kwargs): # -> bytes | Any | None:
        """Download a file.

        Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.  To generate a ticket:   - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.   - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.  When \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.  When virus_scan feature is enabled the quarantined files only can be downloaded using signed urls otherwise it will return with a HTTP 400 response.

        :param str analysis_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :return: The binary file data
        """
        ...
    
    def download_input_from_analysis_as_data(self, analysis_id, filename, **kwargs): # -> bytes | Any | None:
        """Download analysis inputs with filter.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for matching inputs in the analysis. If no \"ticket\" query param is included, inputs will be downloaded directly.

        :param str analysis_id: 24-character hex ID (required)
        :param str filename: input filename (required)
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :return: The binary file data
        """
        ...
    
    def download_output_from_analysis_as_data(self, analysis_id, filename, **kwargs): # -> bytes | Any | None:
        """Download output file from analysis

        Download output file from analysis

        :param str analysis_id: Container ID (required)
        :param str filename: output file name (required)
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :return: The binary file data
        """
        ...
    
    def set_analysis_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update classification with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :return: ModifiedResult
        """
        ...
    
    def replace_analysis_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Entirely replace classification with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :return: ModifiedResult
        """
        ...
    
    def delete_analysis_file_classification_fields(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the specified fields from  + name + .

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :return: ModifiedResult
        """
        ...
    
    def set_analysis_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def replace_analysis_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Entirely replace info with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def delete_analysis_file_info_fields(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the specified fields from  + name + .

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def set_analysis_info(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info with the provided fields.

        :param str container_id: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def replace_analysis_info(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Entirely replace info with the provided fields.

        :param str container_id: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def delete_analysis_info_fields(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the specified fields from  + name + .

        :param str container_id: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def download_file_from_collection_as_data(self, collection_id, file_name, **kwargs): # -> bytes | Any | None:
        """Download a file.

        Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.  To generate a ticket:   - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.   - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.  When \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.  When virus_scan feature is enabled the quarantined files only can be downloaded using signed urls otherwise it will return with a HTTP 400 response.

        :param str collection_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :return: The binary file data
        """
        ...
    
    def set_collection_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update classification with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :return: ModifiedResult
        """
        ...
    
    def replace_collection_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Entirely replace classification with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :return: ModifiedResult
        """
        ...
    
    def delete_collection_file_classification_fields(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the specified fields from  + name + .

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :return: ModifiedResult
        """
        ...
    
    def set_collection_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def replace_collection_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Entirely replace info with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def delete_collection_file_info_fields(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the specified fields from  + name + .

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def set_collection_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info with the provided fields.

        :param str cid: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def replace_collection_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Entirely replace info with the provided fields.

        :param str cid: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def delete_collection_info_fields(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the specified fields from  + name + .

        :param str cid: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def download_file_from_container_as_data(self, container_id, file_name, **kwargs): # -> bytes | Any | None:
        """Download a file.

        Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.  To generate a ticket:   - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.   - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.  When \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.  When virus_scan feature is enabled the quarantined files only can be downloaded using signed urls otherwise it will return with a HTTP 400 response.

        :param str container_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :return: The binary file data
        """
        ...
    
    def download_input_from_container_analysis_as_data(self, container_id, analysis_id, filename, **kwargs): # -> bytes | Any | None:
        """Download analysis inputs with filter.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for matching inputs in the analysis. If no \"ticket\" query param is included, inputs will be downloaded directly.

        :param str container_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :return: The binary file data
        """
        ...
    
    def download_output_from_container_analysis_as_data(self, container_id, analysis_id, filename, **kwargs): # -> bytes | Any | None:
        """Download analysis outputs with filter.

        If \"ticket\" query param is included and not empty, download outputs. If \"ticket\" query param is included and empty, create a ticket for matching outputs in the analysis. If no \"ticket\" query param is included, outputs will be downloaded directly.

        :param str container_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :return: The binary file data
        """
        ...
    
    def set_container_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update classification with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :return: ModifiedResult
        """
        ...
    
    def replace_container_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Entirely replace classification with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :return: ModifiedResult
        """
        ...
    
    def delete_container_file_classification_fields(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the specified fields from  + name + .

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :return: ModifiedResult
        """
        ...
    
    def set_container_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def replace_container_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Entirely replace info with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def delete_container_file_info_fields(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the specified fields from  + name + .

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def set_container_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info with the provided fields.

        :param str cid: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def replace_container_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Entirely replace info with the provided fields.

        :param str cid: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def delete_container_info_fields(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the specified fields from  + name + .

        :param str cid: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def download_ticket_as_data(self, ticket, **kwargs): # -> bytes | Any | None:
        """Download files listed in the given ticket.

        You can use POST to create a download ticket The files listed in the ticket are put into a tar archive

        :param str ticket: ID of the download ticket (required)
        :param DownloadFormat format:
        :return: The binary file data
        """
        ...
    
    def download_file_from_project_as_data(self, project_id, file_name, **kwargs): # -> bytes | Any | None:
        """Download a file.

        Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.  To generate a ticket:   - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.   - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.  When \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.  When virus_scan feature is enabled the quarantined files only can be downloaded using signed urls otherwise it will return with a HTTP 400 response.

        :param str project_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :return: The binary file data
        """
        ...
    
    def download_input_from_project_analysis_as_data(self, project_id, analysis_id, filename, **kwargs): # -> bytes | Any | None:
        """Download analysis inputs with filter.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for matching inputs in the analysis. If no \"ticket\" query param is included, inputs will be downloaded directly.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :return: The binary file data
        """
        ...
    
    def download_output_from_project_analysis_as_data(self, project_id, analysis_id, filename, **kwargs): # -> bytes | Any | None:
        """Download analysis outputs with filter.

        If \"ticket\" query param is included and not empty, download outputs. If \"ticket\" query param is included and empty, create a ticket for matching outputs in the analysis. If no \"ticket\" query param is included, outputs will be downloaded directly.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :return: The binary file data
        """
        ...
    
    def set_project_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update classification with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :return: ModifiedResult
        """
        ...
    
    def replace_project_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Entirely replace classification with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :return: ModifiedResult
        """
        ...
    
    def delete_project_file_classification_fields(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the specified fields from  + name + .

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :return: ModifiedResult
        """
        ...
    
    def set_project_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def replace_project_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Entirely replace info with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def delete_project_file_info_fields(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the specified fields from  + name + .

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def set_project_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info with the provided fields.

        :param str cid: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def replace_project_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Entirely replace info with the provided fields.

        :param str cid: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def delete_project_info_fields(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the specified fields from  + name + .

        :param str cid: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def download_file_from_session_as_data(self, session_id, file_name, **kwargs): # -> bytes | Any | None:
        """Download a file.

        Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.  To generate a ticket:   - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.   - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.  When \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.  When virus_scan feature is enabled the quarantined files only can be downloaded using signed urls otherwise it will return with a HTTP 400 response.

        :param str session_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :return: The binary file data
        """
        ...
    
    def download_input_from_session_analysis_as_data(self, session_id, analysis_id, filename, **kwargs): # -> bytes | Any | None:
        """Download analysis inputs with filter.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for matching inputs in the analysis. If no \"ticket\" query param is included, inputs will be downloaded directly.

        :param str session_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :return: The binary file data
        """
        ...
    
    def download_output_from_session_analysis_as_data(self, session_id, analysis_id, filename, **kwargs): # -> bytes | Any | None:
        """Download analysis outputs with filter.

        If \"ticket\" query param is included and not empty, download outputs. If \"ticket\" query param is included and empty, create a ticket for matching outputs in the analysis. If no \"ticket\" query param is included, outputs will be downloaded directly.

        :param str session_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :return: The binary file data
        """
        ...
    
    def set_session_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update classification with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :return: ModifiedResult
        """
        ...
    
    def replace_session_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Entirely replace classification with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :return: ModifiedResult
        """
        ...
    
    def delete_session_file_classification_fields(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the specified fields from  + name + .

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :return: ModifiedResult
        """
        ...
    
    def set_session_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def replace_session_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Entirely replace info with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def delete_session_file_info_fields(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the specified fields from  + name + .

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def set_session_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info with the provided fields.

        :param str cid: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def replace_session_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Entirely replace info with the provided fields.

        :param str cid: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def delete_session_info_fields(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the specified fields from  + name + .

        :param str cid: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def download_file_from_subject_as_data(self, subject_id, file_name, **kwargs): # -> bytes | Any | None:
        """Download a file.

        Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.  To generate a ticket:   - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.   - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.  When \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.  When virus_scan feature is enabled the quarantined files only can be downloaded using signed urls otherwise it will return with a HTTP 400 response.

        :param str subject_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :return: The binary file data
        """
        ...
    
    def download_input_from_subject_analysis_as_data(self, subject_id, analysis_id, filename, **kwargs): # -> bytes | Any | None:
        """Download analysis inputs with filter.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for matching inputs in the analysis. If no \"ticket\" query param is included, inputs will be downloaded directly.

        :param str subject_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :return: The binary file data
        """
        ...
    
    def download_output_from_subject_analysis_as_data(self, subject_id, analysis_id, filename, **kwargs): # -> bytes | Any | None:
        """Download analysis outputs with filter.

        If \"ticket\" query param is included and not empty, download outputs. If \"ticket\" query param is included and empty, create a ticket for matching outputs in the analysis. If no \"ticket\" query param is included, outputs will be downloaded directly.

        :param str subject_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :return: The binary file data
        """
        ...
    
    def set_subject_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update classification with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :return: ModifiedResult
        """
        ...
    
    def replace_subject_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Entirely replace classification with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :return: ModifiedResult
        """
        ...
    
    def delete_subject_file_classification_fields(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the specified fields from  + name + .

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :return: ModifiedResult
        """
        ...
    
    def set_subject_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def replace_subject_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Entirely replace info with the provided fields.

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def delete_subject_file_info_fields(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the specified fields from  + name + .

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def set_subject_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info with the provided fields.

        :param str cid: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def replace_subject_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Entirely replace info with the provided fields.

        :param str cid: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def delete_subject_info_fields(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete the specified fields from  + name + .

        :param str cid: (required)
        :param Info body: (required)
        :return: ModifiedResult
        """
        ...
    
    def View(self, **kwargs): # -> DataView:
        """Short-hand for ``flywheel.ViewBuilder(**kwargs).build()``

        :param kwargs: The arguments to pass directly to ViewBuilder
        :return: The built data view
        """
        ...
    
    def print_view_columns(self, filter=..., limit=..., file=...): # -> None:
        """Print a list of column aliases that can be used in data views.

        :param str filter: The filter for available columns
        :param int limit: The limit for the number of columns to return
        :param file-like file: The file to print to
        """
        ...
    
    def read_view_data(self, view, container_id, decode=..., **kwargs): # -> StreamReader | HTTPResponse | Any:
        """Execute a data view against container, and return a file-like object that can be streamed.

        :param view: The view id or DataView object to execute.
        :type view: str or DataView
        :param str container_id: The id of the container to execute the view against
        :param bool decode: Whether or not to decode the stream to utf-8 (default is true)
        :param kwargs: Additional arguments to pass to the evaluate_view call. (e.g. format='csv')
        :return: A file-like object where the contents can be read
        """
        ...
    
    def read_view_dataframe(self, view, container_id, opts=..., **kwargs): # -> None:
        """Execute a data view against container, and return a DataFrame.

        NOTE: This requires that the pandas module be installed on the system.

        :param view: The view id or DataView object to execute.
        :type view: str or DataView
        :param str container_id: The id of the container to execute the view against
        :param object opts: Additional options to pass to the pandas read_json function
        :param kwargs: Additional arguments to pass to the evaluate_view call.
        :return: A pandas DataFrame
        """
        ...
    
    def save_view_data_task_manager(self, view, container_id, dest_file, **kwargs): # -> None:
        ...
    
    def save_view_data(self, view, container_id, dest_file, **kwargs): # -> None:
        """Execute a data view against container, and save the results to disk.

        :param view: The view id or DataView object to execute.
        :type view: str or DataView
        :param str container_id: The id of the container to execute the view against
        :param str dest_file: The destination file path
        :param kwargs: Additional arguments to pass to the evaluate_view call. (e.g. format='csv')
        """
        ...
    
    def signed_upload_output_to_analysis(self, cid, file, **kwargs): # -> list[Any] | None:
        ...
    
    def signed_upload_output_to_acquisition_analysis(self, _, cid, file, **kwargs): # -> list[Any] | None:
        ...
    
    def signed_upload_output_to_collection_analysis(self, _, cid, file, **kwargs): # -> list[Any] | None:
        ...
    
    def signed_upload_output_to_container_analysis(self, _, cid, file, **kwargs): # -> list[Any] | None:
        ...
    
    def signed_upload_output_to_project_analysis(self, _, cid, file, **kwargs): # -> list[Any] | None:
        ...
    
    def signed_upload_output_to_session_analysis(self, _, cid, file, **kwargs): # -> list[Any] | None:
        ...
    
    def signed_upload_output_to_subject_analysis(self, _, cid, file, **kwargs): # -> list[Any] | None:
        ...
    
    def signed_upload_file_to_acquisition(self, cid, file, **kwargs): # -> list[Any] | None:
        ...
    
    def signed_upload_file_to_collection(self, cid, file, **kwargs): # -> list[Any] | None:
        ...
    
    def signed_upload_file_to_container(self, cid, file, **kwargs): # -> list[Any] | None:
        ...
    
    def signed_upload_file_to_project(self, cid, file, **kwargs): # -> list[Any] | None:
        ...
    
    def signed_upload_file_to_session(self, cid, file, **kwargs): # -> list[Any] | None:
        ...
    
    def signed_upload_file_to_subject(self, cid, file, **kwargs): # -> list[Any] | None:
        ...
    
    def shutdown(self): # -> None:
        """Release any outstanding resources"""
        ...
    


