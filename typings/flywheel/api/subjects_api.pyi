"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class SubjectsApi:
    def __init__(self, api_client=...) -> None:
        ...
    
    def add_subject(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a new subject

        Create a new subject
        This method makes a synchronous HTTP request by default.

        :param SubjectInput body: subject object to create (required)
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def add_subject_with_http_info(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a new subject

        Create a new subject
        This method makes a synchronous HTTP request by default.

        :param SubjectInput body: subject object to create (required)
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def add_subject_analysis(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create an analysis and upload files.

        When query param \"job\" is \"true\", send JSON to create an analysis and job.  Otherwise, multipart/form-data to upload files and create an analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param union[AdhocAnalysisInput,JobAnalysisInput] body: (required)
        :param bool job: returns job_id instead of analysis.id
        :param bool job: returns job_id instead of analysis.id
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def add_subject_analysis_with_http_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create an analysis and upload files.

        When query param \"job\" is \"true\", send JSON to create an analysis and job.  Otherwise, multipart/form-data to upload files and create an analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param union[AdhocAnalysisInput,JobAnalysisInput] body: (required)
        :param bool job: returns job_id instead of analysis.id
        :param bool job: returns job_id instead of analysis.id
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def add_subject_analysis_note(self, container_id, analysis_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a note to a(n) subject analysis.

        Add a note to a(n) subject analysis.
        This method makes a synchronous HTTP request by default.

        :param str container_id: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param NoteInput body: note content (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def add_subject_analysis_note_with_http_info(self, container_id, analysis_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a note to a(n) subject analysis.

        Add a note to a(n) subject analysis.
        This method makes a synchronous HTTP request by default.

        :param str container_id: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param NoteInput body: note content (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def add_subject_note(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a note to a(n) subject.

        Add a note to a(n) subject.
        This method makes a synchronous HTTP request by default.

        :param str container_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def add_subject_note_with_http_info(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a note to a(n) subject.

        Add a note to a(n) subject.
        This method makes a synchronous HTTP request by default.

        :param str container_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def add_subject_tag(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a tag to a(n) subject.

        Propagates changes to projects, sessions and acquisitions
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def add_subject_tag_with_http_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a tag to a(n) subject.

        Propagates changes to projects, sessions and acquisitions
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def add_subject_tags(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add multiple tags to a(n) subject

        Add multiple tags to a(n) subject
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def add_subject_tags_with_http_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add multiple tags to a(n) subject

        Add multiple tags to a(n) subject
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def create_master_subject_code(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Request a master subject code for the given patient

        The workflow is the following.   - send `patient_id` (e.g., MRN) and/or `first_name`, `last_name`, `date_of_birth`   - indicate whether to use `patient_id` for identification or `first_name`, `last_name`, `date_of_birth`     by the `use_patient_id` field   - the response will contain a master subject code   - if you send the same identifying information again, you will receive the same code  Note that if you received a MSC code for example by just providing the `patient_id`, you can save more information for that MSC in a second request (`first_name`, `last_name`, `date_of_birth`). Only the missing fields will be set, so you can't update any existing field (e.g. changing the name). Since you can create multiple MSC codes with the same name and date of birth using different patient ids, you will get HTTP 400 error if you request an MSC code by name and date of birth and there are multiple matches. In this case you need to use patient id.
        This method makes a synchronous HTTP request by default.

        :param union[MasterSubjectCodeInput,MasterSubjectCodeDobInput] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: MasterSubjectCodeOutput
        """
        ...
    
    def create_master_subject_code_with_http_info(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Request a master subject code for the given patient

        The workflow is the following.   - send `patient_id` (e.g., MRN) and/or `first_name`, `last_name`, `date_of_birth`   - indicate whether to use `patient_id` for identification or `first_name`, `last_name`, `date_of_birth`     by the `use_patient_id` field   - the response will contain a master subject code   - if you send the same identifying information again, you will receive the same code  Note that if you received a MSC code for example by just providing the `patient_id`, you can save more information for that MSC in a second request (`first_name`, `last_name`, `date_of_birth`). Only the missing fields will be set, so you can't update any existing field (e.g. changing the name). Since you can create multiple MSC codes with the same name and date of birth using different patient ids, you will get HTTP 400 error if you request an MSC code by name and date of birth and there are multiple matches. In this case you need to use patient id.
        This method makes a synchronous HTTP request by default.

        :param union[MasterSubjectCodeInput,MasterSubjectCodeDobInput] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: MasterSubjectCodeOutput
        """
        ...
    
    def delete_subject(self, subject_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a subject

        Read-write project permissions are required to delete a subject. Admin project permissions are required if the subject or it's acquisitions contain data uploaded by sources other than users and jobs.
        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-char hex subject id (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subject_with_http_info(self, subject_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a subject

        Read-write project permissions are required to delete a subject. Admin project permissions are required if the subject or it's acquisitions contain data uploaded by sources other than users and jobs.
        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-char hex subject id (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subject_analysis(self, cid, analysis_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete an analysis

        Delete an analysis for a container.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param ContainerDeleteReason delete_reason: Provide a reason for the deletion
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subject_analysis_with_http_info(self, cid, analysis_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete an analysis

        Delete an analysis for a container.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param ContainerDeleteReason delete_reason: Provide a reason for the deletion
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subject_analysis_note(self, cid, analysis_id, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a note from a(n) subject analysis.

        Remove a note from a(n) subject analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str note_id: 24-char hex note id (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subject_analysis_note_with_http_info(self, cid, analysis_id, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a note from a(n) subject analysis.

        Remove a note from a(n) subject analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str note_id: 24-char hex note id (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subject_file(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a file

        A user with read-write or higher permissions on the container may delete files that were uploaded by users or were the output of jobs. (Specifically, files whose `origin.type` is either `job` or `user`.) <br/> A user with admin permissions on the container may delete any file.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param ContainerDeleteReason delete_reason: A reason for deletion when audit-trail is enabled
        :param bool force: Force deletion of the file even if some checks fail. Deprecated, will be removed in a future release.
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subject_file_with_http_info(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a file

        A user with read-write or higher permissions on the container may delete files that were uploaded by users or were the output of jobs. (Specifically, files whose `origin.type` is either `job` or `user`.) <br/> A user with admin permissions on the container may delete any file.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param ContainerDeleteReason delete_reason: A reason for deletion when audit-trail is enabled
        :param bool force: Force deletion of the file even if some checks fail. Deprecated, will be removed in a future release.
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subject_note(self, cid, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a note from a(n) subject

        Remove a note from a(n) subject
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subject_note_with_http_info(self, cid, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a note from a(n) subject

        Remove a note from a(n) subject
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subject_tag(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a tag

        Delete a tag
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subject_tag_with_http_info(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a tag

        Delete a tag
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subject_tags(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple tags from a(n) subject

        Delete multiple tags from a(n) subject
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_subject_tags_with_http_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple tags from a(n) subject

        Delete multiple tags from a(n) subject
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_subjects_by_ids(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple subjects by ID list

        Delete multiple subjects by ID list
        This method makes a synchronous HTTP request by default.

        :param list[str] body: List of IDs to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subjects_by_ids_with_http_info(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple subjects by ID list

        Delete multiple subjects by ID list
        This method makes a synchronous HTTP request by default.

        :param list[str] body: List of IDs to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subjects_by_query(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """*DEPRECATED* Delete multiple subjects by query

        Delete multiple subjects by query
        This method makes a synchronous HTTP request by default.

        :param list[Filter] body: Query for containers to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_subjects_by_query_with_http_info(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """*DEPRECATED* Delete multiple subjects by query

        Delete multiple subjects by query
        This method makes a synchronous HTTP request by default.

        :param list[Filter] body: Query for containers to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def download_file_from_subject(self, subject_id, file_name, dest_file, **kwargs): # -> None:
        """Download a file.

        Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.  To generate a ticket:   - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.   - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.  When \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.  When virus_scan feature is enabled the quarantined files only can be downloaded using signed urls otherwise it will return with a HTTP 400 response.
        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_file_from_subject_with_http_info(self, subject_id, file_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Download a file.

        Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.  To generate a ticket:   - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.   - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.  When \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.  When virus_scan feature is enabled the quarantined files only can be downloaded using signed urls otherwise it will return with a HTTP 400 response.
        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_subject_file_zip_info(self, subject_id, file_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.
        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_subject_file_zip_info_with_http_info(self, subject_id, file_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.
        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_subject_download_ticket(self, subject_id, file_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a signed URL to download a named child file.

        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_subject_download_ticket_with_http_info(self, subject_id, file_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a signed URL to download a named child file.

        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_input_from_subject_analysis(self, subject_id, analysis_id, filename, dest_file, **kwargs): # -> None:
        """Download analysis inputs with filter.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for matching inputs in the analysis. If no \"ticket\" query param is included, inputs will be downloaded directly.
        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_input_from_subject_analysis_with_http_info(self, subject_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Download analysis inputs with filter.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for matching inputs in the analysis. If no \"ticket\" query param is included, inputs will be downloaded directly.
        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_subject_analysis_input_zip_info(self, subject_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.
        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_subject_analysis_input_zip_info_with_http_info(self, subject_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.
        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_subject_analysis_input_download_ticket(self, subject_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a signed URL to download a named child file.

        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_subject_analysis_input_download_ticket_with_http_info(self, subject_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a signed URL to download a named child file.

        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_output_from_subject_analysis(self, subject_id, analysis_id, filename, dest_file, **kwargs): # -> None:
        """Download analysis outputs with filter.

        If \"ticket\" query param is included and not empty, download outputs. If \"ticket\" query param is included and empty, create a ticket for matching outputs in the analysis. If no \"ticket\" query param is included, outputs will be downloaded directly.
        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_output_from_subject_analysis_with_http_info(self, subject_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Download analysis outputs with filter.

        If \"ticket\" query param is included and not empty, download outputs. If \"ticket\" query param is included and empty, create a ticket for matching outputs in the analysis. If no \"ticket\" query param is included, outputs will be downloaded directly.
        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_subject_analysis_output_zip_info(self, subject_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.
        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_subject_analysis_output_zip_info_with_http_info(self, subject_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.
        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_subject_analysis_output_download_ticket(self, subject_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a signed URL to download a named child file.

        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_subject_analysis_output_download_ticket_with_http_info(self, subject_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a signed URL to download a named child file.

        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_all_subjects(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a list of subjects

        Get a list of subjects
        This method makes a synchronous HTTP request by default.

        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param JoinType join: join file origins
        :param bool join_avatars: add name and avatar to notes
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[SubjectOutputForList]]
        """
        ...
    
    def get_all_subjects_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a list of subjects

        Get a list of subjects
        This method makes a synchronous HTTP request by default.

        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param JoinType join: join file origins
        :param bool join_avatars: add name and avatar to notes
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[SubjectOutputForList]]
        """
        ...
    
    def get_subject(self, subject_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a single subject

        Get an subject by its id  Args:     subject_id: The id of the subject     join: Attribute to join on     join_avatars: Join the user avatars for permissions     auth_session: The auth session  Returns:     SubjectOutput
        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-char hex subject id (required)
        :param JoinType join: join file origins
        :param bool join_avatars: add name and avatar to notes
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: SubjectOutput
        """
        ...
    
    def get_subject_with_http_info(self, subject_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a single subject

        Get an subject by its id  Args:     subject_id: The id of the subject     join: Attribute to join on     join_avatars: Join the user avatars for permissions     auth_session: The auth session  Returns:     SubjectOutput
        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-char hex subject id (required)
        :param JoinType join: join file origins
        :param bool join_avatars: add name and avatar to notes
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: SubjectOutput
        """
        ...
    
    def get_subject_analyses(self, cid, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get analyses for a(n) subject.

        Returns analyses that directly belong to this resource.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param bool inflate_job:
        :param bool join_avatars:
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]]
        """
        ...
    
    def get_subject_analyses_with_http_info(self, cid, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get analyses for a(n) subject.

        Returns analyses that directly belong to this resource.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param bool inflate_job:
        :param bool join_avatars:
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]]
        """
        ...
    
    def get_subject_analysis(self, cid, analysis_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get an analysis.

        Get an analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param bool inflate_job: Return job as an object instead of an id
        :param bool join_avatars:
        :param JoinType join:
        :param bool async_: Perform the request asynchronously
        :return: union[AnalysisOutputInflatedJob,AnalysisOutput]
        """
        ...
    
    def get_subject_analysis_with_http_info(self, cid, analysis_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get an analysis.

        Get an analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param bool inflate_job: Return job as an object instead of an id
        :param bool join_avatars:
        :param JoinType join:
        :param bool async_: Perform the request asynchronously
        :return: union[AnalysisOutputInflatedJob,AnalysisOutput]
        """
        ...
    
    def get_subject_file_info(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get info for a particular file.

        Get info for a particular file.
        This method makes a synchronous HTTP request by default.

        :param str cid: Container Id (required)
        :param str filename: (required)
        :param bool async_: Perform the request asynchronously
        :return: FileOutput
        """
        ...
    
    def get_subject_file_info_with_http_info(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get info for a particular file.

        Get info for a particular file.
        This method makes a synchronous HTTP request by default.

        :param str cid: Container Id (required)
        :param str filename: (required)
        :param bool async_: Perform the request asynchronously
        :return: FileOutput
        """
        ...
    
    def get_subject_note(self, cid, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a note of a(n) subject.

        Get a note of a(n) subject
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def get_subject_note_with_http_info(self, cid, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a note of a(n) subject.

        Get a note of a(n) subject
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def get_subject_sessions(self, subject_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List sessions of a subject

        List sessions of a subject
        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-char hex subject id (required)
        :param JoinType join: join file origins
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[SessionListOutput]]
        """
        ...
    
    def get_subject_sessions_with_http_info(self, subject_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List sessions of a subject

        List sessions of a subject
        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-char hex subject id (required)
        :param JoinType join: join file origins
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[SessionListOutput]]
        """
        ...
    
    def get_subject_tag(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the value of a tag, by name.

        Get the value of a tag, by name
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def get_subject_tag_with_http_info(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the value of a tag, by name.

        Get the value of a tag, by name
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def modify_subject(self, subject_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a subject

        Update a subject
        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-char hex subject id (required)
        :param SubjectModify body: subject object to modify (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_subject_with_http_info(self, subject_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a subject

        Update a subject
        This method makes a synchronous HTTP request by default.

        :param str subject_id: 24-char hex subject id (required)
        :param SubjectModify body: subject object to modify (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_subject_analysis(self, cid, analysis_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify an analysis.

        Modify an analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param AnalysisModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_subject_analysis_with_http_info(self, cid, analysis_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify an analysis.

        Modify an analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param AnalysisModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_subject_file(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify a file&#x27;s attributes

        Note: If modifying a file's modality, the current classification will be cleared (except for items in the \"Custom\" list)
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param FileModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_subject_file_with_http_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify a file&#x27;s attributes

        Note: If modifying a file's modality, the current classification will be cleared (except for items in the \"Custom\" list)
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param FileModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_subject_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update classification for a particular file.

        If replacing a file's classification, the modality can optionally be modified as well.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_subject_file_classification_with_http_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update classification for a particular file.

        If replacing a file's classification, the modality can optionally be modified as well.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_subject_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info for a particular file.

        Modify and return the file 'info' field
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_subject_file_info_with_http_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info for a particular file.

        Modify and return the file 'info' field
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_subject_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update or replace info for a(n) subject.

        Update or replace info for a(n) subject. Keys that contain '$' or '.' will be sanitized in the process of being updated on the container.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_subject_info_with_http_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update or replace info for a(n) subject.

        Update or replace info for a(n) subject. Keys that contain '$' or '.' will be sanitized in the process of being updated on the container.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_subject_note(self, cid, note_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a note of a(n) subject.

        Update a note of a(n) subject
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str note_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: int
        """
        ...
    
    def modify_subject_note_with_http_info(self, cid, note_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a note of a(n) subject.

        Update a note of a(n) subject
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str note_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: int
        """
        ...
    
    def rename_subject_tag(self, cid, value, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Rename a tag.

        Rename a tag
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def rename_subject_tag_with_http_info(self, cid, value, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Rename a tag.

        Rename a tag
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def upload_file_to_subject(self, container_id, file, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upload a file to a(n) subject.

        Upload a file to a(n) subject.
        This method makes a synchronous HTTP request by default.

        :param str container_id: (required)
        :param str file: The file to upload (required)
        :param bool preserve_metadata:
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str metadata: Metadata object as a JSON-encoded string
        :param list[str] x_accept_feature: redirect header
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: union[list[FileOutput],UploadTicketOutput]
        """
        ...
    
    def upload_file_to_subject_with_http_info(self, container_id, file, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upload a file to a(n) subject.

        Upload a file to a(n) subject.
        This method makes a synchronous HTTP request by default.

        :param str container_id: (required)
        :param str file: The file to upload (required)
        :param bool preserve_metadata:
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str metadata: Metadata object as a JSON-encoded string
        :param list[str] x_accept_feature: redirect header
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: union[list[FileOutput],UploadTicketOutput]
        """
        ...
    
    def upload_output_to_subject_analysis(self, cid, analysis_id, file, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upload an output file to an analysis.

        Upload an output file to an analysis
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param str file: The file to upload (required)
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: list[FileOutput]
        """
        ...
    
    def upload_output_to_subject_analysis_with_http_info(self, cid, analysis_id, file, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upload an output file to an analysis.

        Upload an output file to an analysis
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param str file: The file to upload (required)
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: list[FileOutput]
        """
        ...
    
    def verify_master_subject_code(self, code, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Verify that the given master subject code exists or not

        Verify that the given master subject code exists or not
        This method makes a synchronous HTTP request by default.

        :param str code: code id (required)
        :param bool async_: Perform the request asynchronously
        :return: MasterSubjectCodeOutput
        """
        ...
    
    def verify_master_subject_code_with_http_info(self, code, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Verify that the given master subject code exists or not

        Verify that the given master subject code exists or not
        This method makes a synchronous HTTP request by default.

        :param str code: code id (required)
        :param bool async_: Perform the request asynchronously
        :return: MasterSubjectCodeOutput
        """
        ...
    


