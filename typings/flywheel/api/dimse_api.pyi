"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class DimseApi:
    def __init__(self, api_client=...) -> None:
        ...
    
    def create_project_aet(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a new DIMSE project AET

        Will create a new DIMSE AET that refers to a Flywheel project. AETs can only be created by admins and use drone access via DIMSE.
        This method makes a synchronous HTTP request by default.

        :param ProjectAETInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: BaseAET
        """
        ...
    
    def create_project_aet_with_http_info(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a new DIMSE project AET

        Will create a new DIMSE AET that refers to a Flywheel project. AETs can only be created by admins and use drone access via DIMSE.
        This method makes a synchronous HTTP request by default.

        :param ProjectAETInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: BaseAET
        """
        ...
    
    def create_service_aet(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a new DIMSE service AET

        Will create a new DIMSE AET that refers to an external DICOM node. Service AETs can be used to issue C-MOVEs to from project AETs. Requires login. AETs can only be created by admins.
        This method makes a synchronous HTTP request by default.

        :param union[ProjectAETInput,ServiceAETInput] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ServiceAET
        """
        ...
    
    def create_service_aet_with_http_info(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a new DIMSE service AET

        Will create a new DIMSE AET that refers to an external DICOM node. Service AETs can be used to issue C-MOVEs to from project AETs. Requires login. AETs can only be created by admins.
        This method makes a synchronous HTTP request by default.

        :param union[ProjectAETInput,ServiceAETInput] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ServiceAET
        """
        ...
    
    def delete_project_aet(self, project_aet, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a DIMSE project AET

        Delete DIMSE project by AET. AETs can only be deleted by admins.
        This method makes a synchronous HTTP request by default.

        :param str project_aet: (required)
        :param bool async_: Perform the request asynchronously
        :return: dict(str, int)
        """
        ...
    
    def delete_project_aet_with_http_info(self, project_aet, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a DIMSE project AET

        Delete DIMSE project by AET. AETs can only be deleted by admins.
        This method makes a synchronous HTTP request by default.

        :param str project_aet: (required)
        :param bool async_: Perform the request asynchronously
        :return: dict(str, int)
        """
        ...
    
    def delete_service_aet(self, service_aet, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a DIMSE service AET

        Delete DIMSE service by AET. AETs can only be deleted by admins.
        This method makes a synchronous HTTP request by default.

        :param str service_aet: (required)
        :param bool async_: Perform the request asynchronously
        :return: dict(str, int)
        """
        ...
    
    def delete_service_aet_with_http_info(self, service_aet, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a DIMSE service AET

        Delete DIMSE service by AET. AETs can only be deleted by admins.
        This method makes a synchronous HTTP request by default.

        :param str service_aet: (required)
        :param bool async_: Perform the request asynchronously
        :return: dict(str, int)
        """
        ...
    
    def get_all_project_aets(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all DIMSE project AETs

        Will list all DIMSE AETs referring to a Flywheel project. Project AETs can be used to issue C-FIND and C-MOVE on Flywheel projects. Requires login and admin privilege.
        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: list[ProjectAET]
        """
        ...
    
    def get_all_project_aets_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all DIMSE project AETs

        Will list all DIMSE AETs referring to a Flywheel project. Project AETs can be used to issue C-FIND and C-MOVE on Flywheel projects. Requires login and admin privilege.
        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: list[ProjectAET]
        """
        ...
    
    def get_all_service_aets(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all DIMSE services AETs

        Will list all DIMSE AETs referring to external DICOM nodes. Requires login and admin privilege.
        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: list[ServiceAET]
        """
        ...
    
    def get_all_service_aets_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all DIMSE services AETs

        Will list all DIMSE AETs referring to external DICOM nodes. Requires login and admin privilege.
        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: list[ServiceAET]
        """
        ...
    
    def get_project_aet(self, project_aet, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get DIMSE project AET

        Get DIMSE project by AET, id or project id. Requires admin privilege.
        This method makes a synchronous HTTP request by default.

        :param str project_aet: (required)
        :param bool async_: Perform the request asynchronously
        :return: ProjectAET
        """
        ...
    
    def get_project_aet_with_http_info(self, project_aet, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get DIMSE project AET

        Get DIMSE project by AET, id or project id. Requires admin privilege.
        This method makes a synchronous HTTP request by default.

        :param str project_aet: (required)
        :param bool async_: Perform the request asynchronously
        :return: ProjectAET
        """
        ...
    
    def get_service_aet(self, service_aet, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get DIMSE service by AET or id

        Get a DIMSE service. Requires login and admin privilege.
        This method makes a synchronous HTTP request by default.

        :param str service_aet: (required)
        :param bool async_: Perform the request asynchronously
        :return: ServiceAET
        """
        ...
    
    def get_service_aet_with_http_info(self, service_aet, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get DIMSE service by AET or id

        Get a DIMSE service. Requires login and admin privilege.
        This method makes a synchronous HTTP request by default.

        :param str service_aet: (required)
        :param bool async_: Perform the request asynchronously
        :return: ServiceAET
        """
        ...
    


