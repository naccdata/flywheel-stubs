"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class BatchApi:
    def __init__(self, api_client=...) -> None:
        ...
    
    def cancel_batch(self, batch_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Cancel a Job

        Cancels jobs that are still pending, returns number of jobs cancelled. Moves a 'running' batch job to 'cancelled'.
        This method makes a synchronous HTTP request by default.

        :param str batch_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: CancelledBatchOutput
        """
        ...
    
    def cancel_batch_with_http_info(self, batch_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Cancel a Job

        Cancels jobs that are still pending, returns number of jobs cancelled. Moves a 'running' batch job to 'cancelled'.
        This method makes a synchronous HTTP request by default.

        :param str batch_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: CancelledBatchOutput
        """
        ...
    
    def create_batch_job_from_jobs(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a batch job proposal from preconstructed jobs and insert it as &#x27;pending&#x27;.

        Create a batch job proposal from preconstructed jobs and insert it as 'pending'.
        This method makes a synchronous HTTP request by default.

        :param PremadeJobsBatchProposalInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: PremadeJobsBatchProposal
        """
        ...
    
    def create_batch_job_from_jobs_with_http_info(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a batch job proposal from preconstructed jobs and insert it as &#x27;pending&#x27;.

        Create a batch job proposal from preconstructed jobs and insert it as 'pending'.
        This method makes a synchronous HTTP request by default.

        :param PremadeJobsBatchProposalInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: PremadeJobsBatchProposal
        """
        ...
    
    def get_all_batches(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a list of batch jobs the user has created.

        Requires login.
        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: list[Batch]
        """
        ...
    
    def get_all_batches_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a list of batch jobs the user has created.

        Requires login.
        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: list[Batch]
        """
        ...
    
    def get_batch(self, batch_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get batch job details.

        This method makes a synchronous HTTP request by default.

        :param str batch_id: (required)
        :param bool jobs: If true, return job objects instead of job ids
        :param bool async_: Perform the request asynchronously
        :return: union[ClassicBatchJobOutput,ClassicBatchJobOutputInflatedJobs,PremadeJobsBatchJobOutput,PremadeJobsBatchJobOutputInflatedJobs]
        """
        ...
    
    def get_batch_with_http_info(self, batch_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get batch job details.

        This method makes a synchronous HTTP request by default.

        :param str batch_id: (required)
        :param bool jobs: If true, return job objects instead of job ids
        :param bool async_: Perform the request asynchronously
        :return: union[ClassicBatchJobOutput,ClassicBatchJobOutputInflatedJobs,PremadeJobsBatchJobOutput,PremadeJobsBatchJobOutputInflatedJobs]
        """
        ...
    
    def propose_batch(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a batch job proposal and insert it as &#x27;pending&#x27;.

        Create a batch job proposal and insert it as 'pending'.
        This method makes a synchronous HTTP request by default.

        :param ClassicBatchProposalInput body: The batch proposal (required)
        :param bool async_: Perform the request asynchronously
        :return: ClassicBatchProposalOutput
        """
        ...
    
    def propose_batch_with_http_info(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a batch job proposal and insert it as &#x27;pending&#x27;.

        Create a batch job proposal and insert it as 'pending'.
        This method makes a synchronous HTTP request by default.

        :param ClassicBatchProposalInput body: The batch proposal (required)
        :param bool async_: Perform the request asynchronously
        :return: ClassicBatchProposalOutput
        """
        ...
    
    def start_batch(self, batch_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Launch a job.

        Creates jobs from proposed inputs, returns jobs enqueued. Moves 'pending' batch job to 'running'.
        This method makes a synchronous HTTP request by default.

        :param str batch_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[JobOutput]
        """
        ...
    
    def start_batch_with_http_info(self, batch_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Launch a job.

        Creates jobs from proposed inputs, returns jobs enqueued. Moves 'pending' batch job to 'running'.
        This method makes a synchronous HTTP request by default.

        :param str batch_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[JobOutput]
        """
        ...
    


