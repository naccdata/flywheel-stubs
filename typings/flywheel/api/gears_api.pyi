"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class GearsApi:
    def __init__(self, api_client=...) -> None:
        ...
    
    def add_gear(self, gear_name, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create or update a gear.

        If no existing gear is found, one will be created Otherwise, the specified gear will be updated
        This method makes a synchronous HTTP request by default.

        :param str gear_name: Name of the gear to interact with (required)
        :param GearDocumentLegacyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearIdOutput
        """
        ...
    
    def add_gear_with_http_info(self, gear_name, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create or update a gear.

        If no existing gear is found, one will be created Otherwise, the specified gear will be updated
        This method makes a synchronous HTTP request by default.

        :param str gear_name: Name of the gear to interact with (required)
        :param GearDocumentLegacyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearIdOutput
        """
        ...
    
    def add_gear_permission(self, gear_name, permission_type, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add an individual permission to the given gear

        This method makes a synchronous HTTP request by default.

        :param str gear_name: Name of the gear to interact with (required)
        :param GearPermissionsType permission_type: (required)
        :param GearPermissionsInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearSeries
        """
        ...
    
    def add_gear_permission_with_http_info(self, gear_name, permission_type, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add an individual permission to the given gear

        This method makes a synchronous HTTP request by default.

        :param str gear_name: Name of the gear to interact with (required)
        :param GearPermissionsType permission_type: (required)
        :param GearPermissionsInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearSeries
        """
        ...
    
    def delete_gear(self, gear_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a gear (not recommended)

        This method makes a synchronous HTTP request by default.

        :param str gear_id: Id of the gear to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_gear_with_http_info(self, gear_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a gear (not recommended)

        This method makes a synchronous HTTP request by default.

        :param str gear_id: Id of the gear to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_gear_permission(self, gear_name, permission_type, permission_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete an individual permission of the given gear

        This method makes a synchronous HTTP request by default.

        :param str gear_name: (required)
        :param GearPermissionsType permission_type: (required)
        :param str permission_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_gear_permission_with_http_info(self, gear_name, permission_type, permission_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete an individual permission of the given gear

        This method makes a synchronous HTTP request by default.

        :param str gear_name: (required)
        :param GearPermissionsType permission_type: (required)
        :param str permission_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_gear_permissions(self, gear_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete permissions of the given gear

        This method makes a synchronous HTTP request by default.

        :param str gear_name: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_gear_permissions_with_http_info(self, gear_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete permissions of the given gear

        This method makes a synchronous HTTP request by default.

        :param str gear_name: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def get_all_gears(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all gears

        List all gears
        This method makes a synchronous HTTP request by default.

        :param str project_id:
        :param bool all_versions: return all versions of each gear
        :param bool include_invalid: return gears with the 'invalid' flag set
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[GearDocument],Page]
        """
        ...
    
    def get_all_gears_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all gears

        List all gears
        This method makes a synchronous HTTP request by default.

        :param str project_id:
        :param bool all_versions: return all versions of each gear
        :param bool include_invalid: return gears with the 'invalid' flag set
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[GearDocument],Page]
        """
        ...
    
    def get_gear(self, gear_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve details about a specific gear

        Retrieve details about a specific gear
        This method makes a synchronous HTTP request by default.

        :param str gear_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearDocument
        """
        ...
    
    def get_gear_with_http_info(self, gear_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve details about a specific gear

        Retrieve details about a specific gear
        This method makes a synchronous HTTP request by default.

        :param str gear_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearDocument
        """
        ...
    
    def get_gear_context(self, gear_id, container_name, container_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get context values for the given gear and container.

        Ref: https://github.com/flywheel-io/gears/tree/master/spec#contextual-values
        This method makes a synchronous HTTP request by default.

        :param str gear_id: (required)
        :param str container_name: (required)
        :param str container_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: dict(str, union[GearContextValueOutput,GearContextValueOutputUnfound])
        """
        ...
    
    def get_gear_context_with_http_info(self, gear_id, container_name, container_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get context values for the given gear and container.

        Ref: https://github.com/flywheel-io/gears/tree/master/spec#contextual-values
        This method makes a synchronous HTTP request by default.

        :param str gear_id: (required)
        :param str container_name: (required)
        :param str container_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: dict(str, union[GearContextValueOutput,GearContextValueOutputUnfound])
        """
        ...
    
    def get_gear_invocation(self, gear_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a schema for invoking a gear

        Get a schema for invoking a gear.
        This method makes a synchronous HTTP request by default.

        :param str gear_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: object
        """
        ...
    
    def get_gear_invocation_with_http_info(self, gear_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a schema for invoking a gear

        Get a schema for invoking a gear.
        This method makes a synchronous HTTP request by default.

        :param str gear_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: object
        """
        ...
    
    def get_gear_series(self, gear_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get gear series.

        Gets the series for the gear by its name
        This method makes a synchronous HTTP request by default.

        :param str gear_name: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearSeries
        """
        ...
    
    def get_gear_series_with_http_info(self, gear_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get gear series.

        Gets the series for the gear by its name
        This method makes a synchronous HTTP request by default.

        :param str gear_name: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearSeries
        """
        ...
    
    def get_gear_suggest(self, gear_id, container_name, container_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get files with input suggestions, parent containers, and child containers for the given container.

        This method makes a synchronous HTTP request by default.

        :param str gear_id: Id of the gear to interact with (required)
        :param str container_name: Type of the container to interact with (required)
        :param str container_id: Id of the container to interact with (required)
        :param str filter:
        :param str sort:
        :param int limit:
        :param int skip:
        :param int page:
        :param list[str] include: Include only \"children\" or \"files\"
        :param str collection: Get suggestions for a collection
        :param bool async_: Perform the request asynchronously
        :return: GearSuggestionOutput
        """
        ...
    
    def get_gear_suggest_with_http_info(self, gear_id, container_name, container_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get files with input suggestions, parent containers, and child containers for the given container.

        This method makes a synchronous HTTP request by default.

        :param str gear_id: Id of the gear to interact with (required)
        :param str container_name: Type of the container to interact with (required)
        :param str container_id: Id of the container to interact with (required)
        :param str filter:
        :param str sort:
        :param int limit:
        :param int skip:
        :param int page:
        :param list[str] include: Include only \"children\" or \"files\"
        :param str collection: Get suggestions for a collection
        :param bool async_: Perform the request asynchronously
        :return: GearSuggestionOutput
        """
        ...
    
    def get_gear_ticket(self, ticket_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve a specific gear ticket

        This method makes a synchronous HTTP request by default.

        :param str ticket_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearTicket
        """
        ...
    
    def get_gear_ticket_with_http_info(self, ticket_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve a specific gear ticket

        This method makes a synchronous HTTP request by default.

        :param str ticket_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearTicket
        """
        ...
    
    def get_my_gear_tickets(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve all gear tickets for the current user

        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: list[str]
        """
        ...
    
    def get_my_gear_tickets_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve all gear tickets for the current user

        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: list[str]
        """
        ...
    
    def modify_gear_series(self, gear_name, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a gear series

        This method makes a synchronous HTTP request by default.

        :param str gear_name: Name of the gear series to modify (required)
        :param GearSeriesUpdate body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearSeries
        """
        ...
    
    def modify_gear_series_with_http_info(self, gear_name, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a gear series

        This method makes a synchronous HTTP request by default.

        :param str gear_name: Name of the gear series to modify (required)
        :param GearSeriesUpdate body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearSeries
        """
        ...
    
    def prepare_add_gear(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Prepare a gear upload

        Prepare a gear upload
        This method makes a synchronous HTTP request by default.

        :param GearDocumentInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearTicketOutput
        """
        ...
    
    def prepare_add_gear_with_http_info(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Prepare a gear upload

        Prepare a gear upload
        This method makes a synchronous HTTP request by default.

        :param GearDocumentInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearTicketOutput
        """
        ...
    
    def replace_gear_permissions(self, gear_name, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Replace permissions for the given gear

        This method makes a synchronous HTTP request by default.

        :param str gear_name: Name of the gear to interact with (required)
        :param GearPermissions body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearSeries
        """
        ...
    
    def replace_gear_permissions_with_http_info(self, gear_name, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Replace permissions for the given gear

        This method makes a synchronous HTTP request by default.

        :param str gear_name: Name of the gear to interact with (required)
        :param GearPermissions body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearSeries
        """
        ...
    
    def save_gear(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Report the result of a gear upload and save the ticket

        Report the result of a gear upload and save the ticket
        This method makes a synchronous HTTP request by default.

        :param GearSaveSubmission body: The ticket, repo and pointer (required)
        :param bool async_: Perform the request asynchronously
        :return: GearDocument
        """
        ...
    
    def save_gear_with_http_info(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Report the result of a gear upload and save the ticket

        Report the result of a gear upload and save the ticket
        This method makes a synchronous HTTP request by default.

        :param GearSaveSubmission body: The ticket, repo and pointer (required)
        :param bool async_: Perform the request asynchronously
        :return: GearDocument
        """
        ...
    


