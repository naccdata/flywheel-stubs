"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class ProjectsApi:
    def __init__(self, api_client=...) -> None:
        ...
    
    def add_project(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a new project

        This method makes a synchronous HTTP request by default.

        :param ProjectInput body: (required)
        :param bool inherit: Inherit permissions from the group permission template
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def add_project_with_http_info(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a new project

        This method makes a synchronous HTTP request by default.

        :param ProjectInput body: (required)
        :param bool inherit: Inherit permissions from the group permission template
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def add_project_analysis(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create an analysis and upload files.

        When query param \"job\" is \"true\", send JSON to create an analysis and job.  Otherwise, multipart/form-data to upload files and create an analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param union[AdhocAnalysisInput,JobAnalysisInput] body: (required)
        :param bool job: returns job_id instead of analysis.id
        :param bool job: returns job_id instead of analysis.id
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def add_project_analysis_with_http_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create an analysis and upload files.

        When query param \"job\" is \"true\", send JSON to create an analysis and job.  Otherwise, multipart/form-data to upload files and create an analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param union[AdhocAnalysisInput,JobAnalysisInput] body: (required)
        :param bool job: returns job_id instead of analysis.id
        :param bool job: returns job_id instead of analysis.id
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ...
    
    def add_project_analysis_note(self, container_id, analysis_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a note to a(n) project analysis.

        Add a note to a(n) project analysis.
        This method makes a synchronous HTTP request by default.

        :param str container_id: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param NoteInput body: note content (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def add_project_analysis_note_with_http_info(self, container_id, analysis_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a note to a(n) project analysis.

        Add a note to a(n) project analysis.
        This method makes a synchronous HTTP request by default.

        :param str container_id: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param NoteInput body: note content (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def add_project_note(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a note to a(n) project.

        Add a note to a(n) project.
        This method makes a synchronous HTTP request by default.

        :param str container_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def add_project_note_with_http_info(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a note to a(n) project.

        Add a note to a(n) project.
        This method makes a synchronous HTTP request by default.

        :param str container_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def add_project_permission(self, project_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a permission

        Add user to a project  Args:     project_id: The id of the project     permission: The permission to add     auth_session: The auth session  Returns:     RolePermissionOutput: The added permission
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param RolePermission body: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: RolePermissionOutput
        """
        ...
    
    def add_project_permission_with_http_info(self, project_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a permission

        Add user to a project  Args:     project_id: The id of the project     permission: The permission to add     auth_session: The auth session  Returns:     RolePermissionOutput: The added permission
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param RolePermission body: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: RolePermissionOutput
        """
        ...
    
    def add_project_rule(self, project_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a new rule for a project.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param GearRuleInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearRuleOutput
        """
        ...
    
    def add_project_rule_with_http_info(self, project_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a new rule for a project.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param GearRuleInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearRuleOutput
        """
        ...
    
    def add_project_tag(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a tag to a(n) project.

        Propagates changes to projects, sessions and acquisitions
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def add_project_tag_with_http_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add a tag to a(n) project.

        Propagates changes to projects, sessions and acquisitions
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def add_project_tags(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add multiple tags to a(n) project

        Add multiple tags to a(n) project
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def add_project_tags_with_http_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add multiple tags to a(n) project

        Add multiple tags to a(n) project
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def catalog_list(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Catalog List

        This method makes a synchronous HTTP request by default.

        :param str search_string: Include only results containing the search string
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[CatalogListOutput],Page]
        """
        ...
    
    def catalog_list_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Catalog List

        This method makes a synchronous HTTP request by default.

        :param str search_string: Include only results containing the search string
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[CatalogListOutput],Page]
        """
        ...
    
    def delete_project(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a project

        Only site admins and users with \"admin\" project permissions may delete a project
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ContainerDeleteReason delete_reason: A reason for deletion when audit-trail is enabled
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_project_with_http_info(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a project

        Only site admins and users with \"admin\" project permissions may delete a project
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ContainerDeleteReason delete_reason: A reason for deletion when audit-trail is enabled
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_project_analysis(self, cid, analysis_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete an analysis

        Delete an analysis for a container.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param ContainerDeleteReason delete_reason: Provide a reason for the deletion
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_project_analysis_with_http_info(self, cid, analysis_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete an analysis

        Delete an analysis for a container.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param ContainerDeleteReason delete_reason: Provide a reason for the deletion
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_project_analysis_note(self, cid, analysis_id, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a note from a(n) project analysis.

        Remove a note from a(n) project analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str note_id: 24-char hex note id (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_project_analysis_note_with_http_info(self, cid, analysis_id, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a note from a(n) project analysis.

        Remove a note from a(n) project analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str note_id: 24-char hex note id (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_project_file(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a file

        A user with read-write or higher permissions on the container may delete files that were uploaded by users or were the output of jobs. (Specifically, files whose `origin.type` is either `job` or `user`.) <br/> A user with admin permissions on the container may delete any file.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param ContainerDeleteReason delete_reason: A reason for deletion when audit-trail is enabled
        :param bool force: Force deletion of the file even if some checks fail. Deprecated, will be removed in a future release.
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_project_file_with_http_info(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a file

        A user with read-write or higher permissions on the container may delete files that were uploaded by users or were the output of jobs. (Specifically, files whose `origin.type` is either `job` or `user`.) <br/> A user with admin permissions on the container may delete any file.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param ContainerDeleteReason delete_reason: A reason for deletion when audit-trail is enabled
        :param bool force: Force deletion of the file even if some checks fail. Deprecated, will be removed in a future release.
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_project_note(self, cid, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a note from a(n) project

        Remove a note from a(n) project
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_project_note_with_http_info(self, cid, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a note from a(n) project

        Remove a note from a(n) project
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_project_tag(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a tag

        Delete a tag
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_project_tag_with_http_info(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a tag

        Delete a tag
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_project_tags(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple tags from a(n) project

        Delete multiple tags from a(n) project
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_project_tags_with_http_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple tags from a(n) project

        Delete multiple tags from a(n) project
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_project_user_permission(self, project_id, uid, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a permission

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str uid: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def delete_project_user_permission_with_http_info(self, project_id, uid, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a permission

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str uid: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def delete_projects_by_ids(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple projects by ID list

        Delete multiple projects by ID list
        This method makes a synchronous HTTP request by default.

        :param list[str] body: List of IDs to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_projects_by_ids_with_http_info(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple projects by ID list

        Delete multiple projects by ID list
        This method makes a synchronous HTTP request by default.

        :param list[str] body: List of IDs to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_projects_by_query(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """*DEPRECATED* Delete multiple projects by query

        Delete multiple projects by query
        This method makes a synchronous HTTP request by default.

        :param list[Filter] body: Query for containers to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_projects_by_query_with_http_info(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """*DEPRECATED* Delete multiple projects by query

        Delete multiple projects by query
        This method makes a synchronous HTTP request by default.

        :param list[Filter] body: Query for containers to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def download_file_from_project(self, project_id, file_name, dest_file, **kwargs): # -> None:
        """Download a file.

        Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.  To generate a ticket:   - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.   - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.  When \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.  When virus_scan feature is enabled the quarantined files only can be downloaded using signed urls otherwise it will return with a HTTP 400 response.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_file_from_project_with_http_info(self, project_id, file_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Download a file.

        Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.  To generate a ticket:   - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.   - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.  When \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.  When virus_scan feature is enabled the quarantined files only can be downloaded using signed urls otherwise it will return with a HTTP 400 response.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_project_file_zip_info(self, project_id, file_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_project_file_zip_info_with_http_info(self, project_id, file_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_project_download_ticket(self, project_id, file_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a signed URL to download a named child file.

        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_project_download_ticket_with_http_info(self, project_id, file_name, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a signed URL to download a named child file.

        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_input_from_project_analysis(self, project_id, analysis_id, filename, dest_file, **kwargs): # -> None:
        """Download analysis inputs with filter.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for matching inputs in the analysis. If no \"ticket\" query param is included, inputs will be downloaded directly.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_input_from_project_analysis_with_http_info(self, project_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Download analysis inputs with filter.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for matching inputs in the analysis. If no \"ticket\" query param is included, inputs will be downloaded directly.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_project_analysis_input_zip_info(self, project_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_project_analysis_input_zip_info_with_http_info(self, project_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_project_analysis_input_download_ticket(self, project_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a signed URL to download a named child file.

        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_project_analysis_input_download_ticket_with_http_info(self, project_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a signed URL to download a named child file.

        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_output_from_project_analysis(self, project_id, analysis_id, filename, dest_file, **kwargs): # -> None:
        """Download analysis outputs with filter.

        If \"ticket\" query param is included and not empty, download outputs. If \"ticket\" query param is included and empty, create a ticket for matching outputs in the analysis. If no \"ticket\" query param is included, outputs will be downloaded directly.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def download_output_from_project_analysis_with_http_info(self, project_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Download analysis outputs with filter.

        If \"ticket\" query param is included and not empty, download outputs. If \"ticket\" query param is included and empty, create a ticket for matching outputs in the analysis. If no \"ticket\" query param is included, outputs will be downloaded directly.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_project_analysis_output_zip_info(self, project_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_project_analysis_output_zip_info_with_http_info(self, project_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ...
    
    def get_project_analysis_output_download_ticket(self, project_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a signed URL to download a named child file.

        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def get_project_analysis_output_download_ticket_with_http_info(self, project_id, analysis_id, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a signed URL to download a named child file.

        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ...
    
    def end_project_packfile_upload(self, token, metadata, file_count, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """End a packfile upload

        This method makes a synchronous HTTP request by default.

        :param str token: (required)
        :param str metadata: Metadata object as a JSON-encoded string (required)
        :param int file_count: Number of files uploaded into this packfile. (required)
        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def end_project_packfile_upload_with_http_info(self, token, metadata, file_count, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """End a packfile upload

        This method makes a synchronous HTTP request by default.

        :param str token: (required)
        :param str metadata: Metadata object as a JSON-encoded string (required)
        :param int file_count: Number of files uploaded into this packfile. (required)
        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def get_all_projects(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a list of projects

        This method makes a synchronous HTTP request by default.

        :param bool counts: Append the count of subjects in each project
        :param bool stats: Return the status of subjects and sessions in each project
        :param bool join_avatars: Return the joined avatars of the permissions
        :param JoinType join:
        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[ProjectListOutput],Page]
        """
        ...
    
    def get_all_projects_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a list of projects

        This method makes a synchronous HTTP request by default.

        :param bool counts: Append the count of subjects in each project
        :param bool stats: Return the status of subjects and sessions in each project
        :param bool join_avatars: Return the joined avatars of the permissions
        :param JoinType join:
        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[ProjectListOutput],Page]
        """
        ...
    
    def get_all_projects_groups(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all groups which have a project in them

        This method makes a synchronous HTTP request by default.

        :param bool exhaustive: returns exhaustive list if correct permissions
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: list[GroupOutput]
        """
        ...
    
    def get_all_projects_groups_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all groups which have a project in them

        This method makes a synchronous HTTP request by default.

        :param bool exhaustive: returns exhaustive list if correct permissions
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: list[GroupOutput]
        """
        ...
    
    def get_catalog_list_filter_options(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get all filter options for sharing a project

        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: SharingFilterOptions
        """
        ...
    
    def get_catalog_list_filter_options_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get all filter options for sharing a project

        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: SharingFilterOptions
        """
        ...
    
    def get_project(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a single project

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param JoinType join:
        :param bool join_avatars: add name and avatar to notes
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: ProjectOutput
        """
        ...
    
    def get_project_with_http_info(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a single project

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param JoinType join:
        :param bool join_avatars: add name and avatar to notes
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: ProjectOutput
        """
        ...
    
    def get_project_acquisitions(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all acquisitions for the given project.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str collection_id:
        :param bool exhaustive:
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[AcquisitionListOutput],Page]
        """
        ...
    
    def get_project_acquisitions_with_http_info(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all acquisitions for the given project.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str collection_id:
        :param bool exhaustive:
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[AcquisitionListOutput],Page]
        """
        ...
    
    def get_project_analyses(self, cid, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get analyses for a(n) project.

        Returns analyses that directly belong to this resource.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param bool inflate_job:
        :param bool join_avatars:
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]]
        """
        ...
    
    def get_project_analyses_with_http_info(self, cid, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get analyses for a(n) project.

        Returns analyses that directly belong to this resource.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param bool inflate_job:
        :param bool join_avatars:
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]]
        """
        ...
    
    def get_project_analysis(self, cid, analysis_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get an analysis.

        Get an analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param bool inflate_job: Return job as an object instead of an id
        :param bool join_avatars:
        :param JoinType join:
        :param bool async_: Perform the request asynchronously
        :return: union[AnalysisOutputInflatedJob,AnalysisOutput]
        """
        ...
    
    def get_project_analysis_with_http_info(self, cid, analysis_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get an analysis.

        Get an analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param bool inflate_job: Return job as an object instead of an id
        :param bool join_avatars:
        :param JoinType join:
        :param bool async_: Perform the request asynchronously
        :return: union[AnalysisOutputInflatedJob,AnalysisOutput]
        """
        ...
    
    def get_project_file_info(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get info for a particular file.

        Get info for a particular file.
        This method makes a synchronous HTTP request by default.

        :param str cid: Container Id (required)
        :param str filename: (required)
        :param bool async_: Perform the request asynchronously
        :return: FileOutput
        """
        ...
    
    def get_project_file_info_with_http_info(self, cid, filename, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get info for a particular file.

        Get info for a particular file.
        This method makes a synchronous HTTP request by default.

        :param str cid: Container Id (required)
        :param str filename: (required)
        :param bool async_: Perform the request asynchronously
        :return: FileOutput
        """
        ...
    
    def get_project_note(self, cid, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a note of a(n) project.

        Get a note of a(n) project
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def get_project_note_with_http_info(self, cid, note_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a note of a(n) project.

        Get a note of a(n) project
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ...
    
    def get_project_rule(self, project_id, rule_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a project rule.

        Get a project rule.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str rule_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearRuleOutput
        """
        ...
    
    def get_project_rule_with_http_info(self, project_id, rule_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a project rule.

        Get a project rule.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str rule_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearRuleOutput
        """
        ...
    
    def get_project_rules(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all rules for a project.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[GearRuleOutput]
        """
        ...
    
    def get_project_rules_with_http_info(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all rules for a project.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[GearRuleOutput]
        """
        ...
    
    def get_project_sessions(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all sessions for the given project.

        Returns a page of sessions by their parent
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-char hex subject id (required)
        :param JoinType join: join file origins
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[SessionListOutput]]
        """
        ...
    
    def get_project_sessions_with_http_info(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all sessions for the given project.

        Returns a page of sessions by their parent
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-char hex subject id (required)
        :param JoinType join: join file origins
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[SessionListOutput]]
        """
        ...
    
    def get_project_settings(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a(n) project settings

        Route for getting settings from a a(n) project
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: ProjectSettingsOutput
        """
        ...
    
    def get_project_settings_with_http_info(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a(n) project settings

        Route for getting settings from a a(n) project
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: ProjectSettingsOutput
        """
        ...
    
    def get_project_subjects(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all subjects for the given project.

        List all subjects for the given project.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[SubjectOutputForList]]
        """
        ...
    
    def get_project_subjects_with_http_info(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List all subjects for the given project.

        List all subjects for the given project.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[SubjectOutputForList]]
        """
        ...
    
    def get_project_tag(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the value of a tag, by name.

        Get the value of a tag, by name
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def get_project_tag_with_http_info(self, cid, value, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the value of a tag, by name.

        Get the value of a tag, by name
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def get_project_user_permission(self, project_id, uid, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List a user&#x27;s permissions for this project.

        Get a user's permission from a project  Args:     project_id: The id of the project     uid: The id of the user     auth_session: The auth session  Returns:     RolePermissionOutput: The permission
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str uid: (required)
        :param bool async_: Perform the request asynchronously
        :return: RolePermissionOutput
        """
        ...
    
    def get_project_user_permission_with_http_info(self, project_id, uid, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """List a user&#x27;s permissions for this project.

        Get a user's permission from a project  Args:     project_id: The id of the project     uid: The id of the user     auth_session: The auth session  Returns:     RolePermissionOutput: The permission
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str uid: (required)
        :param bool async_: Perform the request asynchronously
        :return: RolePermissionOutput
        """
        ...
    
    def modify_project(self, project_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a project

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ProjectModify body: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_project_with_http_info(self, project_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a project

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ProjectModify body: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_project_analysis(self, cid, analysis_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify an analysis.

        Modify an analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param AnalysisModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_project_analysis_with_http_info(self, cid, analysis_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify an analysis.

        Modify an analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param AnalysisModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_project_file(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify a file&#x27;s attributes

        Note: If modifying a file's modality, the current classification will be cleared (except for items in the \"Custom\" list)
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param FileModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_project_file_with_http_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify a file&#x27;s attributes

        Note: If modifying a file's modality, the current classification will be cleared (except for items in the \"Custom\" list)
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param FileModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_project_file_classification(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update classification for a particular file.

        If replacing a file's classification, the modality can optionally be modified as well.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_project_file_classification_with_http_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update classification for a particular file.

        If replacing a file's classification, the modality can optionally be modified as well.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_project_file_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info for a particular file.

        Modify and return the file 'info' field
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_project_file_info_with_http_info(self, cid, filename, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update info for a particular file.

        Modify and return the file 'info' field
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_project_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update or replace info for a(n) project.

        Update or replace info for a(n) project. Keys that contain '$' or '.' will be sanitized in the process of being updated on the container.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_project_info_with_http_info(self, cid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update or replace info for a(n) project.

        Update or replace info for a(n) project. Keys that contain '$' or '.' will be sanitized in the process of being updated on the container.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_project_note(self, cid, note_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a note of a(n) project.

        Update a note of a(n) project
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str note_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: int
        """
        ...
    
    def modify_project_note_with_http_info(self, cid, note_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a note of a(n) project.

        Update a note of a(n) project
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str note_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: int
        """
        ...
    
    def modify_project_rule(self, project_id, rule_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a rule on a project.

        Update a rule on a project.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str rule_id: (required)
        :param GearRuleModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearRuleOutput
        """
        ...
    
    def modify_project_rule_with_http_info(self, project_id, rule_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a rule on a project.

        Update a rule on a project.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str rule_id: (required)
        :param GearRuleModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearRuleOutput
        """
        ...
    
    def modify_project_settings(self, project_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify a(n) project settings

        Route for modifying settings for a a(n) project
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ProjectSettingsInput body: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: ProjectSettingsOutput
        """
        ...
    
    def modify_project_settings_with_http_info(self, project_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify a(n) project settings

        Route for modifying settings for a a(n) project
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ProjectSettingsInput body: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: ProjectSettingsOutput
        """
        ...
    
    def modify_project_user_permission(self, project_id, uid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a user&#x27;s permission for this project.

        Update a user's permission for this project.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str uid: (required)
        :param RolePermissionUpdate body: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: RolePermissionOutput
        """
        ...
    
    def modify_project_user_permission_with_http_info(self, project_id, uid, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update a user&#x27;s permission for this project.

        Update a user's permission for this project.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str uid: (required)
        :param RolePermissionUpdate body: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: RolePermissionOutput
        """
        ...
    
    def project_copy(self, project_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Copy By Reference

        Copy a project and its descendants to a new project tree
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ProjectCopyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ProjectCopyOutput
        """
        ...
    
    def project_copy_with_http_info(self, project_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Copy By Reference

        Copy a project and its descendants to a new project tree
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ProjectCopyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ProjectCopyOutput
        """
        ...
    
    def project_packfile_upload(self, project_id, token, file, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add files to an in-progress packfile

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str token: (required)
        :param str file: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[FileOutput]
        """
        ...
    
    def project_packfile_upload_with_http_info(self, project_id, token, file, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add files to an in-progress packfile

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str token: (required)
        :param str file: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[FileOutput]
        """
        ...
    
    def recalc_all_projects(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Recalculate all sessions against their project templates.

        Iterates all projects that have a session template. Recalculate if projects' sessions satisfy the template. Returns list of modified session ids.
        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: SessionTemplateRecalcOutput
        """
        ...
    
    def recalc_all_projects_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Recalculate all sessions against their project templates.

        Iterates all projects that have a session template. Recalculate if projects' sessions satisfy the template. Returns list of modified session ids.
        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: SessionTemplateRecalcOutput
        """
        ...
    
    def recalc_project(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Currently does nothing--will eventually calculate if sessions in the project satisfy the template.

        Currently does nothing--will eventually calculate if sessions in the project satisfy the template.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: SessionTemplateRecalcOutput
        """
        ...
    
    def recalc_project_with_http_info(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Currently does nothing--will eventually calculate if sessions in the project satisfy the template.

        Currently does nothing--will eventually calculate if sessions in the project satisfy the template.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: SessionTemplateRecalcOutput
        """
        ...
    
    def remove_project_rule(self, project_id, rule_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a project rule.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str rule_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def remove_project_rule_with_http_info(self, project_id, rule_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove a project rule.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str rule_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def remove_project_template(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove the session template for a project.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def remove_project_template_with_http_info(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove the session template for a project.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def rename_project_tag(self, cid, value, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Rename a tag.

        Rename a tag
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def rename_project_tag_with_http_info(self, cid, value, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Rename a tag.

        Rename a tag
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ...
    
    def set_project_template(self, project_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Set the session template for a project.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ProjectTemplateListInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def set_project_template_with_http_info(self, project_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Set the session template for a project.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ProjectTemplateListInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def start_project_packfile_upload(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Start a packfile upload to project

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: UploadTokenOutput
        """
        ...
    
    def start_project_packfile_upload_with_http_info(self, project_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Start a packfile upload to project

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: UploadTokenOutput
        """
        ...
    
    def upload_file_to_project(self, container_id, file, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upload a file to a(n) project.

        Upload a file to a(n) project.
        This method makes a synchronous HTTP request by default.

        :param str container_id: (required)
        :param str file: The file to upload (required)
        :param bool preserve_metadata:
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str metadata: Metadata object as a JSON-encoded string
        :param list[str] x_accept_feature: redirect header
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: union[list[FileOutput],UploadTicketOutput]
        """
        ...
    
    def upload_file_to_project_with_http_info(self, container_id, file, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upload a file to a(n) project.

        Upload a file to a(n) project.
        This method makes a synchronous HTTP request by default.

        :param str container_id: (required)
        :param str file: The file to upload (required)
        :param bool preserve_metadata:
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str metadata: Metadata object as a JSON-encoded string
        :param list[str] x_accept_feature: redirect header
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: union[list[FileOutput],UploadTicketOutput]
        """
        ...
    
    def upload_output_to_project_analysis(self, cid, analysis_id, file, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upload an output file to an analysis.

        Upload an output file to an analysis
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param str file: The file to upload (required)
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: list[FileOutput]
        """
        ...
    
    def upload_output_to_project_analysis_with_http_info(self, cid, analysis_id, file, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upload an output file to an analysis.

        Upload an output file to an analysis
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param str file: The file to upload (required)
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: list[FileOutput]
        """
        ...
    
    def upsert_project_hierarchy(self, project_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create or update subject, session and acquisition containers in the project.

        Create, update or just return an existing container sub-hierarchy as-is for the given project. Useful for efficient and highly parallel automated imports using device authN, based on common routing fields such as id, uid and label.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ProjectHierarchyInput body: (required)
        :param str uid_scope:
        :param bool async_: Perform the request asynchronously
        :return: ProjectHierarchyOutput
        """
        ...
    
    def upsert_project_hierarchy_with_http_info(self, project_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create or update subject, session and acquisition containers in the project.

        Create, update or just return an existing container sub-hierarchy as-is for the given project. Useful for efficient and highly parallel automated imports using device authN, based on common routing fields such as id, uid and label.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ProjectHierarchyInput body: (required)
        :param str uid_scope:
        :param bool async_: Perform the request asynchronously
        :return: ProjectHierarchyOutput
        """
        ...
    


