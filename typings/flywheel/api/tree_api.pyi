"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class TreeApi:
    def __init__(self, api_client=...) -> None:
        ...
    
    def fetch_tree(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Query a portion of the flywheel hierarchy, returning only the requested fields.

        This is a build-your-own request endpoint that can fetch from anywhere in the hierarchy, returning just the fields that you care about.  # Fields Each fetch-level described must include a list of fields to return. These fields can be anything on the container (except info), and will be included in the response if they are present in the container.  # Joins Children or parents can be joined as part of this request, by specifying an additional subdocument of the given name. Check /tree/graph for a list of containers and their connections.  # Filter Joined documents can be further filtered (with the exception of inputs & files) by passing a filter in the subdocument. Filtering follows the same convention as top-level pagination.  # Sort Joined documents can be sorted as well, following the convention as top-level pagination.  # Limit Joins can be limited to a the first N documents by specifying a limit in the subdocument.  # Join-origin Passing `true` for the `join-origin` flag in the files subdocument will populates the `join-origin` map for each container with files.
        This method makes a synchronous HTTP request by default.

        :param GraphFilter body: (required)
        :param bool exhaustive:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[object]]
        """
        ...
    
    def fetch_tree_with_http_info(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Query a portion of the flywheel hierarchy, returning only the requested fields.

        This is a build-your-own request endpoint that can fetch from anywhere in the hierarchy, returning just the fields that you care about.  # Fields Each fetch-level described must include a list of fields to return. These fields can be anything on the container (except info), and will be included in the response if they are present in the container.  # Joins Children or parents can be joined as part of this request, by specifying an additional subdocument of the given name. Check /tree/graph for a list of containers and their connections.  # Filter Joined documents can be further filtered (with the exception of inputs & files) by passing a filter in the subdocument. Filtering follows the same convention as top-level pagination.  # Sort Joined documents can be sorted as well, following the convention as top-level pagination.  # Limit Joins can be limited to a the first N documents by specifying a limit in the subdocument.  # Join-origin Passing `true` for the `join-origin` flag in the files subdocument will populates the `join-origin` map for each container with files.
        This method makes a synchronous HTTP request by default.

        :param GraphFilter body: (required)
        :param bool exhaustive:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[object]]
        """
        ...
    
    def get_tree_graph(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a description of the flywheel hiearchy

        Get a description of the flywheel hiearchy
        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: dict(str, TreeGraphNode)
        """
        ...
    
    def get_tree_graph_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a description of the flywheel hiearchy

        Get a description of the flywheel hiearchy
        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: dict(str, TreeGraphNode)
        """
        ...
    


