"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class ViewsApi:
    def __init__(self, api_client=...) -> None:
        ...
    
    def data_view_columns(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return a list of all known column aliases for use in data views

        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: list[DataViewColumnAlias]
        """
        ...
    
    def data_view_columns_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return a list of all known column aliases for use in data views

        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: list[DataViewColumnAlias]
        """
        ...
    
    def delete_view(self, view_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a data view

        Soft deletes data view in database
        This method makes a synchronous HTTP request by default.

        :param str view_id: The ID of the view (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_view_with_http_info(self, view_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a data view

        Soft deletes data view in database
        This method makes a synchronous HTTP request by default.

        :param str view_id: The ID of the view (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def evaluate_view(self, view_id, container_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Execute a view, returning data in the preferred format.

        This method makes a synchronous HTTP request by default.

        :param str view_id: The ID of the view (required)
        :param str container_id: The target container for view execution (required)
        :param str ticket: download ticket id
        :param str filename: download ticket filename
        :param FileFormat format: Available values : csv, tsv, json, ndjson, json_flat, json-row-column
        :param str sort: The sort fields and order.(e.g. label:asc,created:desc)
        :param str filter: An optional filter expression
        :param int skip: The optional number of rows to skip
        :param int limit: The optional max number of rows to return
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def evaluate_view_with_http_info(self, view_id, container_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Execute a view, returning data in the preferred format.

        This method makes a synchronous HTTP request by default.

        :param str view_id: The ID of the view (required)
        :param str container_id: The target container for view execution (required)
        :param str ticket: download ticket id
        :param str filename: download ticket filename
        :param FileFormat format: Available values : csv, tsv, json, ndjson, json_flat, json-row-column
        :param str sort: The sort fields and order.(e.g. label:asc,created:desc)
        :param str filter: An optional filter expression
        :param int skip: The optional number of rows to skip
        :param int limit: The optional max number of rows to return
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def evaluate_view_adhoc(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Execute an ad-hoc view, returning data in the preferred format.

        This method makes a synchronous HTTP request by default.

        :param str container_id: The target container for view execution (required)
        :param ContainerPipelineInput body: (required)
        :param str filename: download ticket filename
        :param FileFormat format: Available values : csv, tsv, json, ndjson, json_flat, json-row-column
        :param str ticket: download ticket id
        :param str sort: The sort fields and order.(e.g. label:asc,created:desc)
        :param str filter: An optional filter expression
        :param int skip: The optional number of rows to skip
        :param int limit: The optional max number of rows to return
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def evaluate_view_adhoc_with_http_info(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Execute an ad-hoc view, returning data in the preferred format.

        This method makes a synchronous HTTP request by default.

        :param str container_id: The target container for view execution (required)
        :param ContainerPipelineInput body: (required)
        :param str filename: download ticket filename
        :param FileFormat format: Available values : csv, tsv, json, ndjson, json_flat, json-row-column
        :param str ticket: download ticket id
        :param str sort: The sort fields and order.(e.g. label:asc,created:desc)
        :param str filter: An optional filter expression
        :param int skip: The optional number of rows to skip
        :param int limit: The optional max number of rows to return
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def get_view(self, view_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return the view identified by ViewId

        This method makes a synchronous HTTP request by default.

        :param str view_id: The ID of the view (required)
        :param bool async_: Perform the request asynchronously
        :return: ViewOutput
        """
        ...
    
    def get_view_with_http_info(self, view_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return the view identified by ViewId

        This method makes a synchronous HTTP request by default.

        :param str view_id: The ID of the view (required)
        :param bool async_: Perform the request asynchronously
        :return: ViewOutput
        """
        ...
    
    def modify_view(self, view_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update the view identified by ViewId

        This method makes a synchronous HTTP request by default.

        :param str view_id: The ID of the view (required)
        :param ContainerModify body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_view_with_http_info(self, view_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Update the view identified by ViewId

        This method makes a synchronous HTTP request by default.

        :param str view_id: The ID of the view (required)
        :param ContainerModify body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def queue_adhoc(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Execute an ad-hoc view, returning a reference to the created data view execution.

        This method makes a synchronous HTTP request by default.

        :param str container_id: The target container for view execution (required)
        :param ContainerPipelineInput body: (required)
        :param str sort: The sort fields and order.(e.g. label:asc,created:desc)
        :param str filter: An optional filter expression
        :param int skip: The optional number of rows to skip
        :param int limit: The optional max number of rows to return
        :param bool async_: Perform the request asynchronously
        :return: DataViewExecution
        """
        ...
    
    def queue_adhoc_with_http_info(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Execute an ad-hoc view, returning a reference to the created data view execution.

        This method makes a synchronous HTTP request by default.

        :param str container_id: The target container for view execution (required)
        :param ContainerPipelineInput body: (required)
        :param str sort: The sort fields and order.(e.g. label:asc,created:desc)
        :param str filter: An optional filter expression
        :param int skip: The optional number of rows to skip
        :param int limit: The optional max number of rows to return
        :param bool async_: Perform the request asynchronously
        :return: DataViewExecution
        """
        ...
    
    def queue_saved(self, view_id, container_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Execute a view, returning a reference to the created data view execution.

        Execute a view, returning a reference to the created data view execution.
        This method makes a synchronous HTTP request by default.

        :param str view_id: The ID of the view (required)
        :param str container_id: The target container for view execution (required)
        :param str sort: The sort fields and order.(e.g. label:asc,created:desc)
        :param str filter: An optional filter expression
        :param int skip: The optional number of rows to skip
        :param int limit: The optional max number of rows to return
        :param bool async_: Perform the request asynchronously
        :return: DataViewExecution
        """
        ...
    
    def queue_saved_with_http_info(self, view_id, container_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Execute a view, returning a reference to the created data view execution.

        Execute a view, returning a reference to the created data view execution.
        This method makes a synchronous HTTP request by default.

        :param str view_id: The ID of the view (required)
        :param str container_id: The target container for view execution (required)
        :param str sort: The sort fields and order.(e.g. label:asc,created:desc)
        :param str filter: An optional filter expression
        :param int skip: The optional number of rows to skip
        :param int limit: The optional max number of rows to return
        :param bool async_: Perform the request asynchronously
        :return: DataViewExecution
        """
        ...
    
    def save_view_data_to_container(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Execute a view, saving data to the target container / file

        Execute a view, saving data to the target container / file
        This method makes a synchronous HTTP request by default.

        :param str container_id: The target container for view execution (required)
        :param ContainerIdViewInputExecuteAndSave body: (required)
        :param FileFormat format: Available values : csv, tsv, json, ndjson, json_flat, json-row-column
        :param str ticket: download ticket id
        :param str filter: An optional filter expression
        :param str sort: The sort fields and order.(e.g. label:asc,created:desc)
        :param int skip: The optional number of rows to skip
        :param int limit: The optional max number of rows to return
        :param bool async_: Perform the request asynchronously
        :return: File
        """
        ...
    
    def save_view_data_to_container_with_http_info(self, container_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Execute a view, saving data to the target container / file

        Execute a view, saving data to the target container / file
        This method makes a synchronous HTTP request by default.

        :param str container_id: The target container for view execution (required)
        :param ContainerIdViewInputExecuteAndSave body: (required)
        :param FileFormat format: Available values : csv, tsv, json, ndjson, json_flat, json-row-column
        :param str ticket: download ticket id
        :param str filter: An optional filter expression
        :param str sort: The sort fields and order.(e.g. label:asc,created:desc)
        :param int skip: The optional number of rows to skip
        :param int limit: The optional max number of rows to return
        :param bool async_: Perform the request asynchronously
        :return: File
        """
        ...
    


