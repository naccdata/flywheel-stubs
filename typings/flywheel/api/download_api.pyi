"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class DownloadApi:
    def __init__(self, api_client=...) -> None:
        ...
    
    def create_download_ticket(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a download ticket

        Use filters in the payload to exclude/include files. To pass a single filter, each of its conditions should be satisfied. If a file pass at least one filter, it is included in the targets.
        This method makes a synchronous HTTP request by default.

        :param DownloadInput body: Specification for the download to be performed (required)
        :param DownloadStrategy type: The download type, one of: bulk, classic or full. Default is classic.
        :param bool bulk:
        :param bool metadata: For \"full\" download, whether or not to include metadata sidecars. Default is false.
        :param bool analyses: For \"full\" download, whether or not to include analyses. Default is false.
        :param str prefix: A string to customize the name of the download in the format <prefix>_<timestamp>.tar. Defaults to \"scitran\".
        :param bool async_: Perform the request asynchronously
        :return: DownloadTicketStub
        """
        ...
    
    def create_download_ticket_with_http_info(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Create a download ticket

        Use filters in the payload to exclude/include files. To pass a single filter, each of its conditions should be satisfied. If a file pass at least one filter, it is included in the targets.
        This method makes a synchronous HTTP request by default.

        :param DownloadInput body: Specification for the download to be performed (required)
        :param DownloadStrategy type: The download type, one of: bulk, classic or full. Default is classic.
        :param bool bulk:
        :param bool metadata: For \"full\" download, whether or not to include metadata sidecars. Default is false.
        :param bool analyses: For \"full\" download, whether or not to include analyses. Default is false.
        :param str prefix: A string to customize the name of the download in the format <prefix>_<timestamp>.tar. Defaults to \"scitran\".
        :param bool async_: Perform the request asynchronously
        :return: DownloadTicketStub
        """
        ...
    
    def download_ticket(self, ticket, dest_file, **kwargs): # -> None:
        """Download files listed in the given ticket.

        You can use POST to create a download ticket The files listed in the ticket are put into a tar archive
        This method makes a synchronous HTTP request by default.

        :param str ticket: ID of the download ticket (required)
        :param DownloadFormat format:
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def download_ticket_with_http_info(self, ticket, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Download files listed in the given ticket.

        You can use POST to create a download ticket The files listed in the ticket are put into a tar archive
        This method makes a synchronous HTTP request by default.

        :param str ticket: ID of the download ticket (required)
        :param DownloadFormat format:
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    


