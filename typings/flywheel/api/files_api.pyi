"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class FilesApi:
    def __init__(self, api_client=...) -> None:
        ...
    
    def add_file_tags(self, file_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add list of tags on a file.

        Add the tags on a file to the list of tags
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[str]
        """
        ...
    
    def add_file_tags_with_http_info(self, file_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Add list of tags on a file.

        Add the tags on a file to the list of tags
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[str]
        """
        ...
    
    def delete_file(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a File

        A user with read-write or higher permissions on the container may delete files that were uploaded by users or were the output of jobs. (Specifically, files whose `origin.type` is either `job` or `user`.) <br/> A user with admin permissions on the container may delete any file.
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param int version: Version of the file to delete (defaults to current version)
        :param ContainerDeleteReason delete_reason: A reason for deletion when audit-trail is enabled
        :param bool force: Force deletion of the file even if some checks fail. Deprecated, will be removed in a future release.
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_file_with_http_info(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete a File

        A user with read-write or higher permissions on the container may delete files that were uploaded by users or were the output of jobs. (Specifically, files whose `origin.type` is either `job` or `user`.) <br/> A user with admin permissions on the container may delete any file.
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param int version: Version of the file to delete (defaults to current version)
        :param ContainerDeleteReason delete_reason: A reason for deletion when audit-trail is enabled
        :param bool force: Force deletion of the file even if some checks fail. Deprecated, will be removed in a future release.
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_file_tags(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove the specified tags from most recent file version

        Remove the specified tags from most recent file version
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param list[str] body: List of application-specific tags
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_file_tags_with_http_info(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Remove the specified tags from most recent file version

        Remove the specified tags from most recent file version
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param list[str] body: List of application-specific tags
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def delete_files_by_ids(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple files by ID list

        Delete multiple files by ID list
        This method makes a synchronous HTTP request by default.

        :param list[str] body: List of IDs to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_files_by_ids_with_http_info(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Delete multiple files by ID list

        Delete multiple files by ID list
        This method makes a synchronous HTTP request by default.

        :param list[str] body: List of IDs to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_files_by_query(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """*DEPRECATED* Delete multiple files by query

        Delete multiple files by query
        This method makes a synchronous HTTP request by default.

        :param list[Filter] body: Query for containers to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def delete_files_by_query_with_http_info(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """*DEPRECATED* Delete multiple files by query

        Delete multiple files by query
        This method makes a synchronous HTTP request by default.

        :param list[Filter] body: Query for containers to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ...
    
    def get_all_files(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return all files

        Get metadata of all current user files
        This method makes a synchronous HTTP request by default.

        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param bool async_: Perform the request asynchronously
        :return: PageGenericFileOutput
        """
        ...
    
    def get_all_files_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return all files

        Get metadata of all current user files
        This method makes a synchronous HTTP request by default.

        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param bool async_: Perform the request asynchronously
        :return: PageGenericFileOutput
        """
        ...
    
    def get_file(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get File

        Get file details
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param int version:
        :param bool async_: Perform the request asynchronously
        :return: FileOutput
        """
        ...
    
    def get_file_with_http_info(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get File

        Get file details
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param int version:
        :param bool async_: Perform the request asynchronously
        :return: FileOutput
        """
        ...
    
    def get_file_info(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get Info

        Get info dict for any file version. Returns:     dict of key/value pairs
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param int version:
        :param bool async_: Perform the request asynchronously
        :return: object
        """
        ...
    
    def get_file_info_with_http_info(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get Info

        Get info dict for any file version. Returns:     dict of key/value pairs
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param int version:
        :param bool async_: Perform the request asynchronously
        :return: object
        """
        ...
    
    def get_file_tags(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return a file tags, from any version

        Return a file tags, from any version
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param int version:
        :param bool async_: Perform the request asynchronously
        :return: list[str]
        """
        ...
    
    def get_file_tags_with_http_info(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Return a file tags, from any version

        Return a file tags, from any version
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param int version:
        :param bool async_: Perform the request asynchronously
        :return: list[str]
        """
        ...
    
    def get_file_versions(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get Versions

        Get file version details
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[FileVersionOutput]
        """
        ...
    
    def get_file_versions_with_http_info(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get Versions

        Get file version details
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[FileVersionOutput]
        """
        ...
    
    def get_file_zip_info(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get Zip Info

        Get info on zipfile
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param int version:
        :param str ticket:
        :param bool async_: Perform the request asynchronously
        :return: ZipfileInfo
        """
        ...
    
    def get_file_zip_info_with_http_info(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get Zip Info

        Get info on zipfile
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param int version:
        :param str ticket:
        :param bool async_: Perform the request asynchronously
        :return: ZipfileInfo
        """
        ...
    
    def modify_file_classification(self, file_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify Classification

        Modify classification of most recent file version
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param FileClassificationDelta body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_file_classification_with_http_info(self, file_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify Classification

        Modify classification of most recent file version
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param FileClassificationDelta body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_file_info(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify Info

        Add info to most recent file version, adding items or replacing some existing ones. Parameters:     info (dict) -- key/value pairs to add Returns:     dict added
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param object body:
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def modify_file_info_with_http_info(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Modify Info

        Add info to most recent file version, adding items or replacing some existing ones. Parameters:     info (dict) -- key/value pairs to add Returns:     dict added
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param object body:
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def move_file(self, file_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Move and/or rename a file

        Move a file to a new container and/or give it a new name
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param FileMoveInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def move_file_with_http_info(self, file_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Move and/or rename a file

        Move a file to a new container and/or give it a new name
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param FileMoveInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def replace_file_info(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Replace Info

        Add info to most recent file version, replacing all existing values. Parameters:     info (dict) -- all key/value pairs to populate info Returns:     dict added
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param object body:
        :param bool async_: Perform the request asynchronously
        :return: object
        """
        ...
    
    def replace_file_info_with_http_info(self, file_id, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Replace Info

        Add info to most recent file version, replacing all existing values. Parameters:     info (dict) -- all key/value pairs to populate info Returns:     dict added
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param object body:
        :param bool async_: Perform the request asynchronously
        :return: object
        """
        ...
    
    def restore_file(self, file_id, version, evaluate_gear_rules, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Restore a File

        Restore a specific version of a file as the active version. This will create a new version which will be identical to the restored version.
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param int version: (required)
        :param bool evaluate_gear_rules: Specify if gear rules should be reevaluated on the newly created file version (required)
        :param bool async_: Perform the request asynchronously
        :return: FileOutput
        """
        ...
    
    def restore_file_with_http_info(self, file_id, version, evaluate_gear_rules, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Restore a File

        Restore a specific version of a file as the active version. This will create a new version which will be identical to the restored version.
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param int version: (required)
        :param bool evaluate_gear_rules: Specify if gear rules should be reevaluated on the newly created file version (required)
        :param bool async_: Perform the request asynchronously
        :return: FileOutput
        """
        ...
    
    def set_file_tags(self, file_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Set list of tags on a file.

        Set the tags on a file to the list of tags provided
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param list[str] body: List of application-specific tags (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def set_file_tags_with_http_info(self, file_id, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Set list of tags on a file.

        Set the tags on a file to the list of tags provided
        This method makes a synchronous HTTP request by default.

        :param str file_id: (required)
        :param list[str] body: List of application-specific tags (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ...
    
    def upsert_file(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upsert a File

        Create or update a file
        This method makes a synchronous HTTP request by default.

        :param FileUpsertInput body: (required)
        :param bool force_update:
        :param bool async_: Perform the request asynchronously
        :return: FileUpsertOutput
        """
        ...
    
    def upsert_file_with_http_info(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Upsert a File

        Create or update a file
        This method makes a synchronous HTTP request by default.

        :param FileUpsertInput body: (required)
        :param bool force_update:
        :param bool async_: Perform the request asynchronously
        :return: FileUpsertOutput
        """
        ...
    


