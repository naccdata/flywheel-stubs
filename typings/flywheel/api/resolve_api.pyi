"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class ResolveApi:
    def __init__(self, api_client=...) -> None:
        ...
    
    def lookup_path(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Perform path based lookup of a single node in the Flywheel hierarchy

        This will perform a deep lookup of a node. See /resolve for more details.
        This method makes a synchronous HTTP request by default.

        :param ResolveInput body: (required)
        :param bool full_tree:
        :param bool exhaustive:
        :param bool include_all_info: Include all info in returned objects
        :param bool async_: Perform the request asynchronously
        :return: ResolverNode
        """
        ...
    
    def lookup_path_with_http_info(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Perform path based lookup of a single node in the Flywheel hierarchy

        This will perform a deep lookup of a node. See /resolve for more details.
        This method makes a synchronous HTTP request by default.

        :param ResolveInput body: (required)
        :param bool full_tree:
        :param bool exhaustive:
        :param bool include_all_info: Include all info in returned objects
        :param bool async_: Perform the request asynchronously
        :return: ResolverNode
        """
        ...
    
    def resolve_path(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Perform path based lookup of nodes in the Flywheel hierarchy

        This will perform a deep lookup of a node (i.e. group/project/session/acquisition) and its children, including any files. The query path is an array of strings in the following order (by default):    * group id   * project label   * session label   * acquisition label  Additionally, analyses for project/session/acquisition nodes can be resolved by inserting the literal string `\"analyses\"`. e.g. `['scitran', 'MyProject', 'analyses']`.  Files for projects, sessions, acquisitions and analyses can be resolved by inserting the literal string `\"files\"`. e.g. `['scitran', 'MyProject', 'files']`.  An ID can be used instead of a label by formatting the string as `<id:project_id>`. The full path to the node, and the node's children will be included in the response.
        This method makes a synchronous HTTP request by default.

        :param ResolveInput body: (required)
        :param bool full_tree: Parse full download style paths (e.g. group/PROJECTS/project_label/SUBJECTS/...)
        :param bool minattr: Return only minimal attributes
        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param bool include_all_info: Include all info in returned objects
        :param bool async_: Perform the request asynchronously
        :return: ResolveOutput
        """
        ...
    
    def resolve_path_with_http_info(self, body, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Perform path based lookup of nodes in the Flywheel hierarchy

        This will perform a deep lookup of a node (i.e. group/project/session/acquisition) and its children, including any files. The query path is an array of strings in the following order (by default):    * group id   * project label   * session label   * acquisition label  Additionally, analyses for project/session/acquisition nodes can be resolved by inserting the literal string `\"analyses\"`. e.g. `['scitran', 'MyProject', 'analyses']`.  Files for projects, sessions, acquisitions and analyses can be resolved by inserting the literal string `\"files\"`. e.g. `['scitran', 'MyProject', 'files']`.  An ID can be used instead of a label by formatting the string as `<id:project_id>`. The full path to the node, and the node's children will be included in the response.
        This method makes a synchronous HTTP request by default.

        :param ResolveInput body: (required)
        :param bool full_tree: Parse full download style paths (e.g. group/PROJECTS/project_label/SUBJECTS/...)
        :param bool minattr: Return only minimal attributes
        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param bool include_all_info: Include all info in returned objects
        :param bool async_: Perform the request asynchronously
        :return: ResolveOutput
        """
        ...
    


