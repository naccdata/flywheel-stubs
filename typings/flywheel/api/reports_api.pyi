"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class ReportsApi:
    def __init__(self, api_client=...) -> None:
        ...
    
    def collect_usage(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Collect daily usage statistics.

        Collects usage statistics for the selected day (or yesterday if no day is given)
        This method makes a synchronous HTTP request by default.

        :param int year: The year portion of the date
        :param int month: The month portion of the date
        :param int day: The day portion of the date
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def collect_usage_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Collect daily usage statistics.

        Collects usage statistics for the selected day (or yesterday if no day is given)
        This method makes a synchronous HTTP request by default.

        :param int year: The year portion of the date
        :param int month: The month portion of the date
        :param int day: The day portion of the date
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ...
    
    def get_access_log_report(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a report of access log entries for the given parameters

        This method makes a synchronous HTTP request by default.

        :param bool csv: Set to download a csv file instead of json
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order.(e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return
        :param int skip: The number of entries to skip
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param datetime start_date: An ISO formatted timestamp for the start time of the report
        :param datetime end_date: An ISO formatted timestamp for the end time of the report
        :param str user: User id of the target user
        :param str subject: Limit the report to the subject code of subject accessed
        :param str project: Limit the report to the project id
        :param list[AccessType] access_types: The list of access_types to filter logs
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: list[ReportAccessLogEntry]
        """
        ...
    
    def get_access_log_report_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a report of access log entries for the given parameters

        This method makes a synchronous HTTP request by default.

        :param bool csv: Set to download a csv file instead of json
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order.(e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return
        :param int skip: The number of entries to skip
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param datetime start_date: An ISO formatted timestamp for the start time of the report
        :param datetime end_date: An ISO formatted timestamp for the end time of the report
        :param str user: User id of the target user
        :param str subject: Limit the report to the subject code of subject accessed
        :param str project: Limit the report to the project id
        :param list[AccessType] access_types: The list of access_types to filter logs
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: list[ReportAccessLogEntry]
        """
        ...
    
    def get_access_log_types(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the list of types of access log entries

        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: list[str]
        """
        ...
    
    def get_access_log_types_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the list of types of access log entries

        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: list[str]
        """
        ...
    
    def get_daily_usage_range_report(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a daily usage report for a given range of dates.

        This method makes a synchronous HTTP request by default.

        :param datetime start_date: An ISO formatted timestamp for the start time of the report
        :param datetime end_date: An ISO formatted timestamp for the end time of the report
        :param str group: Limit the report to the given group id
        :param str project: Limit the report to the given project id
        :param bool async_: Perform the request asynchronously
        :return: list[DailyReportUsage]
        """
        ...
    
    def get_daily_usage_range_report_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a daily usage report for a given range of dates.

        This method makes a synchronous HTTP request by default.

        :param datetime start_date: An ISO formatted timestamp for the start time of the report
        :param datetime end_date: An ISO formatted timestamp for the end time of the report
        :param str group: Limit the report to the given group id
        :param str project: Limit the report to the given project id
        :param bool async_: Perform the request asynchronously
        :return: list[DailyReportUsage]
        """
        ...
    
    def get_daily_usage_report(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a daily usage report for the given month.

        If no year/month pair is given, the current month will be used.
        This method makes a synchronous HTTP request by default.

        :param int year: The year portion of the date
        :param int month: The month portion of the date
        :param str group: Limit the report to the given group id
        :param str project: Limit the report to the given project id
        :param bool async_: Perform the request asynchronously
        :return: list[DailyReportUsage]
        """
        ...
    
    def get_daily_usage_report_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a daily usage report for the given month.

        If no year/month pair is given, the current month will be used.
        This method makes a synchronous HTTP request by default.

        :param int year: The year portion of the date
        :param int month: The month portion of the date
        :param str group: Limit the report to the given group id
        :param str project: Limit the report to the given project id
        :param bool async_: Perform the request asynchronously
        :return: list[DailyReportUsage]
        """
        ...
    
    def get_legacy_usage_report(self, type, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a usage report for the site grouped by month or project

        This report is DEPRECATED and will be removed in a future release
        This method makes a synchronous HTTP request by default.

        :param str type: The type of usage report to generate (required)
        :param datetime start_date: An ISO formatted timestamp for the start time of the report
        :param datetime end_date: An ISO formatted timestamp for the end time of the report
        :param bool async_: Perform the request asynchronously
        :return: list[LegacyUsageReport]
        """
        ...
    
    def get_legacy_usage_report_with_http_info(self, type, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a usage report for the site grouped by month or project

        This report is DEPRECATED and will be removed in a future release
        This method makes a synchronous HTTP request by default.

        :param str type: The type of usage report to generate (required)
        :param datetime start_date: An ISO formatted timestamp for the start time of the report
        :param datetime end_date: An ISO formatted timestamp for the end time of the report
        :param bool async_: Perform the request asynchronously
        :return: list[LegacyUsageReport]
        """
        ...
    
    def get_project_report(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get project report

        Get project report
        This method makes a synchronous HTTP request by default.

        :param list[str] projects: Specify multiple times to include projects in the report
        :param datetime start_date: Report start date
        :param datetime end_date: Report end date
        :param bool async_: Perform the request asynchronously
        :return: ProjectReportList
        """
        ...
    
    def get_project_report_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get project report

        Get project report
        This method makes a synchronous HTTP request by default.

        :param list[str] projects: Specify multiple times to include projects in the report
        :param datetime start_date: Report start date
        :param datetime end_date: Report end date
        :param bool async_: Perform the request asynchronously
        :return: ProjectReportList
        """
        ...
    
    def get_site_report(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the site report

        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: SiteReport
        """
        ...
    
    def get_site_report_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get the site report

        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: SiteReport
        """
        ...
    
    def get_usage_availability(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get year/month combinations where report data is available.

        Get year/month combinations where report data is available. Returns:     Returns the list of months where report data is available
        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: ReportAvailabilityList
        """
        ...
    
    def get_usage_availability_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get year/month combinations where report data is available.

        Get year/month combinations where report data is available. Returns:     Returns the list of months where report data is available
        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: ReportAvailabilityList
        """
        ...
    
    def get_usage_report(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a usage report for the given month.

        If no year/month pair is given, the current month will be used.
        This method makes a synchronous HTTP request by default.

        :param int year: The year portion of the date
        :param int month: The month portion of the date
        :param str project: Project to filter to
        :param bool async_: Perform the request asynchronously
        :return: list[ReportUsage]
        """
        ...
    
    def get_usage_report_with_http_info(self, **kwargs): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Get a usage report for the given month.

        If no year/month pair is given, the current month will be used.
        This method makes a synchronous HTTP request by default.

        :param int year: The year portion of the date
        :param int month: The month portion of the date
        :param str project: Project to filter to
        :param bool async_: Perform the request asynchronously
        :return: list[ReportUsage]
        """
        ...
    


