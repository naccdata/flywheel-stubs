"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
log = ...
def is_file_obj(obj): # -> bool:
    ...

class ApiClient:
    """Generic API client for Swagger client library builds.

    Swagger generic API client. This client handles the client-
    server communication, and is invariant across implementations. Specifics of
    the methods and models for each application are generated from the Swagger
    templates.

    :param configuration: .Configuration object for this client
    :param header_name: a header to pass when making calls to the API.
    :param header_value: a header value to pass when making calls to
        the API.
    :param cookie: a cookie to include in the header when making calls
        to the API
    """
    PRIMITIVE_TYPES = ...
    NATIVE_TYPES_MAPPING = ...
    def __init__(self, configuration=..., header_name=..., header_value=..., cookie=..., context=..., request_timeout=..., connect_timeout=...) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    @property
    def pool(self): # -> ThreadPool:
        ...
    
    @property
    def user_agent(self):
        """User agent for this API client"""
        ...
    
    @user_agent.setter
    def user_agent(self, value): # -> None:
        ...
    
    def shutdown(self): # -> None:
        ...
    
    def set_default_header(self, header_name, header_value): # -> None:
        ...
    
    def set_default_query_param(self, name, value): # -> None:
        ...
    
    def set_version_check_fn(self, fn): # -> None:
        ...
    
    def set_context(self, context): # -> None:
        ...
    
    def update_headers_with_defaults(self, header_params): # -> None:
        ...
    
    def sanitize_for_serialization(self, obj): # -> float | bool | bytes | text_type | int | list[float | bool | bytes | text_type | int | list[Any] | tuple[float | bool | bytes | text_type | int | list[Any] | tuple[Any, ...] | Any | dict[Any, Any] | None, ...] | Any | dict[Any, Any] | None] | tuple[Any, ...] | dict[Any, Any] | None:
        """Builds a JSON POST object.

        If obj is None, return None.
        If obj is str, int, long, float, bool, return directly.
        If obj is datetime.datetime, datetime.date convert to string in iso8601 format.
        If obj is list, sanitize each element in the list.
        If obj is dict, return the dict.
        If obj is swagger model, return the properties dict.

        :param obj: The data to serialize.
        :return: The serialized form of data.
        """
        ...
    
    def deserialize(self, response, response_type): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | None:
        """Deserializes response into an object.

        :param response: RESTResponse object to be deserialized.
        :param response_type: class literal for
            deserialized object, or string of class name.

        :return: deserialized object.
        """
        ...
    
    def call_api(self, resource_path, method, path_params=..., query_params=..., header_params=..., body=..., post_params=..., files=..., response_type=..., auth_settings=..., async_=..., _return_http_data_only=..., collection_formats=..., _preload_content=..., _request_timeout=..., _request_out=...): # -> str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Enum | _Date | datetime | RESTResponse | Response | tuple[str | list[list[Any] | dict[Any, list[Any] | dict[Any, Any] | Any | str | Enum | _Date | datetime | None] | Any | str | Enum | _Date | datetime | None] | dict[Any, Any] | Any | Enum | _Date | datetime | RESTResponse | Response | None, Any, Any] | AsyncResult | None:
        """Makes the HTTP request (synchronous) and returns deserialized data.

        To make an async request, set the ``async_`` parameter.

        :param resource_path: Path to method endpoint.
        :param method: Method to call.
        :param path_params: Path parameters in the url.
        :param query_params: Query parameters in the url.
        :param header_params: Header parameters to be
            placed in the request header.
        :param body: Request body.
        :param post_params dict: Request post form parameters,
            for `application/x-www-form-urlencoded`, `multipart/form-data`.
        :param auth_settings list: Auth Settings names for the request.
        :param response: Response data type.
        :param files dict: key -> filename, value -> filepath,
            for `multipart/form-data`.
        :param async_ bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param collection_formats: dict of collection formats for path, query,
            header, and post parameters.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return:
            If ``async_`` parameter is True,
            the request will be called asynchronously.
            The method will return the request thread.
            If parameter ``async_`` is False or missing,
            then the method will return the response directly.
        """
        ...
    
    def request(self, method, url, query_params=..., headers=..., post_params=..., body=..., _preload_content=..., _request_timeout=...): # -> RESTResponse | Response:
        """Makes the HTTP request using RESTClient."""
        ...
    
    def parameters_to_tuples(self, params, collection_formats): # -> list[Any]:
        """Get parameters as list of tuples, formatting collections.

        :param params: Parameters as dict or list of two-tuples
        :param dict collection_formats: Parameter collection formats
        :return: Parameters as list of tuples, collections formatted
        """
        ...
    
    def prepare_post_parameters(self, post_params=..., files=...): # -> list[Any]:
        """Builds form parameters.

        :param post_params: Normal form parameters.
        :param files: File parameters.
        :return: Form parameters with files.
        """
        ...
    
    def select_header_accept(self, accepts): # -> LiteralString | Literal['application/json'] | None:
        """Returns `Accept` based on an array of accepts provided.

        :param accepts: List of headers.
        :return: Accept (e.g. application/json).
        """
        ...
    
    def select_header_content_type(self, content_types): # -> Literal['application/json']:
        """Returns `Content-Type` based on an array of content_types provided.

        :param content_types: List of content-types.
        :return: Content-Type (e.g. application/json).
        """
        ...
    
    def update_params_for_auth(self, headers, querys, auth_settings): # -> None:
        """Updates header and query params based on authentication setting.

        :param headers: Header parameters dict to be updated.
        :param querys: Query parameters tuple list to be updated.
        :param auth_settings: Authentication setting identifiers list.
        """
        ...
    


