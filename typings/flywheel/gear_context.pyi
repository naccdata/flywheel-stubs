"""
This type stub file was generated by pyright.
"""

"""Provides gear helper functions"""
DEFAULT_GEAR_PATH = ...
class GearContext:
    """
    This class is DEPRECATED. Please use the
    `Flywheel Gear Toolkit <https://flywheel-io.gitlab.io/public/gear-toolkit/index.html>`_
    instead.

    Provides helper functions for gear development
    """
    def __init__(self, gear_path=...) -> None:
        ...
    
    def init_logging(self, level=...): # -> None:
        """Initializes logging to the given level"""
        ...
    
    @property
    def config(self): # -> Any:
        """Get the config dictionary.

        :return: The configuration dictionary.
        :rtype: dict
        """
        ...
    
    @property
    def destination(self): # -> Any:
        """Get the destination reference.

        :return: The destination dictionary.
        :rtype: dict
        """
        ...
    
    @property
    def work_dir(self): # -> str:
        """Get the absolute path to a work directory

        :return: The absolute path to work.
        :rtype: str
        """
        ...
    
    @property
    def output_dir(self): # -> str:
        """Get the absolute path to the output directory.

        :return: The absolute path to outputs.
        :rtype: str
        """
        ...
    
    @property
    def client(self): # -> Client:
        """Get the SDK client, if an api key input exists.

        Raises a ValueError if there is no api-key input.

        :return: The SDK client
        :rtype: Client
        """
        ...
    
    def log_config(self): # -> None:
        """Print the configuration and input files to the logger"""
        ...
    
    def get_input(self, name): # -> Any:
        """Get the input for name.

        :param str name: The name of the input
        :return: The input dictionary, or None if not found.
        :rtype: dict
        """
        ...
    
    def get_input_path(self, name): # -> Any | None:
        """Get the full path to the given input file.

        Raises an exception if the input exists, but is not a file.

        :param str name: The name of the input
        :return: The path to the input file if it exists, otherwise None
        :rtype: str
        """
        ...
    
    def open_input(self, name, mode=..., **kwargs): # -> IO[Any]:
        """Open the named input file.

        Raises an exception if the input does not exist or is not a file.

        :param str name: The name of the input
        :param str mode: The open mode (default is 'r')
        :param ``**kwargs``: Additional args to pass to ``open``
        :return: The file object
        :rtype: file
        """
        ...
    
    def open_output(self, name, mode=..., **kwargs): # -> IO[Any]:
        """Open the named output file.

        :param str name: The name of the output
        :param str mode: The open mode (default is 'w')
        :param ``**kwargs``: Additional args to pass to ``open``
        :return: The file object
        :rtype: file
        """
        ...
    
    def get_context_value(self, name): # -> Any | None:
        """Get the context input for name.

        :param str name: The name of the input
        :return: The input context value, or None if not found.
        :rtype: dict
        """
        ...
    
    def update_container_metadata(self, container_type, *args, **kwargs): # -> None:
        """Update metadata for the given container name in the hierarchy.

        A dictionary and/or a set of key=value args can be passed to this function.

        The metadata will be written when write_metadata() is called, or
        if using this as a context manager, when the context is exited.

        :param str container_type: The container type (e.g. session or acquisition)
        :param ``*args``: The optional update dictionary
        :param ``**kwargs``: The optional update key-value pairs
        """
        ...
    
    def update_file_metadata(self, file_name, *args, **kwargs): # -> None:
        """Update metadata for the given file on the destination.

        A dictionary and/or a set of key=value args can be passed to this function.

        The metadata will be written when write_metadata() is called, or
        if using this as a context manager, when the context is exited.

        :param str file_name: The name of the file
        :param ``*args``: The optional update dictionary
        :param ``**kwargs``: The optional update key-value pairs
        """
        ...
    
    def update_destination_metadata(self, *args, **kwargs): # -> None:
        """Update metadata for the destination container.

        A dictionary and/or a set of key=value args can be passed to this function.

        The metadata will be written when write_metadata() is called, or
        if using this as a context manager, when the context is exited.

        :param ``*args``: The optional update dictionary
        :param ``**kwargs``: The optional update key-value pairs
        """
        ...
    
    def write_metadata(self): # -> None:
        """Write the metadata json file to the output folder"""
        ...
    
    def download_session_bids(self, target_dir=..., src_data=..., folders=..., **kwargs): # -> str:
        """Download the session in bids format to target_dir.

        :param str target_dir: The destination directory (otherwise work/bids will be used)
        :param bool src_data: Whether or not to include src data (e.g. dicoms)
        :param list folders: The list of folders to include (otherwise all folders) e.g. ['anat', 'func']
        :param ``**kwargs``: Additional arguments to pass to ``download_bids_dir``
        :return: The absolute path to the downloaded bids directory
        :rtype: str
        """
        ...
    
    def download_project_bids(self, target_dir=..., src_data=..., subjects=..., sessions=..., folders=..., **kwargs): # -> str:
        """Download the project in bids format to target_dir.

        :param str target_dir: The destination directory (otherwise work/bids will be used)
        :param bool src_data: Whether or not to include src data (e.g. dicoms)
        :param list subjects: The list of subjects to include (via subject code) otherwise all subjects
        :param list sessions: The list of sessions to include (via session label) otherwise all sessions
        :param list folders: The list of folders to include (otherwise all folders) e.g. ['anat', 'func']
        :param ``**kwargs``: Additional arguments to pass to ``download_bids_dir``
        :return: The absolute path to the downloaded bids directory
        :rtype: str
        """
        ...
    
    def __enter__(self): # -> Self:
        ...
    
    def __exit__(self, exc_type, exc_value, traceback): # -> None:
        ...
    


