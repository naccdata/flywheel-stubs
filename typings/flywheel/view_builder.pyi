"""
This type stub file was generated by pyright.
"""

class ViewBuilder:
    """Builder class that assists in constructing a DataView object.

    :param str label: The optional label, if saving this data view.
    :param bool public: Whether or not to make this data view public when saving it.
    :param str match: The file match type, one of: first, last, newest, oldest, all
    :param str zip_files: The zip file filter, see the zip_member_filter function
    :param list columns: The columns or column groups to add
    :param bool process_files: Whether or not to process files, default is true
    :param bool include_ids: Whether or not to include id columns, default is true
    :param bool include_labels: Whether or not to include label columns, default is true
    :param bool error_column: Whether or not to include errors column, default is true
    :param Union[str, list, DataViewGroupBy] group_by: The Columns or column to group by
    :param str filter: The dataview pagination filter to save on the spec
    :param str container: When matching files, the container to match on
    :param str filename: When matching files, the filename pattern to match
    :param str analysis_label: When matching analysis files, the label match string
    :param str analysis_gear_name: When matching analysis files, the gear name match string
    :param str analysis_gear_version: When matching analysis files, the gear version match string
    :param bool sort: Option to sort results
    """
    def __init__(self, label=..., description=..., match=..., zip_files=..., columns=..., process_files=..., include_ids=..., include_labels=..., error_column=..., group_by=..., filter=..., container=..., filename=..., analysis_label=..., analysis_gear_name=..., analysis_gear_version=..., sort=...) -> None:
        ...
    
    def build(self): # -> DataView:
        """Build the DataView constructed with this builder.

        :return: The constructed DataView
        """
        ...
    
    def label(self, label): # -> None:
        """Set the label for this data view.

        :param str label: The new label for the data view.
        :return: self
        """
        ...
    
    def description(self, description): # -> Self:
        """Set the description for this data view.

        :param str description: The new description for the data view.
        :return: self
        """
        ...
    
    def public(self, value=...): # -> Self:
        """Set whether or not this data view should be made public.

        :param bool value: True if the data view should be public. (default)
        :return: self
        """
        ...
    
    def filter(self, filter): # -> Self:
        """Set the filter for this data view.

        :param str filter: The dataview pagination filter to save on the spec.
        :return: self
        """
        ...
    
    def group_by(self, src, dst=...): # -> Self:
        """Define a column for this data view.

        :param str src: The source field, or column alias name.
        :param str dst: The optional destination field (defaults to source)
        :return: self
        """
        ...
    
    def column(self, src, dst=..., type=..., accumulator=..., expr=...): # -> Self:
        """Define a column for this data view.

        :param str src: The source field, or column alias name.
        :param str dst: The optional destination field (defaults to source)
        :param str type: The optional type for this column, one of: int, float, string bool.
        :param str accumulator: The optional accumulation operation for group by aggregation.
        :param str expr: The optional expression to apply
        :return: self
        """
        ...
    
    def files(self, container, filename, analysis_label=..., analysis_gear_name=..., analysis_gear_version=...): # -> Self:
        """Set filter for matching files

        Container is one of project, subject, session, acquisition
        Filename filters can use the ``(*, ?)`` wildcards
        Analysis filters also support wildcards

        :param str container: When matching files, the container to match on: one of project, subject, session, acquisition
        :param str filename: When matching files, the filename pattern to match
        :param str analysis_label: When matching analysis files, the label match string
        :param str analysis_gear_name: When matching analysis files, the gear name match string
        :param str analysis_gear_version: When matching analysis files, the gear version match string
        :return: self
        """
        ...
    
    def file_column(self, src, dst=..., type=...): # -> Self:
        """Define a column to extract from a file.

        :param str src: The source field.
        :param str dst: The optional destination field (defaults to source)
        :param str type: The optional type for this column, one of: int, float, string bool.
        :return: self
        """
        ...
    
    def file_container(self, container): # -> Self:
        """Set the container where files should be matched.

        :param str container: The container name, one of: project, subject, session, acquisition
        :return: self
        """
        ...
    
    def file_match(self, match_value): # -> Self:
        """Set the resolution strategy if multiple matching files or analyses are encountered.

        :param str match_value: The file match type, one of: first, last, newest, oldest, all
        :return: self
        """
        ...
    
    def analysis_filter(self, label=..., gear_name=..., gear_version=..., regex=...): # -> Self:
        """Set the filter to use for matching analyses. If this is set, then analyses files will be matched instead of container.

        :param str label: The label match string, wildcards ``(*, ?)`` are supported.
        :param str gear_name: The gear name match string, wildcards ``(*, ?)`` are supported.
        :param str gear_version: The gear version match string, wildcards ``(*, ?)`` are supported.
        :param bool regex: Whether to treat the match string as a regular expression (default is False)
        :return: self
        """
        ...
    
    def file_filter(self, value=..., regex=...): # -> Self:
        """Set the filter to use for matching files.

        :param str value: The filename match string, wildcards ``(*, ?)`` are supported.
        :param bool regex: Whether to treat the match string as a regular expression (default is False)
        :return: self
        """
        ...
    
    def zip_member_filter(self, value=..., regex=..., match=...): # -> Self:
        """Set the filter to use for matching members of a zip file.

        :param str value: The filename match string, wildcards ``(*, ?)`` are supported.
        :param bool regex: Whether to treat the match string as a regular expression (default is False)
        :param str match: The file match type, one of: first, last, newest, oldest, all
        :return: self
        """
        ...
    
    def file_format(self, format_name): # -> Self:
        """Set the expected format of files to read.

        NOTE: This shouldn't be needed very often. If not specified, autodetect will be used for processing files.

        :param str format_name: The expected file format, one of: csv, tsv, json.
        :return: self
        """
        ...
    
    def file_format_options(self, **kwargs): # -> Self:
        """Set additional options for the file format. (e.g. arguments to be passed to csv reader function)

        :param dict kwargs: Arguments to pass to the file reader
        :return: self
        """
        ...
    
    def process_files(self, value): # -> Self:
        """Set whether or not to process files (default is True)

        By default, files will be read and return a row for each row in the file. If you just want file attributes or info
        instead, you can set this to False.

        :param bool value: Whether or not to process files
        :return: self
        """
        ...
    
    def include_labels(self, value=...): # -> Self:
        """Set whether or not to include the label columns by default.

        :param bool value: Whether or not to include labels (default is true)
        :return: self
        """
        ...
    
    def include_ids(self, value=...): # -> Self:
        """Set whether or not to include the id columns by default.

        :param bool value: Whether or not to include ids (default is true)
        :return: self
        """
        ...
    
    def error_column(self, value=...): # -> Self:
        """Set whether or not to include error column by default.

        :param bool value: Whether or not to include errors (default is true)
        :return: self
        """
        ...
    
    def missing_data_strategy(self, value): # -> Self:
        """Set the resolution strategy if rows are missing data for a column. The default is to replace the column value with None.

        :param str value: The strategy to use for missing data, one of: none, drop-row
        :return: self
        """
        ...
    
    def sort(self, value=...): # -> Self:
        """Set the option to opt out of sorting the rows by setting false

        :param bool value: Opt out of sorting
        :return: self
        """
        ...
    


