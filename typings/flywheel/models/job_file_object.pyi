"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class JobFileObject:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, type=..., mimetype=..., modality=..., classification=..., tags=..., info=..., size=..., zip_member_count=..., version=..., file_id=..., origin=...) -> None:
        """JobFileObject - a model defined in Swagger"""
        ...
    
    @property
    def type(self): # -> None:
        """Gets the type of this JobFileObject.


        :return: The type of this JobFileObject.
        :rtype: str
        """
        ...
    
    @type.setter
    def type(self, type): # -> None:
        """Sets the type of this JobFileObject.


        :param type: The type of this JobFileObject.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def mimetype(self): # -> None:
        """Gets the mimetype of this JobFileObject.


        :return: The mimetype of this JobFileObject.
        :rtype: str
        """
        ...
    
    @mimetype.setter
    def mimetype(self, mimetype): # -> None:
        """Sets the mimetype of this JobFileObject.


        :param mimetype: The mimetype of this JobFileObject.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def modality(self): # -> None:
        """Gets the modality of this JobFileObject.


        :return: The modality of this JobFileObject.
        :rtype: str
        """
        ...
    
    @modality.setter
    def modality(self, modality): # -> None:
        """Sets the modality of this JobFileObject.


        :param modality: The modality of this JobFileObject.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def classification(self): # -> None:
        """Gets the classification of this JobFileObject.


        :return: The classification of this JobFileObject.
        :rtype: object
        """
        ...
    
    @classification.setter
    def classification(self, classification): # -> None:
        """Sets the classification of this JobFileObject.


        :param classification: The classification of this JobFileObject.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def tags(self): # -> None:
        """Gets the tags of this JobFileObject.


        :return: The tags of this JobFileObject.
        :rtype: list[str]
        """
        ...
    
    @tags.setter
    def tags(self, tags): # -> None:
        """Sets the tags of this JobFileObject.


        :param tags: The tags of this JobFileObject.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def info(self): # -> None:
        """Gets the info of this JobFileObject.


        :return: The info of this JobFileObject.
        :rtype: object
        """
        ...
    
    @info.setter
    def info(self, info): # -> None:
        """Sets the info of this JobFileObject.


        :param info: The info of this JobFileObject.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def size(self): # -> None:
        """Gets the size of this JobFileObject.


        :return: The size of this JobFileObject.
        :rtype: int
        """
        ...
    
    @size.setter
    def size(self, size): # -> None:
        """Sets the size of this JobFileObject.


        :param size: The size of this JobFileObject.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def zip_member_count(self): # -> None:
        """Gets the zip_member_count of this JobFileObject.


        :return: The zip_member_count of this JobFileObject.
        :rtype: int
        """
        ...
    
    @zip_member_count.setter
    def zip_member_count(self, zip_member_count): # -> None:
        """Sets the zip_member_count of this JobFileObject.


        :param zip_member_count: The zip_member_count of this JobFileObject.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def version(self): # -> None:
        """Gets the version of this JobFileObject.


        :return: The version of this JobFileObject.
        :rtype: int
        """
        ...
    
    @version.setter
    def version(self, version): # -> None:
        """Sets the version of this JobFileObject.


        :param version: The version of this JobFileObject.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def file_id(self): # -> None:
        """Gets the file_id of this JobFileObject.


        :return: The file_id of this JobFileObject.
        :rtype: str
        """
        ...
    
    @file_id.setter
    def file_id(self, file_id): # -> None:
        """Sets the file_id of this JobFileObject.


        :param file_id: The file_id of this JobFileObject.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def origin(self): # -> None:
        """Gets the origin of this JobFileObject.


        :return: The origin of this JobFileObject.
        :rtype: Origin
        """
        ...
    
    @origin.setter
    def origin(self, origin): # -> None:
        """Sets the origin of this JobFileObject.


        :param origin: The origin of this JobFileObject.  # noqa: E501
        :type: Origin
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


