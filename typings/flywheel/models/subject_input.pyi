"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class SubjectInput:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, firstname=..., lastname=..., sex=..., cohort=..., date_of_birth=..., mlset=..., type=..., race=..., ethnicity=..., species=..., strain=..., label=..., code=..., master_code=..., tags=..., info=..., state=..., project=...) -> None:
        """SubjectInput - a model defined in Swagger"""
        ...
    
    @property
    def firstname(self): # -> None:
        """Gets the firstname of this SubjectInput.


        :return: The firstname of this SubjectInput.
        :rtype: str
        """
        ...
    
    @firstname.setter
    def firstname(self, firstname): # -> None:
        """Sets the firstname of this SubjectInput.


        :param firstname: The firstname of this SubjectInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def lastname(self): # -> None:
        """Gets the lastname of this SubjectInput.


        :return: The lastname of this SubjectInput.
        :rtype: str
        """
        ...
    
    @lastname.setter
    def lastname(self, lastname): # -> None:
        """Sets the lastname of this SubjectInput.


        :param lastname: The lastname of this SubjectInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def sex(self): # -> None:
        """Gets the sex of this SubjectInput.


        :return: The sex of this SubjectInput.
        :rtype: str
        """
        ...
    
    @sex.setter
    def sex(self, sex): # -> None:
        """Sets the sex of this SubjectInput.


        :param sex: The sex of this SubjectInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def cohort(self): # -> None:
        """Gets the cohort of this SubjectInput.


        :return: The cohort of this SubjectInput.
        :rtype: Cohort
        """
        ...
    
    @cohort.setter
    def cohort(self, cohort): # -> None:
        """Sets the cohort of this SubjectInput.


        :param cohort: The cohort of this SubjectInput.  # noqa: E501
        :type: Cohort
        """
        ...
    
    @property
    def date_of_birth(self): # -> None:
        """Gets the date_of_birth of this SubjectInput.


        :return: The date_of_birth of this SubjectInput.
        :rtype: datetime
        """
        ...
    
    @date_of_birth.setter
    def date_of_birth(self, date_of_birth): # -> None:
        """Sets the date_of_birth of this SubjectInput.


        :param date_of_birth: The date_of_birth of this SubjectInput.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def mlset(self): # -> None:
        """Gets the mlset of this SubjectInput.


        :return: The mlset of this SubjectInput.
        :rtype: MLType
        """
        ...
    
    @mlset.setter
    def mlset(self, mlset): # -> None:
        """Sets the mlset of this SubjectInput.


        :param mlset: The mlset of this SubjectInput.  # noqa: E501
        :type: MLType
        """
        ...
    
    @property
    def type(self): # -> None:
        """Gets the type of this SubjectInput.


        :return: The type of this SubjectInput.
        :rtype: str
        """
        ...
    
    @type.setter
    def type(self, type): # -> None:
        """Sets the type of this SubjectInput.


        :param type: The type of this SubjectInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def race(self): # -> None:
        """Gets the race of this SubjectInput.


        :return: The race of this SubjectInput.
        :rtype: str
        """
        ...
    
    @race.setter
    def race(self, race): # -> None:
        """Sets the race of this SubjectInput.


        :param race: The race of this SubjectInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def ethnicity(self): # -> None:
        """Gets the ethnicity of this SubjectInput.


        :return: The ethnicity of this SubjectInput.
        :rtype: str
        """
        ...
    
    @ethnicity.setter
    def ethnicity(self, ethnicity): # -> None:
        """Sets the ethnicity of this SubjectInput.


        :param ethnicity: The ethnicity of this SubjectInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def species(self): # -> None:
        """Gets the species of this SubjectInput.


        :return: The species of this SubjectInput.
        :rtype: str
        """
        ...
    
    @species.setter
    def species(self, species): # -> None:
        """Sets the species of this SubjectInput.


        :param species: The species of this SubjectInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def strain(self): # -> None:
        """Gets the strain of this SubjectInput.


        :return: The strain of this SubjectInput.
        :rtype: str
        """
        ...
    
    @strain.setter
    def strain(self, strain): # -> None:
        """Sets the strain of this SubjectInput.


        :param strain: The strain of this SubjectInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def label(self): # -> None:
        """Gets the label of this SubjectInput.


        :return: The label of this SubjectInput.
        :rtype: str
        """
        ...
    
    @label.setter
    def label(self, label): # -> None:
        """Sets the label of this SubjectInput.


        :param label: The label of this SubjectInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def code(self): # -> None:
        """Gets the code of this SubjectInput.


        :return: The code of this SubjectInput.
        :rtype: str
        """
        ...
    
    @code.setter
    def code(self, code): # -> None:
        """Sets the code of this SubjectInput.


        :param code: The code of this SubjectInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def master_code(self): # -> None:
        """Gets the master_code of this SubjectInput.


        :return: The master_code of this SubjectInput.
        :rtype: str
        """
        ...
    
    @master_code.setter
    def master_code(self, master_code): # -> None:
        """Sets the master_code of this SubjectInput.


        :param master_code: The master_code of this SubjectInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def tags(self): # -> None:
        """Gets the tags of this SubjectInput.


        :return: The tags of this SubjectInput.
        :rtype: list[str]
        """
        ...
    
    @tags.setter
    def tags(self, tags): # -> None:
        """Sets the tags of this SubjectInput.


        :param tags: The tags of this SubjectInput.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def info(self): # -> None:
        """Gets the info of this SubjectInput.


        :return: The info of this SubjectInput.
        :rtype: object
        """
        ...
    
    @info.setter
    def info(self, info): # -> None:
        """Sets the info of this SubjectInput.


        :param info: The info of this SubjectInput.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def state(self): # -> None:
        """Gets the state of this SubjectInput.


        :return: The state of this SubjectInput.
        :rtype: SubjectState
        """
        ...
    
    @state.setter
    def state(self, state): # -> None:
        """Sets the state of this SubjectInput.


        :param state: The state of this SubjectInput.  # noqa: E501
        :type: SubjectState
        """
        ...
    
    @property
    def project(self): # -> None:
        """Gets the project of this SubjectInput.


        :return: The project of this SubjectInput.
        :rtype: str
        """
        ...
    
    @project.setter
    def project(self, project): # -> None:
        """Sets the project of this SubjectInput.


        :param project: The project of this SubjectInput.  # noqa: E501
        :type: str
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


