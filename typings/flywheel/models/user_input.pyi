"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class UserInput:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, id=..., firstname=..., lastname=..., email=..., password=..., roles=..., disabled=..., avatar=..., root=..., central_user_id=..., central_revision=...) -> None:
        """UserInput - a model defined in Swagger"""
        ...
    
    @property
    def id(self): # -> None:
        """Gets the id of this UserInput.


        :return: The id of this UserInput.
        :rtype: str
        """
        ...
    
    @id.setter
    def id(self, id): # -> None:
        """Sets the id of this UserInput.


        :param id: The id of this UserInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def firstname(self): # -> None:
        """Gets the firstname of this UserInput.


        :return: The firstname of this UserInput.
        :rtype: str
        """
        ...
    
    @firstname.setter
    def firstname(self, firstname): # -> None:
        """Sets the firstname of this UserInput.


        :param firstname: The firstname of this UserInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def lastname(self): # -> None:
        """Gets the lastname of this UserInput.


        :return: The lastname of this UserInput.
        :rtype: str
        """
        ...
    
    @lastname.setter
    def lastname(self, lastname): # -> None:
        """Sets the lastname of this UserInput.


        :param lastname: The lastname of this UserInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def email(self): # -> None:
        """Gets the email of this UserInput.


        :return: The email of this UserInput.
        :rtype: str
        """
        ...
    
    @email.setter
    def email(self, email): # -> None:
        """Sets the email of this UserInput.


        :param email: The email of this UserInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def password(self): # -> None:
        """Gets the password of this UserInput.


        :return: The password of this UserInput.
        :rtype: str
        """
        ...
    
    @password.setter
    def password(self, password): # -> None:
        """Sets the password of this UserInput.


        :param password: The password of this UserInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def roles(self): # -> None:
        """Gets the roles of this UserInput.


        :return: The roles of this UserInput.
        :rtype: list[RoleType]
        """
        ...
    
    @roles.setter
    def roles(self, roles): # -> None:
        """Sets the roles of this UserInput.


        :param roles: The roles of this UserInput.  # noqa: E501
        :type: list[RoleType]
        """
        ...
    
    @property
    def disabled(self): # -> None:
        """Gets the disabled of this UserInput.


        :return: The disabled of this UserInput.
        :rtype: bool
        """
        ...
    
    @disabled.setter
    def disabled(self, disabled): # -> None:
        """Sets the disabled of this UserInput.


        :param disabled: The disabled of this UserInput.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def avatar(self): # -> None:
        """Gets the avatar of this UserInput.


        :return: The avatar of this UserInput.
        :rtype: str
        """
        ...
    
    @avatar.setter
    def avatar(self, avatar): # -> None:
        """Sets the avatar of this UserInput.


        :param avatar: The avatar of this UserInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def root(self): # -> None:
        """Gets the root of this UserInput.


        :return: The root of this UserInput.
        :rtype: bool
        """
        ...
    
    @root.setter
    def root(self, root): # -> None:
        """Sets the root of this UserInput.


        :param root: The root of this UserInput.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def central_user_id(self): # -> None:
        """Gets the central_user_id of this UserInput.


        :return: The central_user_id of this UserInput.
        :rtype: str
        """
        ...
    
    @central_user_id.setter
    def central_user_id(self, central_user_id): # -> None:
        """Sets the central_user_id of this UserInput.


        :param central_user_id: The central_user_id of this UserInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def central_revision(self): # -> None:
        """Gets the central_revision of this UserInput.


        :return: The central_revision of this UserInput.
        :rtype: int
        """
        ...
    
    @central_revision.setter
    def central_revision(self, central_revision): # -> None:
        """Sets the central_revision of this UserInput.


        :param central_revision: The central_revision of this UserInput.  # noqa: E501
        :type: int
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


