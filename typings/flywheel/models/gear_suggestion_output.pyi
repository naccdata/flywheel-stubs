"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class GearSuggestionOutput:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, id=..., cont_type=..., label=..., parents=..., children=..., files=...) -> None:
        """GearSuggestionOutput - a model defined in Swagger"""
        ...
    
    @property
    def id(self): # -> None:
        """Gets the id of this GearSuggestionOutput.


        :return: The id of this GearSuggestionOutput.
        :rtype: str
        """
        ...
    
    @id.setter
    def id(self, id): # -> None:
        """Sets the id of this GearSuggestionOutput.


        :param id: The id of this GearSuggestionOutput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def cont_type(self): # -> None:
        """Gets the cont_type of this GearSuggestionOutput.


        :return: The cont_type of this GearSuggestionOutput.
        :rtype: ContainerType
        """
        ...
    
    @cont_type.setter
    def cont_type(self, cont_type): # -> None:
        """Sets the cont_type of this GearSuggestionOutput.


        :param cont_type: The cont_type of this GearSuggestionOutput.  # noqa: E501
        :type: ContainerType
        """
        ...
    
    @property
    def label(self): # -> None:
        """Gets the label of this GearSuggestionOutput.


        :return: The label of this GearSuggestionOutput.
        :rtype: str
        """
        ...
    
    @label.setter
    def label(self, label): # -> None:
        """Sets the label of this GearSuggestionOutput.


        :param label: The label of this GearSuggestionOutput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def parents(self): # -> None:
        """Gets the parents of this GearSuggestionOutput.


        :return: The parents of this GearSuggestionOutput.
        :rtype: list[ContainerReferenceWithLabel]
        """
        ...
    
    @parents.setter
    def parents(self, parents): # -> None:
        """Sets the parents of this GearSuggestionOutput.


        :param parents: The parents of this GearSuggestionOutput.  # noqa: E501
        :type: list[ContainerReferenceWithLabel]
        """
        ...
    
    @property
    def children(self): # -> None:
        """Gets the children of this GearSuggestionOutput.


        :return: The children of this GearSuggestionOutput.
        :rtype: dict(str, list[ContainerReferenceWithLabel])
        """
        ...
    
    @children.setter
    def children(self, children): # -> None:
        """Sets the children of this GearSuggestionOutput.


        :param children: The children of this GearSuggestionOutput.  # noqa: E501
        :type: dict(str, list[ContainerReferenceWithLabel])
        """
        ...
    
    @property
    def files(self): # -> None:
        """Gets the files of this GearSuggestionOutput.


        :return: The files of this GearSuggestionOutput.
        :rtype: list[FileSuggestion]
        """
        ...
    
    @files.setter
    def files(self, files): # -> None:
        """Sets the files of this GearSuggestionOutput.


        :param files: The files of this GearSuggestionOutput.  # noqa: E501
        :type: list[FileSuggestion]
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


