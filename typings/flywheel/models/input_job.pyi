"""
This type stub file was generated by pyright.
"""

from .mixins import JobMixin

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class InputJob(JobMixin):
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, attempt=..., priority=..., batch=..., origin=..., compute_provider_id=..., destination=..., gear_id=..., role_id=..., inputs=..., parents=..., label=..., previous_job_id=..., tags=..., config=...) -> None:
        """InputJob - a model defined in Swagger"""
        ...
    
    @property
    def attempt(self): # -> None:
        """Gets the attempt of this InputJob.


        :return: The attempt of this InputJob.
        :rtype: int
        """
        ...
    
    @attempt.setter
    def attempt(self, attempt): # -> None:
        """Sets the attempt of this InputJob.


        :param attempt: The attempt of this InputJob.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def priority(self): # -> None:
        """Gets the priority of this InputJob.


        :return: The priority of this InputJob.
        :rtype: JobPriority
        """
        ...
    
    @priority.setter
    def priority(self, priority): # -> None:
        """Sets the priority of this InputJob.


        :param priority: The priority of this InputJob.  # noqa: E501
        :type: JobPriority
        """
        ...
    
    @property
    def batch(self): # -> None:
        """Gets the batch of this InputJob.


        :return: The batch of this InputJob.
        :rtype: str
        """
        ...
    
    @batch.setter
    def batch(self, batch): # -> None:
        """Sets the batch of this InputJob.


        :param batch: The batch of this InputJob.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def origin(self): # -> None:
        """Gets the origin of this InputJob.


        :return: The origin of this InputJob.
        :rtype: Origin
        """
        ...
    
    @origin.setter
    def origin(self, origin): # -> None:
        """Sets the origin of this InputJob.


        :param origin: The origin of this InputJob.  # noqa: E501
        :type: Origin
        """
        ...
    
    @property
    def compute_provider_id(self): # -> None:
        """Gets the compute_provider_id of this InputJob.


        :return: The compute_provider_id of this InputJob.
        :rtype: str
        """
        ...
    
    @compute_provider_id.setter
    def compute_provider_id(self, compute_provider_id): # -> None:
        """Sets the compute_provider_id of this InputJob.


        :param compute_provider_id: The compute_provider_id of this InputJob.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def destination(self): # -> None:
        """Gets the destination of this InputJob.


        :return: The destination of this InputJob.
        :rtype: ContainerReference
        """
        ...
    
    @destination.setter
    def destination(self, destination): # -> None:
        """Sets the destination of this InputJob.


        :param destination: The destination of this InputJob.  # noqa: E501
        :type: ContainerReference
        """
        ...
    
    @property
    def gear_id(self): # -> None:
        """Gets the gear_id of this InputJob.


        :return: The gear_id of this InputJob.
        :rtype: str
        """
        ...
    
    @gear_id.setter
    def gear_id(self, gear_id): # -> None:
        """Sets the gear_id of this InputJob.


        :param gear_id: The gear_id of this InputJob.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def role_id(self): # -> None:
        """Gets the role_id of this InputJob.


        :return: The role_id of this InputJob.
        :rtype: str
        """
        ...
    
    @role_id.setter
    def role_id(self, role_id): # -> None:
        """Sets the role_id of this InputJob.


        :param role_id: The role_id of this InputJob.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def inputs(self): # -> None:
        """Gets the inputs of this InputJob.


        :return: The inputs of this InputJob.
        :rtype: dict(str, union[FileReference,FileVersion])
        """
        ...
    
    @inputs.setter
    def inputs(self, inputs): # -> None:
        """Sets the inputs of this InputJob.


        :param inputs: The inputs of this InputJob.  # noqa: E501
        :type: dict(str, union[FileReference,FileVersion])
        """
        ...
    
    @property
    def parents(self): # -> None:
        """Gets the parents of this InputJob.


        :return: The parents of this InputJob.
        :rtype: JobParents
        """
        ...
    
    @parents.setter
    def parents(self, parents): # -> None:
        """Sets the parents of this InputJob.


        :param parents: The parents of this InputJob.  # noqa: E501
        :type: JobParents
        """
        ...
    
    @property
    def label(self): # -> None:
        """Gets the label of this InputJob.


        :return: The label of this InputJob.
        :rtype: str
        """
        ...
    
    @label.setter
    def label(self, label): # -> None:
        """Sets the label of this InputJob.


        :param label: The label of this InputJob.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def previous_job_id(self): # -> None:
        """Gets the previous_job_id of this InputJob.


        :return: The previous_job_id of this InputJob.
        :rtype: str
        """
        ...
    
    @previous_job_id.setter
    def previous_job_id(self, previous_job_id): # -> None:
        """Sets the previous_job_id of this InputJob.


        :param previous_job_id: The previous_job_id of this InputJob.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def tags(self): # -> None:
        """Gets the tags of this InputJob.


        :return: The tags of this InputJob.
        :rtype: list[str]
        """
        ...
    
    @tags.setter
    def tags(self, tags): # -> None:
        """Sets the tags of this InputJob.


        :param tags: The tags of this InputJob.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def config(self): # -> None:
        """Gets the config of this InputJob.


        :return: The config of this InputJob.
        :rtype: object
        """
        ...
    
    @config.setter
    def config(self, config): # -> None:
        """Sets the config of this InputJob.


        :param config: The config of this InputJob.  # noqa: E501
        :type: object
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


