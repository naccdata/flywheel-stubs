"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class SignedUrlUploadOutput:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, provider_id=..., uuid=..., upload_urls=..., upload_headers=..., block_ids=..., s3_multipart_upload_id=..., az_multipart_upload_id=..., note=...) -> None:
        """SignedUrlUploadOutput - a model defined in Swagger"""
        ...
    
    @property
    def provider_id(self): # -> None:
        """Gets the provider_id of this SignedUrlUploadOutput.


        :return: The provider_id of this SignedUrlUploadOutput.
        :rtype: str
        """
        ...
    
    @provider_id.setter
    def provider_id(self, provider_id): # -> None:
        """Sets the provider_id of this SignedUrlUploadOutput.


        :param provider_id: The provider_id of this SignedUrlUploadOutput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def uuid(self): # -> None:
        """Gets the uuid of this SignedUrlUploadOutput.


        :return: The uuid of this SignedUrlUploadOutput.
        :rtype: str
        """
        ...
    
    @uuid.setter
    def uuid(self, uuid): # -> None:
        """Sets the uuid of this SignedUrlUploadOutput.


        :param uuid: The uuid of this SignedUrlUploadOutput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def upload_urls(self): # -> None:
        """Gets the upload_urls of this SignedUrlUploadOutput.


        :return: The upload_urls of this SignedUrlUploadOutput.
        :rtype: list[str]
        """
        ...
    
    @upload_urls.setter
    def upload_urls(self, upload_urls): # -> None:
        """Sets the upload_urls of this SignedUrlUploadOutput.


        :param upload_urls: The upload_urls of this SignedUrlUploadOutput.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def upload_headers(self): # -> None:
        """Gets the upload_headers of this SignedUrlUploadOutput.


        :return: The upload_headers of this SignedUrlUploadOutput.
        :rtype: dict(str, str)
        """
        ...
    
    @upload_headers.setter
    def upload_headers(self, upload_headers): # -> None:
        """Sets the upload_headers of this SignedUrlUploadOutput.


        :param upload_headers: The upload_headers of this SignedUrlUploadOutput.  # noqa: E501
        :type: dict(str, str)
        """
        ...
    
    @property
    def block_ids(self): # -> None:
        """Gets the block_ids of this SignedUrlUploadOutput.


        :return: The block_ids of this SignedUrlUploadOutput.
        :rtype: list[str]
        """
        ...
    
    @block_ids.setter
    def block_ids(self, block_ids): # -> None:
        """Sets the block_ids of this SignedUrlUploadOutput.


        :param block_ids: The block_ids of this SignedUrlUploadOutput.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def s3_multipart_upload_id(self): # -> None:
        """Gets the s3_multipart_upload_id of this SignedUrlUploadOutput.


        :return: The s3_multipart_upload_id of this SignedUrlUploadOutput.
        :rtype: str
        """
        ...
    
    @s3_multipart_upload_id.setter
    def s3_multipart_upload_id(self, s3_multipart_upload_id): # -> None:
        """Sets the s3_multipart_upload_id of this SignedUrlUploadOutput.


        :param s3_multipart_upload_id: The s3_multipart_upload_id of this SignedUrlUploadOutput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def az_multipart_upload_id(self): # -> None:
        """Gets the az_multipart_upload_id of this SignedUrlUploadOutput.


        :return: The az_multipart_upload_id of this SignedUrlUploadOutput.
        :rtype: str
        """
        ...
    
    @az_multipart_upload_id.setter
    def az_multipart_upload_id(self, az_multipart_upload_id): # -> None:
        """Sets the az_multipart_upload_id of this SignedUrlUploadOutput.


        :param az_multipart_upload_id: The az_multipart_upload_id of this SignedUrlUploadOutput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def note(self): # -> None:
        """Gets the note of this SignedUrlUploadOutput.


        :return: The note of this SignedUrlUploadOutput.
        :rtype: str
        """
        ...
    
    @note.setter
    def note(self, note): # -> None:
        """Sets the note of this SignedUrlUploadOutput.


        :param note: The note of this SignedUrlUploadOutput.  # noqa: E501
        :type: str
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


