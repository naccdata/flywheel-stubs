"""
This type stub file was generated by pyright.
"""

from .mixins import JobMixin

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class Job(JobMixin):
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, id=..., origin=..., gear_id=..., gear_info=..., previous_job_id=..., inputs=..., destination=..., compute_provider_id=..., group=..., project=..., tags=..., priority=..., state=..., failure_reason=..., attempt=..., created=..., modified=..., retried=..., config=..., transitions=..., request=..., saved_files=..., profile=..., related_container_ids=..., label=...) -> None:
        """Job - a model defined in Swagger"""
        ...
    
    @property
    def id(self): # -> None:
        """Gets the id of this Job.

        Unique database ID

        :return: The id of this Job.
        :rtype: str
        """
        ...
    
    @id.setter
    def id(self, id): # -> None:
        """Sets the id of this Job.

        Unique database ID

        :param id: The id of this Job.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def origin(self): # -> None:
        """Gets the origin of this Job.


        :return: The origin of this Job.
        :rtype: JobOrigin
        """
        ...
    
    @origin.setter
    def origin(self, origin): # -> None:
        """Sets the origin of this Job.


        :param origin: The origin of this Job.  # noqa: E501
        :type: JobOrigin
        """
        ...
    
    @property
    def gear_id(self): # -> None:
        """Gets the gear_id of this Job.


        :return: The gear_id of this Job.
        :rtype: str
        """
        ...
    
    @gear_id.setter
    def gear_id(self, gear_id): # -> None:
        """Sets the gear_id of this Job.


        :param gear_id: The gear_id of this Job.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def gear_info(self): # -> None:
        """Gets the gear_info of this Job.


        :return: The gear_info of this Job.
        :rtype: GearInfo
        """
        ...
    
    @gear_info.setter
    def gear_info(self, gear_info): # -> None:
        """Sets the gear_info of this Job.


        :param gear_info: The gear_info of this Job.  # noqa: E501
        :type: GearInfo
        """
        ...
    
    @property
    def previous_job_id(self): # -> None:
        """Gets the previous_job_id of this Job.


        :return: The previous_job_id of this Job.
        :rtype: str
        """
        ...
    
    @previous_job_id.setter
    def previous_job_id(self, previous_job_id): # -> None:
        """Sets the previous_job_id of this Job.


        :param previous_job_id: The previous_job_id of this Job.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def inputs(self): # -> None:
        """Gets the inputs of this Job.


        :return: The inputs of this Job.
        :rtype: JobInputsObject
        """
        ...
    
    @inputs.setter
    def inputs(self, inputs): # -> None:
        """Sets the inputs of this Job.


        :param inputs: The inputs of this Job.  # noqa: E501
        :type: JobInputsObject
        """
        ...
    
    @property
    def destination(self): # -> None:
        """Gets the destination of this Job.


        :return: The destination of this Job.
        :rtype: JobDestination
        """
        ...
    
    @destination.setter
    def destination(self, destination): # -> None:
        """Sets the destination of this Job.


        :param destination: The destination of this Job.  # noqa: E501
        :type: JobDestination
        """
        ...
    
    @property
    def compute_provider_id(self): # -> None:
        """Gets the compute_provider_id of this Job.

        Unique database ID

        :return: The compute_provider_id of this Job.
        :rtype: str
        """
        ...
    
    @compute_provider_id.setter
    def compute_provider_id(self, compute_provider_id): # -> None:
        """Sets the compute_provider_id of this Job.

        Unique database ID

        :param compute_provider_id: The compute_provider_id of this Job.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def group(self): # -> None:
        """Gets the group of this Job.


        :return: The group of this Job.
        :rtype: str
        """
        ...
    
    @group.setter
    def group(self, group): # -> None:
        """Sets the group of this Job.


        :param group: The group of this Job.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def project(self): # -> None:
        """Gets the project of this Job.

        Unique database ID

        :return: The project of this Job.
        :rtype: str
        """
        ...
    
    @project.setter
    def project(self, project): # -> None:
        """Sets the project of this Job.

        Unique database ID

        :param project: The project of this Job.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def tags(self): # -> None:
        """Gets the tags of this Job.


        :return: The tags of this Job.
        :rtype: list[str]
        """
        ...
    
    @tags.setter
    def tags(self, tags): # -> None:
        """Sets the tags of this Job.


        :param tags: The tags of this Job.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def priority(self): # -> None:
        """Gets the priority of this Job.


        :return: The priority of this Job.
        :rtype: str
        """
        ...
    
    @priority.setter
    def priority(self, priority): # -> None:
        """Sets the priority of this Job.


        :param priority: The priority of this Job.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def state(self): # -> None:
        """Gets the state of this Job.


        :return: The state of this Job.
        :rtype: str
        """
        ...
    
    @state.setter
    def state(self, state): # -> None:
        """Sets the state of this Job.


        :param state: The state of this Job.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def failure_reason(self): # -> None:
        """Gets the failure_reason of this Job.

        An optional suspected reason for job failure

        :return: The failure_reason of this Job.
        :rtype: str
        """
        ...
    
    @failure_reason.setter
    def failure_reason(self, failure_reason): # -> None:
        """Sets the failure_reason of this Job.

        An optional suspected reason for job failure

        :param failure_reason: The failure_reason of this Job.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def attempt(self): # -> None:
        """Gets the attempt of this Job.


        :return: The attempt of this Job.
        :rtype: int
        """
        ...
    
    @attempt.setter
    def attempt(self, attempt): # -> None:
        """Sets the attempt of this Job.


        :param attempt: The attempt of this Job.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def created(self): # -> None:
        """Gets the created of this Job.

        Creation time (automatically set)

        :return: The created of this Job.
        :rtype: datetime
        """
        ...
    
    @created.setter
    def created(self, created): # -> None:
        """Sets the created of this Job.

        Creation time (automatically set)

        :param created: The created of this Job.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def modified(self): # -> None:
        """Gets the modified of this Job.

        Last modification time (automatically updated)

        :return: The modified of this Job.
        :rtype: datetime
        """
        ...
    
    @modified.setter
    def modified(self, modified): # -> None:
        """Sets the modified of this Job.

        Last modification time (automatically updated)

        :param modified: The modified of this Job.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def retried(self): # -> None:
        """Gets the retried of this Job.

        Retried time (automatically set)

        :return: The retried of this Job.
        :rtype: datetime
        """
        ...
    
    @retried.setter
    def retried(self, retried): # -> None:
        """Sets the retried of this Job.

        Retried time (automatically set)

        :param retried: The retried of this Job.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def config(self): # -> None:
        """Gets the config of this Job.


        :return: The config of this Job.
        :rtype: JobConfig
        """
        ...
    
    @config.setter
    def config(self, config): # -> None:
        """Sets the config of this Job.


        :param config: The config of this Job.  # noqa: E501
        :type: JobConfig
        """
        ...
    
    @property
    def transitions(self): # -> None:
        """Gets the transitions of this Job.


        :return: The transitions of this Job.
        :rtype: JobTransitionTimes
        """
        ...
    
    @transitions.setter
    def transitions(self, transitions): # -> None:
        """Sets the transitions of this Job.


        :param transitions: The transitions of this Job.  # noqa: E501
        :type: JobTransitionTimes
        """
        ...
    
    @property
    def request(self): # -> None:
        """Gets the request of this Job.


        :return: The request of this Job.
        :rtype: JobRequest
        """
        ...
    
    @request.setter
    def request(self, request): # -> None:
        """Sets the request of this Job.


        :param request: The request of this Job.  # noqa: E501
        :type: JobRequest
        """
        ...
    
    @property
    def saved_files(self): # -> None:
        """Gets the saved_files of this Job.


        :return: The saved_files of this Job.
        :rtype: list[str]
        """
        ...
    
    @saved_files.setter
    def saved_files(self, saved_files): # -> None:
        """Sets the saved_files of this Job.


        :param saved_files: The saved_files of this Job.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def profile(self): # -> None:
        """Gets the profile of this Job.


        :return: The profile of this Job.
        :rtype: JobProfile
        """
        ...
    
    @profile.setter
    def profile(self, profile): # -> None:
        """Sets the profile of this Job.


        :param profile: The profile of this Job.  # noqa: E501
        :type: JobProfile
        """
        ...
    
    @property
    def related_container_ids(self): # -> None:
        """Gets the related_container_ids of this Job.

        The set of all related container ids

        :return: The related_container_ids of this Job.
        :rtype: list[str]
        """
        ...
    
    @related_container_ids.setter
    def related_container_ids(self, related_container_ids): # -> None:
        """Sets the related_container_ids of this Job.

        The set of all related container ids

        :param related_container_ids: The related_container_ids of this Job.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def label(self): # -> None:
        """Gets the label of this Job.

        Application-specific label

        :return: The label of this Job.
        :rtype: str
        """
        ...
    
    @label.setter
    def label(self, label): # -> None:
        """Sets the label of this Job.

        Application-specific label

        :param label: The label of this Job.  # noqa: E501
        :type: str
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


