"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class CatalogListOutput:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, id=..., label=..., tags=..., therapeutic_areas=..., body_regions=..., organ_systems=..., project_institutions=..., project_contacts=..., summary=..., stats=...) -> None:
        """CatalogListOutput - a model defined in Swagger"""
        ...
    
    @property
    def id(self): # -> None:
        """Gets the id of this CatalogListOutput.


        :return: The id of this CatalogListOutput.
        :rtype: str
        """
        ...
    
    @id.setter
    def id(self, id): # -> None:
        """Sets the id of this CatalogListOutput.


        :param id: The id of this CatalogListOutput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def label(self): # -> None:
        """Gets the label of this CatalogListOutput.


        :return: The label of this CatalogListOutput.
        :rtype: str
        """
        ...
    
    @label.setter
    def label(self, label): # -> None:
        """Sets the label of this CatalogListOutput.


        :param label: The label of this CatalogListOutput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def tags(self): # -> None:
        """Gets the tags of this CatalogListOutput.


        :return: The tags of this CatalogListOutput.
        :rtype: list[str]
        """
        ...
    
    @tags.setter
    def tags(self, tags): # -> None:
        """Sets the tags of this CatalogListOutput.


        :param tags: The tags of this CatalogListOutput.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def therapeutic_areas(self): # -> None:
        """Gets the therapeutic_areas of this CatalogListOutput.


        :return: The therapeutic_areas of this CatalogListOutput.
        :rtype: list[TherapeuticArea]
        """
        ...
    
    @therapeutic_areas.setter
    def therapeutic_areas(self, therapeutic_areas): # -> None:
        """Sets the therapeutic_areas of this CatalogListOutput.


        :param therapeutic_areas: The therapeutic_areas of this CatalogListOutput.  # noqa: E501
        :type: list[TherapeuticArea]
        """
        ...
    
    @property
    def body_regions(self): # -> None:
        """Gets the body_regions of this CatalogListOutput.


        :return: The body_regions of this CatalogListOutput.
        :rtype: list[BodyRegion]
        """
        ...
    
    @body_regions.setter
    def body_regions(self, body_regions): # -> None:
        """Sets the body_regions of this CatalogListOutput.


        :param body_regions: The body_regions of this CatalogListOutput.  # noqa: E501
        :type: list[BodyRegion]
        """
        ...
    
    @property
    def organ_systems(self): # -> None:
        """Gets the organ_systems of this CatalogListOutput.


        :return: The organ_systems of this CatalogListOutput.
        :rtype: list[OrganSystem]
        """
        ...
    
    @organ_systems.setter
    def organ_systems(self, organ_systems): # -> None:
        """Sets the organ_systems of this CatalogListOutput.


        :param organ_systems: The organ_systems of this CatalogListOutput.  # noqa: E501
        :type: list[OrganSystem]
        """
        ...
    
    @property
    def project_institutions(self): # -> None:
        """Gets the project_institutions of this CatalogListOutput.


        :return: The project_institutions of this CatalogListOutput.
        :rtype: list[ProjectInstitution]
        """
        ...
    
    @project_institutions.setter
    def project_institutions(self, project_institutions): # -> None:
        """Sets the project_institutions of this CatalogListOutput.


        :param project_institutions: The project_institutions of this CatalogListOutput.  # noqa: E501
        :type: list[ProjectInstitution]
        """
        ...
    
    @property
    def project_contacts(self): # -> None:
        """Gets the project_contacts of this CatalogListOutput.


        :return: The project_contacts of this CatalogListOutput.
        :rtype: list[ProjectContact]
        """
        ...
    
    @project_contacts.setter
    def project_contacts(self, project_contacts): # -> None:
        """Sets the project_contacts of this CatalogListOutput.


        :param project_contacts: The project_contacts of this CatalogListOutput.  # noqa: E501
        :type: list[ProjectContact]
        """
        ...
    
    @property
    def summary(self): # -> None:
        """Gets the summary of this CatalogListOutput.


        :return: The summary of this CatalogListOutput.
        :rtype: str
        """
        ...
    
    @summary.setter
    def summary(self, summary): # -> None:
        """Sets the summary of this CatalogListOutput.


        :param summary: The summary of this CatalogListOutput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def stats(self): # -> None:
        """Gets the stats of this CatalogListOutput.


        :return: The stats of this CatalogListOutput.
        :rtype: ProjectStats
        """
        ...
    
    @stats.setter
    def stats(self, stats): # -> None:
        """Sets the stats of this CatalogListOutput.


        :param stats: The stats of this CatalogListOutput.  # noqa: E501
        :type: ProjectStats
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


