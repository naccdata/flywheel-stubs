"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class AuthOut:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, google=..., auth0=..., basic=..., cas=..., ldap=..., mail=..., saml=..., wechat=...) -> None:
        """AuthOut - a model defined in Swagger"""
        ...
    
    @property
    def google(self): # -> None:
        """Gets the google of this AuthOut.


        :return: The google of this AuthOut.
        :rtype: GoogleAuthOut
        """
        ...
    
    @google.setter
    def google(self, google): # -> None:
        """Sets the google of this AuthOut.


        :param google: The google of this AuthOut.  # noqa: E501
        :type: GoogleAuthOut
        """
        ...
    
    @property
    def auth0(self): # -> None:
        """Gets the auth0 of this AuthOut.


        :return: The auth0 of this AuthOut.
        :rtype: Auth0AuthOut
        """
        ...
    
    @auth0.setter
    def auth0(self, auth0): # -> None:
        """Sets the auth0 of this AuthOut.


        :param auth0: The auth0 of this AuthOut.  # noqa: E501
        :type: Auth0AuthOut
        """
        ...
    
    @property
    def basic(self): # -> None:
        """Gets the basic of this AuthOut.


        :return: The basic of this AuthOut.
        :rtype: object
        """
        ...
    
    @basic.setter
    def basic(self, basic): # -> None:
        """Sets the basic of this AuthOut.


        :param basic: The basic of this AuthOut.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def cas(self): # -> None:
        """Gets the cas of this AuthOut.


        :return: The cas of this AuthOut.
        :rtype: object
        """
        ...
    
    @cas.setter
    def cas(self, cas): # -> None:
        """Sets the cas of this AuthOut.


        :param cas: The cas of this AuthOut.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def ldap(self): # -> None:
        """Gets the ldap of this AuthOut.


        :return: The ldap of this AuthOut.
        :rtype: object
        """
        ...
    
    @ldap.setter
    def ldap(self, ldap): # -> None:
        """Sets the ldap of this AuthOut.


        :param ldap: The ldap of this AuthOut.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def mail(self): # -> None:
        """Gets the mail of this AuthOut.


        :return: The mail of this AuthOut.
        :rtype: object
        """
        ...
    
    @mail.setter
    def mail(self, mail): # -> None:
        """Sets the mail of this AuthOut.


        :param mail: The mail of this AuthOut.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def saml(self): # -> None:
        """Gets the saml of this AuthOut.


        :return: The saml of this AuthOut.
        :rtype: object
        """
        ...
    
    @saml.setter
    def saml(self, saml): # -> None:
        """Sets the saml of this AuthOut.


        :param saml: The saml of this AuthOut.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def wechat(self): # -> None:
        """Gets the wechat of this AuthOut.


        :return: The wechat of this AuthOut.
        :rtype: object
        """
        ...
    
    @wechat.setter
    def wechat(self, wechat): # -> None:
        """Sets the wechat of this AuthOut.


        :param wechat: The wechat of this AuthOut.  # noqa: E501
        :type: object
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


