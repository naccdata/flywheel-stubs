"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class ClassicBatchProposalInput:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, gear_id=..., targets=..., target_context=..., priority=..., config=..., tags=..., analysis=..., optional_input_policy=..., compute_provider_id=...) -> None:
        """ClassicBatchProposalInput - a model defined in Swagger"""
        ...
    
    @property
    def gear_id(self): # -> None:
        """Gets the gear_id of this ClassicBatchProposalInput.


        :return: The gear_id of this ClassicBatchProposalInput.
        :rtype: str
        """
        ...
    
    @gear_id.setter
    def gear_id(self, gear_id): # -> None:
        """Sets the gear_id of this ClassicBatchProposalInput.


        :param gear_id: The gear_id of this ClassicBatchProposalInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def targets(self): # -> None:
        """Gets the targets of this ClassicBatchProposalInput.


        :return: The targets of this ClassicBatchProposalInput.
        :rtype: list[ContainerReference]
        """
        ...
    
    @targets.setter
    def targets(self, targets): # -> None:
        """Sets the targets of this ClassicBatchProposalInput.


        :param targets: The targets of this ClassicBatchProposalInput.  # noqa: E501
        :type: list[ContainerReference]
        """
        ...
    
    @property
    def target_context(self): # -> None:
        """Gets the target_context of this ClassicBatchProposalInput.


        :return: The target_context of this ClassicBatchProposalInput.
        :rtype: ContainerReference
        """
        ...
    
    @target_context.setter
    def target_context(self, target_context): # -> None:
        """Sets the target_context of this ClassicBatchProposalInput.


        :param target_context: The target_context of this ClassicBatchProposalInput.  # noqa: E501
        :type: ContainerReference
        """
        ...
    
    @property
    def priority(self): # -> None:
        """Gets the priority of this ClassicBatchProposalInput.


        :return: The priority of this ClassicBatchProposalInput.
        :rtype: JobPriority
        """
        ...
    
    @priority.setter
    def priority(self, priority): # -> None:
        """Sets the priority of this ClassicBatchProposalInput.


        :param priority: The priority of this ClassicBatchProposalInput.  # noqa: E501
        :type: JobPriority
        """
        ...
    
    @property
    def config(self): # -> None:
        """Gets the config of this ClassicBatchProposalInput.


        :return: The config of this ClassicBatchProposalInput.
        :rtype: object
        """
        ...
    
    @config.setter
    def config(self, config): # -> None:
        """Sets the config of this ClassicBatchProposalInput.


        :param config: The config of this ClassicBatchProposalInput.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def tags(self): # -> None:
        """Gets the tags of this ClassicBatchProposalInput.

        Array of application-specific tags

        :return: The tags of this ClassicBatchProposalInput.
        :rtype: list[str]
        """
        ...
    
    @tags.setter
    def tags(self, tags): # -> None:
        """Sets the tags of this ClassicBatchProposalInput.

        Array of application-specific tags

        :param tags: The tags of this ClassicBatchProposalInput.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def analysis(self): # -> None:
        """Gets the analysis of this ClassicBatchProposalInput.


        :return: The analysis of this ClassicBatchProposalInput.
        :rtype: BatchJobAnalysisInput
        """
        ...
    
    @analysis.setter
    def analysis(self, analysis): # -> None:
        """Sets the analysis of this ClassicBatchProposalInput.


        :param analysis: The analysis of this ClassicBatchProposalInput.  # noqa: E501
        :type: BatchJobAnalysisInput
        """
        ...
    
    @property
    def optional_input_policy(self): # -> None:
        """Gets the optional_input_policy of this ClassicBatchProposalInput.


        :return: The optional_input_policy of this ClassicBatchProposalInput.
        :rtype: OptionalInputPolicy
        """
        ...
    
    @optional_input_policy.setter
    def optional_input_policy(self, optional_input_policy): # -> None:
        """Sets the optional_input_policy of this ClassicBatchProposalInput.


        :param optional_input_policy: The optional_input_policy of this ClassicBatchProposalInput.  # noqa: E501
        :type: OptionalInputPolicy
        """
        ...
    
    @property
    def compute_provider_id(self): # -> None:
        """Gets the compute_provider_id of this ClassicBatchProposalInput.

        Unique database ID

        :return: The compute_provider_id of this ClassicBatchProposalInput.
        :rtype: str
        """
        ...
    
    @compute_provider_id.setter
    def compute_provider_id(self, compute_provider_id): # -> None:
        """Sets the compute_provider_id of this ClassicBatchProposalInput.

        Unique database ID

        :param compute_provider_id: The compute_provider_id of this ClassicBatchProposalInput.  # noqa: E501
        :type: str
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


