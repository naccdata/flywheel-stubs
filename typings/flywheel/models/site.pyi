"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class Site:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, id=..., api_url=..., central_url=..., deid_log_url=..., dimse_host=..., dimse_port=..., mfa_code_length=..., inactivity_timeout=..., name=..., redirect_url=..., registered=..., ssl_cert=..., upload_maximum_bytes=..., proxy_cdn=..., gravatar_address=..., pagination_limit=...) -> None:
        """Site - a model defined in Swagger"""
        ...
    
    @property
    def id(self): # -> None:
        """Gets the id of this Site.


        :return: The id of this Site.
        :rtype: str
        """
        ...
    
    @id.setter
    def id(self, id): # -> None:
        """Sets the id of this Site.


        :param id: The id of this Site.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def api_url(self): # -> None:
        """Gets the api_url of this Site.


        :return: The api_url of this Site.
        :rtype: str
        """
        ...
    
    @api_url.setter
    def api_url(self, api_url): # -> None:
        """Sets the api_url of this Site.


        :param api_url: The api_url of this Site.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def central_url(self): # -> None:
        """Gets the central_url of this Site.


        :return: The central_url of this Site.
        :rtype: str
        """
        ...
    
    @central_url.setter
    def central_url(self, central_url): # -> None:
        """Sets the central_url of this Site.


        :param central_url: The central_url of this Site.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def deid_log_url(self): # -> None:
        """Gets the deid_log_url of this Site.


        :return: The deid_log_url of this Site.
        :rtype: str
        """
        ...
    
    @deid_log_url.setter
    def deid_log_url(self, deid_log_url): # -> None:
        """Sets the deid_log_url of this Site.


        :param deid_log_url: The deid_log_url of this Site.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def dimse_host(self): # -> None:
        """Gets the dimse_host of this Site.


        :return: The dimse_host of this Site.
        :rtype: str
        """
        ...
    
    @dimse_host.setter
    def dimse_host(self, dimse_host): # -> None:
        """Sets the dimse_host of this Site.


        :param dimse_host: The dimse_host of this Site.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def dimse_port(self): # -> None:
        """Gets the dimse_port of this Site.


        :return: The dimse_port of this Site.
        :rtype: int
        """
        ...
    
    @dimse_port.setter
    def dimse_port(self, dimse_port): # -> None:
        """Sets the dimse_port of this Site.


        :param dimse_port: The dimse_port of this Site.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def mfa_code_length(self): # -> None:
        """Gets the mfa_code_length of this Site.


        :return: The mfa_code_length of this Site.
        :rtype: int
        """
        ...
    
    @mfa_code_length.setter
    def mfa_code_length(self, mfa_code_length): # -> None:
        """Sets the mfa_code_length of this Site.


        :param mfa_code_length: The mfa_code_length of this Site.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def inactivity_timeout(self): # -> None:
        """Gets the inactivity_timeout of this Site.


        :return: The inactivity_timeout of this Site.
        :rtype: int
        """
        ...
    
    @inactivity_timeout.setter
    def inactivity_timeout(self, inactivity_timeout): # -> None:
        """Sets the inactivity_timeout of this Site.


        :param inactivity_timeout: The inactivity_timeout of this Site.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def name(self): # -> None:
        """Gets the name of this Site.


        :return: The name of this Site.
        :rtype: str
        """
        ...
    
    @name.setter
    def name(self, name): # -> None:
        """Sets the name of this Site.


        :param name: The name of this Site.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def redirect_url(self): # -> None:
        """Gets the redirect_url of this Site.


        :return: The redirect_url of this Site.
        :rtype: str
        """
        ...
    
    @redirect_url.setter
    def redirect_url(self, redirect_url): # -> None:
        """Sets the redirect_url of this Site.


        :param redirect_url: The redirect_url of this Site.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def registered(self): # -> None:
        """Gets the registered of this Site.


        :return: The registered of this Site.
        :rtype: bool
        """
        ...
    
    @registered.setter
    def registered(self, registered): # -> None:
        """Sets the registered of this Site.


        :param registered: The registered of this Site.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def ssl_cert(self): # -> None:
        """Gets the ssl_cert of this Site.


        :return: The ssl_cert of this Site.
        :rtype: str
        """
        ...
    
    @ssl_cert.setter
    def ssl_cert(self, ssl_cert): # -> None:
        """Sets the ssl_cert of this Site.


        :param ssl_cert: The ssl_cert of this Site.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def upload_maximum_bytes(self): # -> None:
        """Gets the upload_maximum_bytes of this Site.


        :return: The upload_maximum_bytes of this Site.
        :rtype: str
        """
        ...
    
    @upload_maximum_bytes.setter
    def upload_maximum_bytes(self, upload_maximum_bytes): # -> None:
        """Sets the upload_maximum_bytes of this Site.


        :param upload_maximum_bytes: The upload_maximum_bytes of this Site.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def proxy_cdn(self): # -> None:
        """Gets the proxy_cdn of this Site.


        :return: The proxy_cdn of this Site.
        :rtype: bool
        """
        ...
    
    @proxy_cdn.setter
    def proxy_cdn(self, proxy_cdn): # -> None:
        """Sets the proxy_cdn of this Site.


        :param proxy_cdn: The proxy_cdn of this Site.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def gravatar_address(self): # -> None:
        """Gets the gravatar_address of this Site.


        :return: The gravatar_address of this Site.
        :rtype: str
        """
        ...
    
    @gravatar_address.setter
    def gravatar_address(self, gravatar_address): # -> None:
        """Sets the gravatar_address of this Site.


        :param gravatar_address: The gravatar_address of this Site.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def pagination_limit(self): # -> None:
        """Gets the pagination_limit of this Site.


        :return: The pagination_limit of this Site.
        :rtype: int
        """
        ...
    
    @pagination_limit.setter
    def pagination_limit(self, pagination_limit): # -> None:
        """Sets the pagination_limit of this Site.


        :param pagination_limit: The pagination_limit of this Site.  # noqa: E501
        :type: int
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


