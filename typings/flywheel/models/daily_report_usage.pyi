"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class DailyReportUsage:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, year=..., month=..., day=..., project_label=..., group=..., project=..., session_count=..., center_job_count=..., group_job_count=..., center_compute_ms=..., group_compute_ms=..., center_storage_bytes=..., center_storage_soft_deleted_bytes=..., group_storage_bytes=..., group_storage_soft_deleted_bytes=...) -> None:
        """DailyReportUsage - a model defined in Swagger"""
        ...
    
    @property
    def year(self): # -> None:
        """Gets the year of this DailyReportUsage.

        The year that this record represents

        :return: The year of this DailyReportUsage.
        :rtype: int
        """
        ...
    
    @year.setter
    def year(self, year): # -> None:
        """Sets the year of this DailyReportUsage.

        The year that this record represents

        :param year: The year of this DailyReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def month(self): # -> None:
        """Gets the month of this DailyReportUsage.

        The month that this record represents

        :return: The month of this DailyReportUsage.
        :rtype: int
        """
        ...
    
    @month.setter
    def month(self, month): # -> None:
        """Sets the month of this DailyReportUsage.

        The month that this record represents

        :param month: The month of this DailyReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def day(self): # -> None:
        """Gets the day of this DailyReportUsage.

        The day that this record represents

        :return: The day of this DailyReportUsage.
        :rtype: int
        """
        ...
    
    @day.setter
    def day(self, day): # -> None:
        """Sets the day of this DailyReportUsage.

        The day that this record represents

        :param day: The day of this DailyReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def project_label(self): # -> None:
        """Gets the project_label of this DailyReportUsage.

        Application-specific label

        :return: The project_label of this DailyReportUsage.
        :rtype: str
        """
        ...
    
    @project_label.setter
    def project_label(self, project_label): # -> None:
        """Sets the project_label of this DailyReportUsage.

        Application-specific label

        :param project_label: The project_label of this DailyReportUsage.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def group(self): # -> None:
        """Gets the group of this DailyReportUsage.

        The group label

        :return: The group of this DailyReportUsage.
        :rtype: str
        """
        ...
    
    @group.setter
    def group(self, group): # -> None:
        """Sets the group of this DailyReportUsage.

        The group label

        :param group: The group of this DailyReportUsage.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def project(self): # -> None:
        """Gets the project of this DailyReportUsage.


        :return: The project of this DailyReportUsage.
        :rtype: str
        """
        ...
    
    @project.setter
    def project(self, project): # -> None:
        """Sets the project of this DailyReportUsage.


        :param project: The project of this DailyReportUsage.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def session_count(self): # -> None:
        """Gets the session_count of this DailyReportUsage.

        The number of sessions that existed at the last collection time

        :return: The session_count of this DailyReportUsage.
        :rtype: int
        """
        ...
    
    @session_count.setter
    def session_count(self, session_count): # -> None:
        """Sets the session_count of this DailyReportUsage.

        The number of sessions that existed at the last collection time

        :param session_count: The session_count of this DailyReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def center_job_count(self): # -> None:
        """Gets the center_job_count of this DailyReportUsage.

        The number of center-designated gear jobs that completed during the time frame (billable to the center)

        :return: The center_job_count of this DailyReportUsage.
        :rtype: int
        """
        ...
    
    @center_job_count.setter
    def center_job_count(self, center_job_count): # -> None:
        """Sets the center_job_count of this DailyReportUsage.

        The number of center-designated gear jobs that completed during the time frame (billable to the center)

        :param center_job_count: The center_job_count of this DailyReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def group_job_count(self): # -> None:
        """Gets the group_job_count of this DailyReportUsage.

        The number of non-center-designated (lab) gear jobs that completed during the time frame (billable to the group)

        :return: The group_job_count of this DailyReportUsage.
        :rtype: int
        """
        ...
    
    @group_job_count.setter
    def group_job_count(self, group_job_count): # -> None:
        """Sets the group_job_count of this DailyReportUsage.

        The number of non-center-designated (lab) gear jobs that completed during the time frame (billable to the group)

        :param group_job_count: The group_job_count of this DailyReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def center_compute_ms(self): # -> None:
        """Gets the center_compute_ms of this DailyReportUsage.

        The compute time of center-designated gear jobs completed during the time frame (billable to the center)

        :return: The center_compute_ms of this DailyReportUsage.
        :rtype: int
        """
        ...
    
    @center_compute_ms.setter
    def center_compute_ms(self, center_compute_ms): # -> None:
        """Sets the center_compute_ms of this DailyReportUsage.

        The compute time of center-designated gear jobs completed during the time frame (billable to the center)

        :param center_compute_ms: The center_compute_ms of this DailyReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def group_compute_ms(self): # -> None:
        """Gets the group_compute_ms of this DailyReportUsage.

        The compute time of non-center-designated (lab) gear jobs completed during the time frame (billable to the group)

        :return: The group_compute_ms of this DailyReportUsage.
        :rtype: int
        """
        ...
    
    @group_compute_ms.setter
    def group_compute_ms(self, group_compute_ms): # -> None:
        """Sets the group_compute_ms of this DailyReportUsage.

        The compute time of non-center-designated (lab) gear jobs completed during the time frame (billable to the group)

        :param group_compute_ms: The group_compute_ms of this DailyReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def center_storage_bytes(self): # -> None:
        """Gets the center_storage_bytes of this DailyReportUsage.

        The total storage used by files originating from devices or center-designated gears on this day (billable to the center)

        :return: The center_storage_bytes of this DailyReportUsage.
        :rtype: int
        """
        ...
    
    @center_storage_bytes.setter
    def center_storage_bytes(self, center_storage_bytes): # -> None:
        """Sets the center_storage_bytes of this DailyReportUsage.

        The total storage used by files originating from devices or center-designated gears on this day (billable to the center)

        :param center_storage_bytes: The center_storage_bytes of this DailyReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def center_storage_soft_deleted_bytes(self): # -> None:
        """Gets the center_storage_soft_deleted_bytes of this DailyReportUsage.

        The total storage used by soft deleted files originating from devices or center-designated gears on this day (billable to the center)

        :return: The center_storage_soft_deleted_bytes of this DailyReportUsage.
        :rtype: int
        """
        ...
    
    @center_storage_soft_deleted_bytes.setter
    def center_storage_soft_deleted_bytes(self, center_storage_soft_deleted_bytes): # -> None:
        """Sets the center_storage_soft_deleted_bytes of this DailyReportUsage.

        The total storage used by soft deleted files originating from devices or center-designated gears on this day (billable to the center)

        :param center_storage_soft_deleted_bytes: The center_storage_soft_deleted_bytes of this DailyReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def group_storage_bytes(self): # -> None:
        """Gets the group_storage_bytes of this DailyReportUsage.

        The total storage used by files not originating from devices or non-center-designated (lab) gears on this day (billable to the group)

        :return: The group_storage_bytes of this DailyReportUsage.
        :rtype: int
        """
        ...
    
    @group_storage_bytes.setter
    def group_storage_bytes(self, group_storage_bytes): # -> None:
        """Sets the group_storage_bytes of this DailyReportUsage.

        The total storage used by files not originating from devices or non-center-designated (lab) gears on this day (billable to the group)

        :param group_storage_bytes: The group_storage_bytes of this DailyReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def group_storage_soft_deleted_bytes(self): # -> None:
        """Gets the group_storage_soft_deleted_bytes of this DailyReportUsage.

        The total storage used by soft deleted files not originating from devices or non-center-designated (lab) gears on this day (billable to the group)

        :return: The group_storage_soft_deleted_bytes of this DailyReportUsage.
        :rtype: int
        """
        ...
    
    @group_storage_soft_deleted_bytes.setter
    def group_storage_soft_deleted_bytes(self, group_storage_soft_deleted_bytes): # -> None:
        """Sets the group_storage_soft_deleted_bytes of this DailyReportUsage.

        The total storage used by soft deleted files not originating from devices or non-center-designated (lab) gears on this day (billable to the group)

        :param group_storage_soft_deleted_bytes: The group_storage_soft_deleted_bytes of this DailyReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


