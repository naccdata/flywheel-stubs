"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class Version:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, id=..., database=..., database_target=..., release=..., flywheel_release=..., cli_version=..., applied_checks=..., applied_fixes=...) -> None:
        """Version - a model defined in Swagger"""
        ...
    
    @property
    def id(self): # -> None:
        """Gets the id of this Version.


        :return: The id of this Version.
        :rtype: str
        """
        ...
    
    @id.setter
    def id(self, id): # -> None:
        """Sets the id of this Version.


        :param id: The id of this Version.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def database(self): # -> None:
        """Gets the database of this Version.

        Core database version

        :return: The database of this Version.
        :rtype: int
        """
        ...
    
    @database.setter
    def database(self, database): # -> None:
        """Sets the database of this Version.

        Core database version

        :param database: The database of this Version.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def database_target(self): # -> None:
        """Gets the database_target of this Version.

        Core database target version

        :return: The database_target of this Version.
        :rtype: int
        """
        ...
    
    @database_target.setter
    def database_target(self, database_target): # -> None:
        """Sets the database_target of this Version.

        Core database target version

        :param database_target: The database_target of this Version.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def release(self): # -> None:
        """Gets the release of this Version.

        Core release version

        :return: The release of this Version.
        :rtype: str
        """
        ...
    
    @release.setter
    def release(self, release): # -> None:
        """Sets the release of this Version.

        Core release version

        :param release: The release of this Version.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def flywheel_release(self): # -> None:
        """Gets the flywheel_release of this Version.

        Flywheel installer image tag as informed by the installation recipe.env

        :return: The flywheel_release of this Version.
        :rtype: str
        """
        ...
    
    @flywheel_release.setter
    def flywheel_release(self, flywheel_release): # -> None:
        """Sets the flywheel_release of this Version.

        Flywheel installer image tag as informed by the installation recipe.env

        :param flywheel_release: The flywheel_release of this Version.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def cli_version(self): # -> None:
        """Gets the cli_version of this Version.

        Compatible CLI version for this server as informed by the installation recipe.env

        :return: The cli_version of this Version.
        :rtype: str
        """
        ...
    
    @cli_version.setter
    def cli_version(self, cli_version): # -> None:
        """Sets the cli_version of this Version.

        Compatible CLI version for this server as informed by the installation recipe.env

        :param cli_version: The cli_version of this Version.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def applied_checks(self): # -> None:
        """Gets the applied_checks of this Version.


        :return: The applied_checks of this Version.
        :rtype: object
        """
        ...
    
    @applied_checks.setter
    def applied_checks(self, applied_checks): # -> None:
        """Sets the applied_checks of this Version.


        :param applied_checks: The applied_checks of this Version.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def applied_fixes(self): # -> None:
        """Gets the applied_fixes of this Version.

        Collection of applied database fixes

        :return: The applied_fixes of this Version.
        :rtype: object
        """
        ...
    
    @applied_fixes.setter
    def applied_fixes(self, applied_fixes): # -> None:
        """Sets the applied_fixes of this Version.

        Collection of applied database fixes

        :param applied_fixes: The applied_fixes of this Version.  # noqa: E501
        :type: object
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


