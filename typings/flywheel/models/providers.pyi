"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class Providers:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, storage=..., compute=..., change_log=..., job_logs=..., access_log=...) -> None:
        """Providers - a model defined in Swagger"""
        ...
    
    @property
    def storage(self): # -> None:
        """Gets the storage of this Providers.


        :return: The storage of this Providers.
        :rtype: str
        """
        ...
    
    @storage.setter
    def storage(self, storage): # -> None:
        """Sets the storage of this Providers.


        :param storage: The storage of this Providers.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def compute(self): # -> None:
        """Gets the compute of this Providers.


        :return: The compute of this Providers.
        :rtype: str
        """
        ...
    
    @compute.setter
    def compute(self, compute): # -> None:
        """Sets the compute of this Providers.


        :param compute: The compute of this Providers.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def change_log(self): # -> None:
        """Gets the change_log of this Providers.


        :return: The change_log of this Providers.
        :rtype: str
        """
        ...
    
    @change_log.setter
    def change_log(self, change_log): # -> None:
        """Sets the change_log of this Providers.


        :param change_log: The change_log of this Providers.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def job_logs(self): # -> None:
        """Gets the job_logs of this Providers.


        :return: The job_logs of this Providers.
        :rtype: str
        """
        ...
    
    @job_logs.setter
    def job_logs(self, job_logs): # -> None:
        """Sets the job_logs of this Providers.


        :param job_logs: The job_logs of this Providers.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def access_log(self): # -> None:
        """Gets the access_log of this Providers.


        :return: The access_log of this Providers.
        :rtype: str
        """
        ...
    
    @access_log.setter
    def access_log(self, access_log): # -> None:
        """Sets the access_log of this Providers.


        :param access_log: The access_log of this Providers.  # noqa: E501
        :type: str
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


