"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class Features:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, api_enabled_gear_rules=..., auth0=..., audit_trail=..., azureml_integration=..., cold_job_logs=..., collections=..., copy_by_reference=..., core_api=..., crawler=..., cvat=..., data_views_non_21_cfr=..., default_viewer_apps=..., deid_log=..., deid_profile=..., dicom_web_uploader_non_21_cfr=..., dimse=..., elastic_search_primary=..., exchange=..., exchange_admin=..., external_routing=..., gear_access=..., google_analytics=..., healthcare_api=..., job_ask=..., job_prioritization=..., job_tickets=..., jupyter_integration=..., jupyterhub_external_storage=..., ldap_sync=..., multifactor_auth=..., multipart_signed_url=..., multiproject=..., ohif_multi_subject_view=..., ohif_meteor=..., ohif_react=..., ohif_react_beta=..., ohif_slice_order=..., ohif_v2_adhoc_indexing=..., ohif_v3=..., ohif_v3_beta=..., ohif_v3_default_app=..., ohif_v3_readonly=..., project_export=..., project_import=..., project_list_uses_stats=..., project_locking=..., reader_tasks=..., rts_sync=..., sentry_logging=..., session_templates_non_21_cfr=..., shared_projects=..., signed_url=..., study_task_status=..., tagging=..., tags_in_lists=..., task_manager_data_views=..., transform_search_fields=..., unsafe_login=..., url_access_apps=..., userpilot=..., validate_classification=..., engine_validate_classification=..., virus_scan=..., legacy_dicom_uploader=..., tasks_refactor=...) -> None:
        """Features - a model defined in Swagger"""
        ...
    
    @property
    def api_enabled_gear_rules(self): # -> None:
        """Gets the api_enabled_gear_rules of this Features.


        :return: The api_enabled_gear_rules of this Features.
        :rtype: bool
        """
        ...
    
    @api_enabled_gear_rules.setter
    def api_enabled_gear_rules(self, api_enabled_gear_rules): # -> None:
        """Sets the api_enabled_gear_rules of this Features.


        :param api_enabled_gear_rules: The api_enabled_gear_rules of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def auth0(self): # -> None:
        """Gets the auth0 of this Features.


        :return: The auth0 of this Features.
        :rtype: bool
        """
        ...
    
    @auth0.setter
    def auth0(self, auth0): # -> None:
        """Sets the auth0 of this Features.


        :param auth0: The auth0 of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def audit_trail(self): # -> None:
        """Gets the audit_trail of this Features.


        :return: The audit_trail of this Features.
        :rtype: bool
        """
        ...
    
    @audit_trail.setter
    def audit_trail(self, audit_trail): # -> None:
        """Sets the audit_trail of this Features.


        :param audit_trail: The audit_trail of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def azureml_integration(self): # -> None:
        """Gets the azureml_integration of this Features.


        :return: The azureml_integration of this Features.
        :rtype: bool
        """
        ...
    
    @azureml_integration.setter
    def azureml_integration(self, azureml_integration): # -> None:
        """Sets the azureml_integration of this Features.


        :param azureml_integration: The azureml_integration of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def cold_job_logs(self): # -> None:
        """Gets the cold_job_logs of this Features.


        :return: The cold_job_logs of this Features.
        :rtype: bool
        """
        ...
    
    @cold_job_logs.setter
    def cold_job_logs(self, cold_job_logs): # -> None:
        """Sets the cold_job_logs of this Features.


        :param cold_job_logs: The cold_job_logs of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def collections(self): # -> None:
        """Gets the collections of this Features.


        :return: The collections of this Features.
        :rtype: bool
        """
        ...
    
    @collections.setter
    def collections(self, collections): # -> None:
        """Sets the collections of this Features.


        :param collections: The collections of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def copy_by_reference(self): # -> None:
        """Gets the copy_by_reference of this Features.


        :return: The copy_by_reference of this Features.
        :rtype: bool
        """
        ...
    
    @copy_by_reference.setter
    def copy_by_reference(self, copy_by_reference): # -> None:
        """Sets the copy_by_reference of this Features.


        :param copy_by_reference: The copy_by_reference of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def core_api(self): # -> None:
        """Gets the core_api of this Features.


        :return: The core_api of this Features.
        :rtype: bool
        """
        ...
    
    @core_api.setter
    def core_api(self, core_api): # -> None:
        """Sets the core_api of this Features.


        :param core_api: The core_api of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def crawler(self): # -> None:
        """Gets the crawler of this Features.


        :return: The crawler of this Features.
        :rtype: bool
        """
        ...
    
    @crawler.setter
    def crawler(self, crawler): # -> None:
        """Sets the crawler of this Features.


        :param crawler: The crawler of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def cvat(self): # -> None:
        """Gets the cvat of this Features.


        :return: The cvat of this Features.
        :rtype: bool
        """
        ...
    
    @cvat.setter
    def cvat(self, cvat): # -> None:
        """Sets the cvat of this Features.


        :param cvat: The cvat of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def data_views_non_21_cfr(self): # -> None:
        """Gets the data_views_non_21_cfr of this Features.


        :return: The data_views_non_21_cfr of this Features.
        :rtype: bool
        """
        ...
    
    @data_views_non_21_cfr.setter
    def data_views_non_21_cfr(self, data_views_non_21_cfr): # -> None:
        """Sets the data_views_non_21_cfr of this Features.


        :param data_views_non_21_cfr: The data_views_non_21_cfr of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def default_viewer_apps(self): # -> None:
        """Gets the default_viewer_apps of this Features.


        :return: The default_viewer_apps of this Features.
        :rtype: bool
        """
        ...
    
    @default_viewer_apps.setter
    def default_viewer_apps(self, default_viewer_apps): # -> None:
        """Sets the default_viewer_apps of this Features.


        :param default_viewer_apps: The default_viewer_apps of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def deid_log(self): # -> None:
        """Gets the deid_log of this Features.


        :return: The deid_log of this Features.
        :rtype: bool
        """
        ...
    
    @deid_log.setter
    def deid_log(self, deid_log): # -> None:
        """Sets the deid_log of this Features.


        :param deid_log: The deid_log of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def deid_profile(self): # -> None:
        """Gets the deid_profile of this Features.


        :return: The deid_profile of this Features.
        :rtype: bool
        """
        ...
    
    @deid_profile.setter
    def deid_profile(self, deid_profile): # -> None:
        """Sets the deid_profile of this Features.


        :param deid_profile: The deid_profile of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def dicom_web_uploader_non_21_cfr(self): # -> None:
        """Gets the dicom_web_uploader_non_21_cfr of this Features.


        :return: The dicom_web_uploader_non_21_cfr of this Features.
        :rtype: bool
        """
        ...
    
    @dicom_web_uploader_non_21_cfr.setter
    def dicom_web_uploader_non_21_cfr(self, dicom_web_uploader_non_21_cfr): # -> None:
        """Sets the dicom_web_uploader_non_21_cfr of this Features.


        :param dicom_web_uploader_non_21_cfr: The dicom_web_uploader_non_21_cfr of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def dimse(self): # -> None:
        """Gets the dimse of this Features.


        :return: The dimse of this Features.
        :rtype: bool
        """
        ...
    
    @dimse.setter
    def dimse(self, dimse): # -> None:
        """Sets the dimse of this Features.


        :param dimse: The dimse of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def elastic_search_primary(self): # -> None:
        """Gets the elastic_search_primary of this Features.


        :return: The elastic_search_primary of this Features.
        :rtype: bool
        """
        ...
    
    @elastic_search_primary.setter
    def elastic_search_primary(self, elastic_search_primary): # -> None:
        """Sets the elastic_search_primary of this Features.


        :param elastic_search_primary: The elastic_search_primary of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def exchange(self): # -> None:
        """Gets the exchange of this Features.


        :return: The exchange of this Features.
        :rtype: bool
        """
        ...
    
    @exchange.setter
    def exchange(self, exchange): # -> None:
        """Sets the exchange of this Features.


        :param exchange: The exchange of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def exchange_admin(self): # -> None:
        """Gets the exchange_admin of this Features.


        :return: The exchange_admin of this Features.
        :rtype: bool
        """
        ...
    
    @exchange_admin.setter
    def exchange_admin(self, exchange_admin): # -> None:
        """Sets the exchange_admin of this Features.


        :param exchange_admin: The exchange_admin of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def external_routing(self): # -> None:
        """Gets the external_routing of this Features.


        :return: The external_routing of this Features.
        :rtype: bool
        """
        ...
    
    @external_routing.setter
    def external_routing(self, external_routing): # -> None:
        """Sets the external_routing of this Features.


        :param external_routing: The external_routing of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def gear_access(self): # -> None:
        """Gets the gear_access of this Features.


        :return: The gear_access of this Features.
        :rtype: bool
        """
        ...
    
    @gear_access.setter
    def gear_access(self, gear_access): # -> None:
        """Sets the gear_access of this Features.


        :param gear_access: The gear_access of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def google_analytics(self): # -> None:
        """Gets the google_analytics of this Features.


        :return: The google_analytics of this Features.
        :rtype: bool
        """
        ...
    
    @google_analytics.setter
    def google_analytics(self, google_analytics): # -> None:
        """Sets the google_analytics of this Features.


        :param google_analytics: The google_analytics of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def healthcare_api(self): # -> None:
        """Gets the healthcare_api of this Features.


        :return: The healthcare_api of this Features.
        :rtype: bool
        """
        ...
    
    @healthcare_api.setter
    def healthcare_api(self, healthcare_api): # -> None:
        """Sets the healthcare_api of this Features.


        :param healthcare_api: The healthcare_api of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def job_ask(self): # -> None:
        """Gets the job_ask of this Features.


        :return: The job_ask of this Features.
        :rtype: bool
        """
        ...
    
    @job_ask.setter
    def job_ask(self, job_ask): # -> None:
        """Sets the job_ask of this Features.


        :param job_ask: The job_ask of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def job_prioritization(self): # -> None:
        """Gets the job_prioritization of this Features.


        :return: The job_prioritization of this Features.
        :rtype: bool
        """
        ...
    
    @job_prioritization.setter
    def job_prioritization(self, job_prioritization): # -> None:
        """Sets the job_prioritization of this Features.


        :param job_prioritization: The job_prioritization of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def job_tickets(self): # -> None:
        """Gets the job_tickets of this Features.


        :return: The job_tickets of this Features.
        :rtype: bool
        """
        ...
    
    @job_tickets.setter
    def job_tickets(self, job_tickets): # -> None:
        """Sets the job_tickets of this Features.


        :param job_tickets: The job_tickets of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def jupyter_integration(self): # -> None:
        """Gets the jupyter_integration of this Features.


        :return: The jupyter_integration of this Features.
        :rtype: bool
        """
        ...
    
    @jupyter_integration.setter
    def jupyter_integration(self, jupyter_integration): # -> None:
        """Sets the jupyter_integration of this Features.


        :param jupyter_integration: The jupyter_integration of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def jupyterhub_external_storage(self): # -> None:
        """Gets the jupyterhub_external_storage of this Features.


        :return: The jupyterhub_external_storage of this Features.
        :rtype: bool
        """
        ...
    
    @jupyterhub_external_storage.setter
    def jupyterhub_external_storage(self, jupyterhub_external_storage): # -> None:
        """Sets the jupyterhub_external_storage of this Features.


        :param jupyterhub_external_storage: The jupyterhub_external_storage of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def ldap_sync(self): # -> None:
        """Gets the ldap_sync of this Features.


        :return: The ldap_sync of this Features.
        :rtype: bool
        """
        ...
    
    @ldap_sync.setter
    def ldap_sync(self, ldap_sync): # -> None:
        """Sets the ldap_sync of this Features.


        :param ldap_sync: The ldap_sync of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def multifactor_auth(self): # -> None:
        """Gets the multifactor_auth of this Features.


        :return: The multifactor_auth of this Features.
        :rtype: bool
        """
        ...
    
    @multifactor_auth.setter
    def multifactor_auth(self, multifactor_auth): # -> None:
        """Sets the multifactor_auth of this Features.


        :param multifactor_auth: The multifactor_auth of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def multipart_signed_url(self): # -> None:
        """Gets the multipart_signed_url of this Features.


        :return: The multipart_signed_url of this Features.
        :rtype: bool
        """
        ...
    
    @multipart_signed_url.setter
    def multipart_signed_url(self, multipart_signed_url): # -> None:
        """Sets the multipart_signed_url of this Features.


        :param multipart_signed_url: The multipart_signed_url of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def multiproject(self): # -> None:
        """Gets the multiproject of this Features.


        :return: The multiproject of this Features.
        :rtype: bool
        """
        ...
    
    @multiproject.setter
    def multiproject(self, multiproject): # -> None:
        """Sets the multiproject of this Features.


        :param multiproject: The multiproject of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def ohif_multi_subject_view(self): # -> None:
        """Gets the ohif_multi_subject_view of this Features.


        :return: The ohif_multi_subject_view of this Features.
        :rtype: bool
        """
        ...
    
    @ohif_multi_subject_view.setter
    def ohif_multi_subject_view(self, ohif_multi_subject_view): # -> None:
        """Sets the ohif_multi_subject_view of this Features.


        :param ohif_multi_subject_view: The ohif_multi_subject_view of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def ohif_meteor(self): # -> None:
        """Gets the ohif_meteor of this Features.


        :return: The ohif_meteor of this Features.
        :rtype: bool
        """
        ...
    
    @ohif_meteor.setter
    def ohif_meteor(self, ohif_meteor): # -> None:
        """Sets the ohif_meteor of this Features.


        :param ohif_meteor: The ohif_meteor of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def ohif_react(self): # -> None:
        """Gets the ohif_react of this Features.


        :return: The ohif_react of this Features.
        :rtype: bool
        """
        ...
    
    @ohif_react.setter
    def ohif_react(self, ohif_react): # -> None:
        """Sets the ohif_react of this Features.


        :param ohif_react: The ohif_react of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def ohif_react_beta(self): # -> None:
        """Gets the ohif_react_beta of this Features.


        :return: The ohif_react_beta of this Features.
        :rtype: bool
        """
        ...
    
    @ohif_react_beta.setter
    def ohif_react_beta(self, ohif_react_beta): # -> None:
        """Sets the ohif_react_beta of this Features.


        :param ohif_react_beta: The ohif_react_beta of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def ohif_slice_order(self): # -> None:
        """Gets the ohif_slice_order of this Features.


        :return: The ohif_slice_order of this Features.
        :rtype: str
        """
        ...
    
    @ohif_slice_order.setter
    def ohif_slice_order(self, ohif_slice_order): # -> None:
        """Sets the ohif_slice_order of this Features.


        :param ohif_slice_order: The ohif_slice_order of this Features.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def ohif_v2_adhoc_indexing(self): # -> None:
        """Gets the ohif_v2_adhoc_indexing of this Features.


        :return: The ohif_v2_adhoc_indexing of this Features.
        :rtype: bool
        """
        ...
    
    @ohif_v2_adhoc_indexing.setter
    def ohif_v2_adhoc_indexing(self, ohif_v2_adhoc_indexing): # -> None:
        """Sets the ohif_v2_adhoc_indexing of this Features.


        :param ohif_v2_adhoc_indexing: The ohif_v2_adhoc_indexing of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def ohif_v3(self): # -> None:
        """Gets the ohif_v3 of this Features.


        :return: The ohif_v3 of this Features.
        :rtype: bool
        """
        ...
    
    @ohif_v3.setter
    def ohif_v3(self, ohif_v3): # -> None:
        """Sets the ohif_v3 of this Features.


        :param ohif_v3: The ohif_v3 of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def ohif_v3_beta(self): # -> None:
        """Gets the ohif_v3_beta of this Features.


        :return: The ohif_v3_beta of this Features.
        :rtype: bool
        """
        ...
    
    @ohif_v3_beta.setter
    def ohif_v3_beta(self, ohif_v3_beta): # -> None:
        """Sets the ohif_v3_beta of this Features.


        :param ohif_v3_beta: The ohif_v3_beta of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def ohif_v3_default_app(self): # -> None:
        """Gets the ohif_v3_default_app of this Features.


        :return: The ohif_v3_default_app of this Features.
        :rtype: bool
        """
        ...
    
    @ohif_v3_default_app.setter
    def ohif_v3_default_app(self, ohif_v3_default_app): # -> None:
        """Sets the ohif_v3_default_app of this Features.


        :param ohif_v3_default_app: The ohif_v3_default_app of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def ohif_v3_readonly(self): # -> None:
        """Gets the ohif_v3_readonly of this Features.


        :return: The ohif_v3_readonly of this Features.
        :rtype: bool
        """
        ...
    
    @ohif_v3_readonly.setter
    def ohif_v3_readonly(self, ohif_v3_readonly): # -> None:
        """Sets the ohif_v3_readonly of this Features.


        :param ohif_v3_readonly: The ohif_v3_readonly of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def project_export(self): # -> None:
        """Gets the project_export of this Features.


        :return: The project_export of this Features.
        :rtype: bool
        """
        ...
    
    @project_export.setter
    def project_export(self, project_export): # -> None:
        """Sets the project_export of this Features.


        :param project_export: The project_export of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def project_import(self): # -> None:
        """Gets the project_import of this Features.


        :return: The project_import of this Features.
        :rtype: bool
        """
        ...
    
    @project_import.setter
    def project_import(self, project_import): # -> None:
        """Sets the project_import of this Features.


        :param project_import: The project_import of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def project_list_uses_stats(self): # -> None:
        """Gets the project_list_uses_stats of this Features.


        :return: The project_list_uses_stats of this Features.
        :rtype: bool
        """
        ...
    
    @project_list_uses_stats.setter
    def project_list_uses_stats(self, project_list_uses_stats): # -> None:
        """Sets the project_list_uses_stats of this Features.


        :param project_list_uses_stats: The project_list_uses_stats of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def project_locking(self): # -> None:
        """Gets the project_locking of this Features.


        :return: The project_locking of this Features.
        :rtype: bool
        """
        ...
    
    @project_locking.setter
    def project_locking(self, project_locking): # -> None:
        """Sets the project_locking of this Features.


        :param project_locking: The project_locking of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def reader_tasks(self): # -> None:
        """Gets the reader_tasks of this Features.


        :return: The reader_tasks of this Features.
        :rtype: bool
        """
        ...
    
    @reader_tasks.setter
    def reader_tasks(self, reader_tasks): # -> None:
        """Sets the reader_tasks of this Features.


        :param reader_tasks: The reader_tasks of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def rts_sync(self): # -> None:
        """Gets the rts_sync of this Features.


        :return: The rts_sync of this Features.
        :rtype: bool
        """
        ...
    
    @rts_sync.setter
    def rts_sync(self, rts_sync): # -> None:
        """Sets the rts_sync of this Features.


        :param rts_sync: The rts_sync of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def sentry_logging(self): # -> None:
        """Gets the sentry_logging of this Features.


        :return: The sentry_logging of this Features.
        :rtype: bool
        """
        ...
    
    @sentry_logging.setter
    def sentry_logging(self, sentry_logging): # -> None:
        """Sets the sentry_logging of this Features.


        :param sentry_logging: The sentry_logging of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def session_templates_non_21_cfr(self): # -> None:
        """Gets the session_templates_non_21_cfr of this Features.


        :return: The session_templates_non_21_cfr of this Features.
        :rtype: bool
        """
        ...
    
    @session_templates_non_21_cfr.setter
    def session_templates_non_21_cfr(self, session_templates_non_21_cfr): # -> None:
        """Sets the session_templates_non_21_cfr of this Features.


        :param session_templates_non_21_cfr: The session_templates_non_21_cfr of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def shared_projects(self): # -> None:
        """Gets the shared_projects of this Features.


        :return: The shared_projects of this Features.
        :rtype: bool
        """
        ...
    
    @shared_projects.setter
    def shared_projects(self, shared_projects): # -> None:
        """Sets the shared_projects of this Features.


        :param shared_projects: The shared_projects of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def signed_url(self): # -> None:
        """Gets the signed_url of this Features.


        :return: The signed_url of this Features.
        :rtype: bool
        """
        ...
    
    @signed_url.setter
    def signed_url(self, signed_url): # -> None:
        """Sets the signed_url of this Features.


        :param signed_url: The signed_url of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def study_task_status(self): # -> None:
        """Gets the study_task_status of this Features.


        :return: The study_task_status of this Features.
        :rtype: bool
        """
        ...
    
    @study_task_status.setter
    def study_task_status(self, study_task_status): # -> None:
        """Sets the study_task_status of this Features.


        :param study_task_status: The study_task_status of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def tagging(self): # -> None:
        """Gets the tagging of this Features.


        :return: The tagging of this Features.
        :rtype: bool
        """
        ...
    
    @tagging.setter
    def tagging(self, tagging): # -> None:
        """Sets the tagging of this Features.


        :param tagging: The tagging of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def tags_in_lists(self): # -> None:
        """Gets the tags_in_lists of this Features.


        :return: The tags_in_lists of this Features.
        :rtype: bool
        """
        ...
    
    @tags_in_lists.setter
    def tags_in_lists(self, tags_in_lists): # -> None:
        """Sets the tags_in_lists of this Features.


        :param tags_in_lists: The tags_in_lists of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def task_manager_data_views(self): # -> None:
        """Gets the task_manager_data_views of this Features.


        :return: The task_manager_data_views of this Features.
        :rtype: bool
        """
        ...
    
    @task_manager_data_views.setter
    def task_manager_data_views(self, task_manager_data_views): # -> None:
        """Sets the task_manager_data_views of this Features.


        :param task_manager_data_views: The task_manager_data_views of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def transform_search_fields(self): # -> None:
        """Gets the transform_search_fields of this Features.


        :return: The transform_search_fields of this Features.
        :rtype: bool
        """
        ...
    
    @transform_search_fields.setter
    def transform_search_fields(self, transform_search_fields): # -> None:
        """Sets the transform_search_fields of this Features.


        :param transform_search_fields: The transform_search_fields of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def unsafe_login(self): # -> None:
        """Gets the unsafe_login of this Features.


        :return: The unsafe_login of this Features.
        :rtype: bool
        """
        ...
    
    @unsafe_login.setter
    def unsafe_login(self, unsafe_login): # -> None:
        """Sets the unsafe_login of this Features.


        :param unsafe_login: The unsafe_login of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def url_access_apps(self): # -> None:
        """Gets the url_access_apps of this Features.


        :return: The url_access_apps of this Features.
        :rtype: bool
        """
        ...
    
    @url_access_apps.setter
    def url_access_apps(self, url_access_apps): # -> None:
        """Sets the url_access_apps of this Features.


        :param url_access_apps: The url_access_apps of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def userpilot(self): # -> None:
        """Gets the userpilot of this Features.


        :return: The userpilot of this Features.
        :rtype: bool
        """
        ...
    
    @userpilot.setter
    def userpilot(self, userpilot): # -> None:
        """Sets the userpilot of this Features.


        :param userpilot: The userpilot of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def validate_classification(self): # -> None:
        """Gets the validate_classification of this Features.


        :return: The validate_classification of this Features.
        :rtype: bool
        """
        ...
    
    @validate_classification.setter
    def validate_classification(self, validate_classification): # -> None:
        """Sets the validate_classification of this Features.


        :param validate_classification: The validate_classification of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def engine_validate_classification(self): # -> None:
        """Gets the engine_validate_classification of this Features.


        :return: The engine_validate_classification of this Features.
        :rtype: bool
        """
        ...
    
    @engine_validate_classification.setter
    def engine_validate_classification(self, engine_validate_classification): # -> None:
        """Sets the engine_validate_classification of this Features.


        :param engine_validate_classification: The engine_validate_classification of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def virus_scan(self): # -> None:
        """Gets the virus_scan of this Features.


        :return: The virus_scan of this Features.
        :rtype: bool
        """
        ...
    
    @virus_scan.setter
    def virus_scan(self, virus_scan): # -> None:
        """Sets the virus_scan of this Features.


        :param virus_scan: The virus_scan of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def legacy_dicom_uploader(self): # -> None:
        """Gets the legacy_dicom_uploader of this Features.


        :return: The legacy_dicom_uploader of this Features.
        :rtype: bool
        """
        ...
    
    @legacy_dicom_uploader.setter
    def legacy_dicom_uploader(self, legacy_dicom_uploader): # -> None:
        """Sets the legacy_dicom_uploader of this Features.


        :param legacy_dicom_uploader: The legacy_dicom_uploader of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def tasks_refactor(self): # -> None:
        """Gets the tasks_refactor of this Features.


        :return: The tasks_refactor of this Features.
        :rtype: bool
        """
        ...
    
    @tasks_refactor.setter
    def tasks_refactor(self, tasks_refactor): # -> None:
        """Sets the tasks_refactor of this Features.


        :param tasks_refactor: The tasks_refactor of this Features.  # noqa: E501
        :type: bool
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


