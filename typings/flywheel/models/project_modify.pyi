"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class ProjectModify:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, label=..., group=..., description=..., editions=..., providers=..., ldap_sync=..., info=..., copyable=..., copy_status=..., copy_failure_reason=...) -> None:
        """ProjectModify - a model defined in Swagger"""
        ...
    
    @property
    def label(self): # -> None:
        """Gets the label of this ProjectModify.


        :return: The label of this ProjectModify.
        :rtype: str
        """
        ...
    
    @label.setter
    def label(self, label): # -> None:
        """Sets the label of this ProjectModify.


        :param label: The label of this ProjectModify.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def group(self): # -> None:
        """Gets the group of this ProjectModify.


        :return: The group of this ProjectModify.
        :rtype: str
        """
        ...
    
    @group.setter
    def group(self, group): # -> None:
        """Sets the group of this ProjectModify.


        :param group: The group of this ProjectModify.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def description(self): # -> None:
        """Gets the description of this ProjectModify.


        :return: The description of this ProjectModify.
        :rtype: str
        """
        ...
    
    @description.setter
    def description(self, description): # -> None:
        """Sets the description of this ProjectModify.


        :param description: The description of this ProjectModify.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def editions(self): # -> None:
        """Gets the editions of this ProjectModify.


        :return: The editions of this ProjectModify.
        :rtype: Edition
        """
        ...
    
    @editions.setter
    def editions(self, editions): # -> None:
        """Sets the editions of this ProjectModify.


        :param editions: The editions of this ProjectModify.  # noqa: E501
        :type: Edition
        """
        ...
    
    @property
    def providers(self): # -> None:
        """Gets the providers of this ProjectModify.


        :return: The providers of this ProjectModify.
        :rtype: Providers
        """
        ...
    
    @providers.setter
    def providers(self, providers): # -> None:
        """Sets the providers of this ProjectModify.


        :param providers: The providers of this ProjectModify.  # noqa: E501
        :type: Providers
        """
        ...
    
    @property
    def ldap_sync(self): # -> None:
        """Gets the ldap_sync of this ProjectModify.


        :return: The ldap_sync of this ProjectModify.
        :rtype: LdapSyncStatus
        """
        ...
    
    @ldap_sync.setter
    def ldap_sync(self, ldap_sync): # -> None:
        """Sets the ldap_sync of this ProjectModify.


        :param ldap_sync: The ldap_sync of this ProjectModify.  # noqa: E501
        :type: LdapSyncStatus
        """
        ...
    
    @property
    def info(self): # -> None:
        """Gets the info of this ProjectModify.


        :return: The info of this ProjectModify.
        :rtype: object
        """
        ...
    
    @info.setter
    def info(self, info): # -> None:
        """Sets the info of this ProjectModify.


        :param info: The info of this ProjectModify.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def copyable(self): # -> None:
        """Gets the copyable of this ProjectModify.


        :return: The copyable of this ProjectModify.
        :rtype: bool
        """
        ...
    
    @copyable.setter
    def copyable(self, copyable): # -> None:
        """Sets the copyable of this ProjectModify.


        :param copyable: The copyable of this ProjectModify.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def copy_status(self): # -> None:
        """Gets the copy_status of this ProjectModify.


        :return: The copy_status of this ProjectModify.
        :rtype: CopyStatus
        """
        ...
    
    @copy_status.setter
    def copy_status(self, copy_status): # -> None:
        """Sets the copy_status of this ProjectModify.


        :param copy_status: The copy_status of this ProjectModify.  # noqa: E501
        :type: CopyStatus
        """
        ...
    
    @property
    def copy_failure_reason(self): # -> None:
        """Gets the copy_failure_reason of this ProjectModify.


        :return: The copy_failure_reason of this ProjectModify.
        :rtype: str
        """
        ...
    
    @copy_failure_reason.setter
    def copy_failure_reason(self, copy_failure_reason): # -> None:
        """Sets the copy_failure_reason of this ProjectModify.


        :param copy_failure_reason: The copy_failure_reason of this ProjectModify.  # noqa: E501
        :type: str
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


