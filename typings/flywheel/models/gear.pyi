"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class Gear:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, author=..., capabilities=..., maintainer=..., cite=..., config=..., custom=..., description=..., environment=..., flywheel=..., command=..., inputs=..., label=..., license=..., name=..., source=..., url=..., version=...) -> None:
        """Gear - a model defined in Swagger"""
        ...
    
    @property
    def author(self): # -> None:
        """Gets the author of this Gear.

        The author of this gear.

        :return: The author of this Gear.
        :rtype: str
        """
        ...
    
    @author.setter
    def author(self, author): # -> None:
        """Sets the author of this Gear.

        The author of this gear.

        :param author: The author of this Gear.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def capabilities(self): # -> None:
        """Gets the capabilities of this Gear.


        :return: The capabilities of this Gear.
        :rtype: list[str]
        """
        ...
    
    @capabilities.setter
    def capabilities(self, capabilities): # -> None:
        """Sets the capabilities of this Gear.


        :param capabilities: The capabilities of this Gear.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def maintainer(self): # -> None:
        """Gets the maintainer of this Gear.

        (optional) The maintainer of this gear. Can be used to distinguish the algorithm author from the gear maintainer.

        :return: The maintainer of this Gear.
        :rtype: str
        """
        ...
    
    @maintainer.setter
    def maintainer(self, maintainer): # -> None:
        """Sets the maintainer of this Gear.

        (optional) The maintainer of this gear. Can be used to distinguish the algorithm author from the gear maintainer.

        :param maintainer: The maintainer of this Gear.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def cite(self): # -> None:
        """Gets the cite of this Gear.

        (optional) Any citations relevant to the algorithm(s) or work present in the gear.

        :return: The cite of this Gear.
        :rtype: str
        """
        ...
    
    @cite.setter
    def cite(self, cite): # -> None:
        """Sets the cite of this Gear.

        (optional) Any citations relevant to the algorithm(s) or work present in the gear.

        :param cite: The cite of this Gear.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def config(self): # -> None:
        """Gets the config of this Gear.


        :return: The config of this Gear.
        :rtype: GearConfig
        """
        ...
    
    @config.setter
    def config(self, config): # -> None:
        """Sets the config of this Gear.


        :param config: The config of this Gear.  # noqa: E501
        :type: GearConfig
        """
        ...
    
    @property
    def custom(self): # -> None:
        """Gets the custom of this Gear.


        :return: The custom of this Gear.
        :rtype: GearCustom
        """
        ...
    
    @custom.setter
    def custom(self, custom): # -> None:
        """Sets the custom of this Gear.


        :param custom: The custom of this Gear.  # noqa: E501
        :type: GearCustom
        """
        ...
    
    @property
    def description(self): # -> None:
        """Gets the description of this Gear.

        A brief description of the gear's purpose. Ideally 1-4 sentences.

        :return: The description of this Gear.
        :rtype: str
        """
        ...
    
    @description.setter
    def description(self, description): # -> None:
        """Sets the description of this Gear.

        A brief description of the gear's purpose. Ideally 1-4 sentences.

        :param description: The description of this Gear.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def environment(self): # -> None:
        """Gets the environment of this Gear.


        :return: The environment of this Gear.
        :rtype: GearEnvironment
        """
        ...
    
    @environment.setter
    def environment(self, environment): # -> None:
        """Sets the environment of this Gear.


        :param environment: The environment of this Gear.  # noqa: E501
        :type: GearEnvironment
        """
        ...
    
    @property
    def flywheel(self): # -> None:
        """Gets the flywheel of this Gear.


        :return: The flywheel of this Gear.
        :rtype: object
        """
        ...
    
    @flywheel.setter
    def flywheel(self, flywheel): # -> None:
        """Sets the flywheel of this Gear.


        :param flywheel: The flywheel of this Gear.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def command(self): # -> None:
        """Gets the command of this Gear.

        If provided, the starting command for the gear, rather than /flywheel/v0/run. Will be templated according to the spec.

        :return: The command of this Gear.
        :rtype: str
        """
        ...
    
    @command.setter
    def command(self, command): # -> None:
        """Sets the command of this Gear.

        If provided, the starting command for the gear, rather than /flywheel/v0/run. Will be templated according to the spec.

        :param command: The command of this Gear.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def inputs(self): # -> None:
        """Gets the inputs of this Gear.


        :return: The inputs of this Gear.
        :rtype: GearInputs
        """
        ...
    
    @inputs.setter
    def inputs(self, inputs): # -> None:
        """Sets the inputs of this Gear.


        :param inputs: The inputs of this Gear.  # noqa: E501
        :type: GearInputs
        """
        ...
    
    @property
    def label(self): # -> None:
        """Gets the label of this Gear.

        The human-friendly name of this gear.

        :return: The label of this Gear.
        :rtype: str
        """
        ...
    
    @label.setter
    def label(self, label): # -> None:
        """Sets the label of this Gear.

        The human-friendly name of this gear.

        :param label: The label of this Gear.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def license(self): # -> None:
        """Gets the license of this Gear.

        Software license of the gear

        :return: The license of this Gear.
        :rtype: str
        """
        ...
    
    @license.setter
    def license(self, license): # -> None:
        """Sets the license of this Gear.

        Software license of the gear

        :param license: The license of this Gear.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def name(self): # -> None:
        """Gets the name of this Gear.

        The identification of this gear.

        :return: The name of this Gear.
        :rtype: str
        """
        ...
    
    @name.setter
    def name(self, name): # -> None:
        """Sets the name of this Gear.

        The identification of this gear.

        :param name: The name of this Gear.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def source(self): # -> None:
        """Gets the source of this Gear.

        A valid URI, or empty string.

        :return: The source of this Gear.
        :rtype: str
        """
        ...
    
    @source.setter
    def source(self, source): # -> None:
        """Sets the source of this Gear.

        A valid URI, or empty string.

        :param source: The source of this Gear.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def url(self): # -> None:
        """Gets the url of this Gear.

        A valid URI, or empty string.

        :return: The url of this Gear.
        :rtype: str
        """
        ...
    
    @url.setter
    def url(self, url): # -> None:
        """Sets the url of this Gear.

        A valid URI, or empty string.

        :param url: The url of this Gear.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def version(self): # -> None:
        """Gets the version of this Gear.

        A human-friendly string explaining the release version of this gear. Example: 3.2.1

        :return: The version of this Gear.
        :rtype: str
        """
        ...
    
    @version.setter
    def version(self, version): # -> None:
        """Sets the version of this Gear.

        A human-friendly string explaining the release version of this gear. Example: 3.2.1

        :param version: The version of this Gear.  # noqa: E501
        :type: str
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


