"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class EgressDevice:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, id=..., label=..., name=..., method=..., api_keys=..., api_key=..., key=..., type=..., version=..., errors=..., info=..., interval=..., last_seen=..., disabled=..., deleted=..., storage_config=..., modified=...) -> None:
        """EgressDevice - a model defined in Swagger"""
        ...
    
    @property
    def id(self): # -> None:
        """Gets the id of this EgressDevice.


        :return: The id of this EgressDevice.
        :rtype: str
        """
        ...
    
    @id.setter
    def id(self, id): # -> None:
        """Sets the id of this EgressDevice.


        :param id: The id of this EgressDevice.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def label(self): # -> None:
        """Gets the label of this EgressDevice.


        :return: The label of this EgressDevice.
        :rtype: str
        """
        ...
    
    @label.setter
    def label(self, label): # -> None:
        """Sets the label of this EgressDevice.


        :param label: The label of this EgressDevice.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def name(self): # -> None:
        """Gets the name of this EgressDevice.


        :return: The name of this EgressDevice.
        :rtype: str
        """
        ...
    
    @name.setter
    def name(self, name): # -> None:
        """Sets the name of this EgressDevice.


        :param name: The name of this EgressDevice.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def method(self): # -> None:
        """Gets the method of this EgressDevice.


        :return: The method of this EgressDevice.
        :rtype: str
        """
        ...
    
    @method.setter
    def method(self, method): # -> None:
        """Sets the method of this EgressDevice.


        :param method: The method of this EgressDevice.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def api_keys(self): # -> None:
        """Gets the api_keys of this EgressDevice.


        :return: The api_keys of this EgressDevice.
        :rtype: list[ApiKeyOutput]
        """
        ...
    
    @api_keys.setter
    def api_keys(self, api_keys): # -> None:
        """Sets the api_keys of this EgressDevice.


        :param api_keys: The api_keys of this EgressDevice.  # noqa: E501
        :type: list[ApiKeyOutput]
        """
        ...
    
    @property
    def api_key(self): # -> None:
        """Gets the api_key of this EgressDevice.


        :return: The api_key of this EgressDevice.
        :rtype: LegacyApiKeyOutput
        """
        ...
    
    @api_key.setter
    def api_key(self, api_key): # -> None:
        """Sets the api_key of this EgressDevice.


        :param api_key: The api_key of this EgressDevice.  # noqa: E501
        :type: LegacyApiKeyOutput
        """
        ...
    
    @property
    def key(self): # -> None:
        """Gets the key of this EgressDevice.


        :return: The key of this EgressDevice.
        :rtype: str
        """
        ...
    
    @key.setter
    def key(self, key): # -> None:
        """Sets the key of this EgressDevice.


        :param key: The key of this EgressDevice.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def type(self): # -> None:
        """Gets the type of this EgressDevice.


        :return: The type of this EgressDevice.
        :rtype: str
        """
        ...
    
    @type.setter
    def type(self, type): # -> None:
        """Sets the type of this EgressDevice.


        :param type: The type of this EgressDevice.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def version(self): # -> None:
        """Gets the version of this EgressDevice.


        :return: The version of this EgressDevice.
        :rtype: str
        """
        ...
    
    @version.setter
    def version(self, version): # -> None:
        """Sets the version of this EgressDevice.


        :param version: The version of this EgressDevice.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def errors(self): # -> None:
        """Gets the errors of this EgressDevice.


        :return: The errors of this EgressDevice.
        :rtype: list[str]
        """
        ...
    
    @errors.setter
    def errors(self, errors): # -> None:
        """Sets the errors of this EgressDevice.


        :param errors: The errors of this EgressDevice.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def info(self): # -> None:
        """Gets the info of this EgressDevice.


        :return: The info of this EgressDevice.
        :rtype: object
        """
        ...
    
    @info.setter
    def info(self, info): # -> None:
        """Sets the info of this EgressDevice.


        :param info: The info of this EgressDevice.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def interval(self): # -> None:
        """Gets the interval of this EgressDevice.


        :return: The interval of this EgressDevice.
        :rtype: int
        """
        ...
    
    @interval.setter
    def interval(self, interval): # -> None:
        """Sets the interval of this EgressDevice.


        :param interval: The interval of this EgressDevice.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def last_seen(self): # -> None:
        """Gets the last_seen of this EgressDevice.


        :return: The last_seen of this EgressDevice.
        :rtype: datetime
        """
        ...
    
    @last_seen.setter
    def last_seen(self, last_seen): # -> None:
        """Sets the last_seen of this EgressDevice.


        :param last_seen: The last_seen of this EgressDevice.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def disabled(self): # -> None:
        """Gets the disabled of this EgressDevice.


        :return: The disabled of this EgressDevice.
        :rtype: bool
        """
        ...
    
    @disabled.setter
    def disabled(self, disabled): # -> None:
        """Sets the disabled of this EgressDevice.


        :param disabled: The disabled of this EgressDevice.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def deleted(self): # -> None:
        """Gets the deleted of this EgressDevice.


        :return: The deleted of this EgressDevice.
        :rtype: datetime
        """
        ...
    
    @deleted.setter
    def deleted(self, deleted): # -> None:
        """Sets the deleted of this EgressDevice.


        :param deleted: The deleted of this EgressDevice.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def storage_config(self): # -> None:
        """Gets the storage_config of this EgressDevice.


        :return: The storage_config of this EgressDevice.
        :rtype: StorageStrategyConfig
        """
        ...
    
    @storage_config.setter
    def storage_config(self, storage_config): # -> None:
        """Sets the storage_config of this EgressDevice.


        :param storage_config: The storage_config of this EgressDevice.  # noqa: E501
        :type: StorageStrategyConfig
        """
        ...
    
    @property
    def modified(self): # -> None:
        """Gets the modified of this EgressDevice.


        :return: The modified of this EgressDevice.
        :rtype: datetime
        """
        ...
    
    @modified.setter
    def modified(self, modified): # -> None:
        """Sets the modified of this EgressDevice.


        :param modified: The modified of this EgressDevice.  # noqa: E501
        :type: datetime
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


