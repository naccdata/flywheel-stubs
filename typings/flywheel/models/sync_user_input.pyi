"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class SyncUserInput:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, email=..., given_name=..., family_name=..., disabled=..., auth0id=..., revision=..., role=...) -> None:
        """SyncUserInput - a model defined in Swagger"""
        ...
    
    @property
    def email(self): # -> None:
        """Gets the email of this SyncUserInput.


        :return: The email of this SyncUserInput.
        :rtype: str
        """
        ...
    
    @email.setter
    def email(self, email): # -> None:
        """Sets the email of this SyncUserInput.


        :param email: The email of this SyncUserInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def given_name(self): # -> None:
        """Gets the given_name of this SyncUserInput.


        :return: The given_name of this SyncUserInput.
        :rtype: str
        """
        ...
    
    @given_name.setter
    def given_name(self, given_name): # -> None:
        """Sets the given_name of this SyncUserInput.


        :param given_name: The given_name of this SyncUserInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def family_name(self): # -> None:
        """Gets the family_name of this SyncUserInput.


        :return: The family_name of this SyncUserInput.
        :rtype: str
        """
        ...
    
    @family_name.setter
    def family_name(self, family_name): # -> None:
        """Sets the family_name of this SyncUserInput.


        :param family_name: The family_name of this SyncUserInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def disabled(self): # -> None:
        """Gets the disabled of this SyncUserInput.


        :return: The disabled of this SyncUserInput.
        :rtype: bool
        """
        ...
    
    @disabled.setter
    def disabled(self, disabled): # -> None:
        """Sets the disabled of this SyncUserInput.


        :param disabled: The disabled of this SyncUserInput.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def auth0id(self): # -> None:
        """Gets the auth0id of this SyncUserInput.


        :return: The auth0id of this SyncUserInput.
        :rtype: str
        """
        ...
    
    @auth0id.setter
    def auth0id(self, auth0id): # -> None:
        """Sets the auth0id of this SyncUserInput.


        :param auth0id: The auth0id of this SyncUserInput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def revision(self): # -> None:
        """Gets the revision of this SyncUserInput.


        :return: The revision of this SyncUserInput.
        :rtype: int
        """
        ...
    
    @revision.setter
    def revision(self, revision): # -> None:
        """Sets the revision of this SyncUserInput.


        :param revision: The revision of this SyncUserInput.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def role(self): # -> None:
        """Gets the role of this SyncUserInput.


        :return: The role of this SyncUserInput.
        :rtype: RoleType
        """
        ...
    
    @role.setter
    def role(self, role): # -> None:
        """Sets the role of this SyncUserInput.


        :param role: The role of this SyncUserInput.  # noqa: E501
        :type: RoleType
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


