"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class ReportUsage:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, project_label=..., group=..., project=..., session_count=..., center_job_count=..., group_job_count=..., total_job_count=..., center_compute_ms=..., group_compute_ms=..., total_compute_ms=..., center_storage_byte_day=..., center_storage_soft_deleted_byte_day=..., group_storage_byte_day=..., group_storage_soft_deleted_byte_day=..., total_storage_byte_day=..., total_storage_soft_deleted_byte_day=..., days=...) -> None:
        """ReportUsage - a model defined in Swagger"""
        ...
    
    @property
    def project_label(self): # -> None:
        """Gets the project_label of this ReportUsage.

        The project label

        :return: The project_label of this ReportUsage.
        :rtype: str
        """
        ...
    
    @project_label.setter
    def project_label(self, project_label): # -> None:
        """Sets the project_label of this ReportUsage.

        The project label

        :param project_label: The project_label of this ReportUsage.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def group(self): # -> None:
        """Gets the group of this ReportUsage.

        The group name/ID

        :return: The group of this ReportUsage.
        :rtype: str
        """
        ...
    
    @group.setter
    def group(self, group): # -> None:
        """Sets the group of this ReportUsage.

        The group name/ID

        :param group: The group of this ReportUsage.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def project(self): # -> None:
        """Gets the project of this ReportUsage.

        The project ID

        :return: The project of this ReportUsage.
        :rtype: str
        """
        ...
    
    @project.setter
    def project(self, project): # -> None:
        """Sets the project of this ReportUsage.

        The project ID

        :param project: The project of this ReportUsage.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def session_count(self): # -> None:
        """Gets the session_count of this ReportUsage.

        The number of sessions in the project on the last recorded day of the month

        :return: The session_count of this ReportUsage.
        :rtype: int
        """
        ...
    
    @session_count.setter
    def session_count(self, session_count): # -> None:
        """Sets the session_count of this ReportUsage.

        The number of sessions in the project on the last recorded day of the month

        :param session_count: The session_count of this ReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def center_job_count(self): # -> None:
        """Gets the center_job_count of this ReportUsage.

        The number of center-designated gear jobs run in this project during the month (billable to the center)

        :return: The center_job_count of this ReportUsage.
        :rtype: int
        """
        ...
    
    @center_job_count.setter
    def center_job_count(self, center_job_count): # -> None:
        """Sets the center_job_count of this ReportUsage.

        The number of center-designated gear jobs run in this project during the month (billable to the center)

        :param center_job_count: The center_job_count of this ReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def group_job_count(self): # -> None:
        """Gets the group_job_count of this ReportUsage.

        The number of non-center-designated (lab) gear jobs runin this project during the month (billable to the group)

        :return: The group_job_count of this ReportUsage.
        :rtype: int
        """
        ...
    
    @group_job_count.setter
    def group_job_count(self, group_job_count): # -> None:
        """Sets the group_job_count of this ReportUsage.

        The number of non-center-designated (lab) gear jobs runin this project during the month (billable to the group)

        :param group_job_count: The group_job_count of this ReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def total_job_count(self): # -> None:
        """Gets the total_job_count of this ReportUsage.

        The total number of gear jobs run in this project during the month

        :return: The total_job_count of this ReportUsage.
        :rtype: int
        """
        ...
    
    @total_job_count.setter
    def total_job_count(self, total_job_count): # -> None:
        """Sets the total_job_count of this ReportUsage.

        The total number of gear jobs run in this project during the month

        :param total_job_count: The total_job_count of this ReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def center_compute_ms(self): # -> None:
        """Gets the center_compute_ms of this ReportUsage.

        The compute time (in ms) used by center-designated jobs in this project during the month (billable to the center)

        :return: The center_compute_ms of this ReportUsage.
        :rtype: int
        """
        ...
    
    @center_compute_ms.setter
    def center_compute_ms(self, center_compute_ms): # -> None:
        """Sets the center_compute_ms of this ReportUsage.

        The compute time (in ms) used by center-designated jobs in this project during the month (billable to the center)

        :param center_compute_ms: The center_compute_ms of this ReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def group_compute_ms(self): # -> None:
        """Gets the group_compute_ms of this ReportUsage.

        The compute time (in ms) used by non-center-designated (lab) gear jobs in this project during the month (billable to the group)

        :return: The group_compute_ms of this ReportUsage.
        :rtype: int
        """
        ...
    
    @group_compute_ms.setter
    def group_compute_ms(self, group_compute_ms): # -> None:
        """Sets the group_compute_ms of this ReportUsage.

        The compute time (in ms) used by non-center-designated (lab) gear jobs in this project during the month (billable to the group)

        :param group_compute_ms: The group_compute_ms of this ReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def total_compute_ms(self): # -> None:
        """Gets the total_compute_ms of this ReportUsage.

        The total compute time (in ms) used by gear jobs in this project during the month

        :return: The total_compute_ms of this ReportUsage.
        :rtype: int
        """
        ...
    
    @total_compute_ms.setter
    def total_compute_ms(self, total_compute_ms): # -> None:
        """Sets the total_compute_ms of this ReportUsage.

        The total compute time (in ms) used by gear jobs in this project during the month

        :param total_compute_ms: The total_compute_ms of this ReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def center_storage_byte_day(self): # -> None:
        """Gets the center_storage_byte_day of this ReportUsage.

        The storage, in byte-days, used by files originating from devices or center-designated gears in this project during the month (billable to the center)

        :return: The center_storage_byte_day of this ReportUsage.
        :rtype: int
        """
        ...
    
    @center_storage_byte_day.setter
    def center_storage_byte_day(self, center_storage_byte_day): # -> None:
        """Sets the center_storage_byte_day of this ReportUsage.

        The storage, in byte-days, used by files originating from devices or center-designated gears in this project during the month (billable to the center)

        :param center_storage_byte_day: The center_storage_byte_day of this ReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def center_storage_soft_deleted_byte_day(self): # -> None:
        """Gets the center_storage_soft_deleted_byte_day of this ReportUsage.

        The storage, in byte-days, used by soft deleted files originating from devices or center-designated gears in this project during the month (billable to the center)

        :return: The center_storage_soft_deleted_byte_day of this ReportUsage.
        :rtype: int
        """
        ...
    
    @center_storage_soft_deleted_byte_day.setter
    def center_storage_soft_deleted_byte_day(self, center_storage_soft_deleted_byte_day): # -> None:
        """Sets the center_storage_soft_deleted_byte_day of this ReportUsage.

        The storage, in byte-days, used by soft deleted files originating from devices or center-designated gears in this project during the month (billable to the center)

        :param center_storage_soft_deleted_byte_day: The center_storage_soft_deleted_byte_day of this ReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def group_storage_byte_day(self): # -> None:
        """Gets the group_storage_byte_day of this ReportUsage.

        The storage, in byte-days, used by files not originating from devices or non-center-designated (lab) gears in this project during the month (billable to the group)

        :return: The group_storage_byte_day of this ReportUsage.
        :rtype: int
        """
        ...
    
    @group_storage_byte_day.setter
    def group_storage_byte_day(self, group_storage_byte_day): # -> None:
        """Sets the group_storage_byte_day of this ReportUsage.

        The storage, in byte-days, used by files not originating from devices or non-center-designated (lab) gears in this project during the month (billable to the group)

        :param group_storage_byte_day: The group_storage_byte_day of this ReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def group_storage_soft_deleted_byte_day(self): # -> None:
        """Gets the group_storage_soft_deleted_byte_day of this ReportUsage.

        The storage, in byte-days, used by soft deleted files not originating from devices or non-center-designated (lab) gears in this project during the month (billable to the group)

        :return: The group_storage_soft_deleted_byte_day of this ReportUsage.
        :rtype: int
        """
        ...
    
    @group_storage_soft_deleted_byte_day.setter
    def group_storage_soft_deleted_byte_day(self, group_storage_soft_deleted_byte_day): # -> None:
        """Sets the group_storage_soft_deleted_byte_day of this ReportUsage.

        The storage, in byte-days, used by soft deleted files not originating from devices or non-center-designated (lab) gears in this project during the month (billable to the group)

        :param group_storage_soft_deleted_byte_day: The group_storage_soft_deleted_byte_day of this ReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def total_storage_byte_day(self): # -> None:
        """Gets the total_storage_byte_day of this ReportUsage.

        The total storage, in byte-days, used by files in this project during the month

        :return: The total_storage_byte_day of this ReportUsage.
        :rtype: int
        """
        ...
    
    @total_storage_byte_day.setter
    def total_storage_byte_day(self, total_storage_byte_day): # -> None:
        """Sets the total_storage_byte_day of this ReportUsage.

        The total storage, in byte-days, used by files in this project during the month

        :param total_storage_byte_day: The total_storage_byte_day of this ReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def total_storage_soft_deleted_byte_day(self): # -> None:
        """Gets the total_storage_soft_deleted_byte_day of this ReportUsage.

        The total storage, in byte-days, used by soft deleted files in this project during the month

        :return: The total_storage_soft_deleted_byte_day of this ReportUsage.
        :rtype: int
        """
        ...
    
    @total_storage_soft_deleted_byte_day.setter
    def total_storage_soft_deleted_byte_day(self, total_storage_soft_deleted_byte_day): # -> None:
        """Sets the total_storage_soft_deleted_byte_day of this ReportUsage.

        The total storage, in byte-days, used by soft deleted files in this project during the month

        :param total_storage_soft_deleted_byte_day: The total_storage_soft_deleted_byte_day of this ReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def days(self): # -> None:
        """Gets the days of this ReportUsage.

        Number of days captured in this entry (normally the number of days in the month, unless the project was created in that month or it is the current month)

        :return: The days of this ReportUsage.
        :rtype: int
        """
        ...
    
    @days.setter
    def days(self, days): # -> None:
        """Sets the days of this ReportUsage.

        Number of days captured in this entry (normally the number of days in the month, unless the project was created in that month or it is the current month)

        :param days: The days of this ReportUsage.  # noqa: E501
        :type: int
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


