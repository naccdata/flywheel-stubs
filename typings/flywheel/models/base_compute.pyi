"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class BaseCompute:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, queue_threshold=..., max_compute=..., machine_type=..., disk_size=..., swap_size=..., preemptible=..., zone=..., region=..., tags=..., config_type=..., config_class=...) -> None:
        """BaseCompute - a model defined in Swagger"""
        ...
    
    @property
    def queue_threshold(self): # -> None:
        """Gets the queue_threshold of this BaseCompute.


        :return: The queue_threshold of this BaseCompute.
        :rtype: int
        """
        ...
    
    @queue_threshold.setter
    def queue_threshold(self, queue_threshold): # -> None:
        """Sets the queue_threshold of this BaseCompute.


        :param queue_threshold: The queue_threshold of this BaseCompute.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def max_compute(self): # -> None:
        """Gets the max_compute of this BaseCompute.


        :return: The max_compute of this BaseCompute.
        :rtype: int
        """
        ...
    
    @max_compute.setter
    def max_compute(self, max_compute): # -> None:
        """Sets the max_compute of this BaseCompute.


        :param max_compute: The max_compute of this BaseCompute.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def machine_type(self): # -> None:
        """Gets the machine_type of this BaseCompute.


        :return: The machine_type of this BaseCompute.
        :rtype: str
        """
        ...
    
    @machine_type.setter
    def machine_type(self, machine_type): # -> None:
        """Sets the machine_type of this BaseCompute.


        :param machine_type: The machine_type of this BaseCompute.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def disk_size(self): # -> None:
        """Gets the disk_size of this BaseCompute.


        :return: The disk_size of this BaseCompute.
        :rtype: int
        """
        ...
    
    @disk_size.setter
    def disk_size(self, disk_size): # -> None:
        """Sets the disk_size of this BaseCompute.


        :param disk_size: The disk_size of this BaseCompute.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def swap_size(self): # -> None:
        """Gets the swap_size of this BaseCompute.


        :return: The swap_size of this BaseCompute.
        :rtype: str
        """
        ...
    
    @swap_size.setter
    def swap_size(self, swap_size): # -> None:
        """Sets the swap_size of this BaseCompute.


        :param swap_size: The swap_size of this BaseCompute.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def preemptible(self): # -> None:
        """Gets the preemptible of this BaseCompute.


        :return: The preemptible of this BaseCompute.
        :rtype: bool
        """
        ...
    
    @preemptible.setter
    def preemptible(self, preemptible): # -> None:
        """Sets the preemptible of this BaseCompute.


        :param preemptible: The preemptible of this BaseCompute.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def zone(self): # -> None:
        """Gets the zone of this BaseCompute.


        :return: The zone of this BaseCompute.
        :rtype: str
        """
        ...
    
    @zone.setter
    def zone(self, zone): # -> None:
        """Sets the zone of this BaseCompute.


        :param zone: The zone of this BaseCompute.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def region(self): # -> None:
        """Gets the region of this BaseCompute.


        :return: The region of this BaseCompute.
        :rtype: str
        """
        ...
    
    @region.setter
    def region(self, region): # -> None:
        """Sets the region of this BaseCompute.


        :param region: The region of this BaseCompute.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def tags(self): # -> None:
        """Gets the tags of this BaseCompute.


        :return: The tags of this BaseCompute.
        :rtype: object
        """
        ...
    
    @tags.setter
    def tags(self, tags): # -> None:
        """Sets the tags of this BaseCompute.


        :param tags: The tags of this BaseCompute.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def config_type(self): # -> None:
        """Gets the config_type of this BaseCompute.


        :return: The config_type of this BaseCompute.
        :rtype: str
        """
        ...
    
    @config_type.setter
    def config_type(self, config_type): # -> None:
        """Sets the config_type of this BaseCompute.


        :param config_type: The config_type of this BaseCompute.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def config_class(self): # -> None:
        """Gets the config_class of this BaseCompute.


        :return: The config_class of this BaseCompute.
        :rtype: str
        """
        ...
    
    @config_class.setter
    def config_class(self, config_class): # -> None:
        """Sets the config_class of this BaseCompute.


        :param config_class: The config_class of this BaseCompute.  # noqa: E501
        :type: str
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


