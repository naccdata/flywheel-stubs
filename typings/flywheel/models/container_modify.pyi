"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class ContainerModify:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, parent=..., label=..., description=..., columns=..., file_spec=..., filter=..., group_by=..., include_ids=..., include_labels=..., error_column=..., missing_data_strategy=..., sort=..., id=..., origin=...) -> None:
        """ContainerModify - a model defined in Swagger"""
        ...
    
    @property
    def parent(self): # -> None:
        """Gets the parent of this ContainerModify.

        The parent container id

        :return: The parent of this ContainerModify.
        :rtype: str
        """
        ...
    
    @parent.setter
    def parent(self, parent): # -> None:
        """Sets the parent of this ContainerModify.

        The parent container id

        :param parent: The parent of this ContainerModify.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def label(self): # -> None:
        """Gets the label of this ContainerModify.

        Application-specific label

        :return: The label of this ContainerModify.
        :rtype: str
        """
        ...
    
    @label.setter
    def label(self, label): # -> None:
        """Sets the label of this ContainerModify.

        Application-specific label

        :param label: The label of this ContainerModify.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def description(self): # -> None:
        """Gets the description of this ContainerModify.


        :return: The description of this ContainerModify.
        :rtype: str
        """
        ...
    
    @description.setter
    def description(self, description): # -> None:
        """Sets the description of this ContainerModify.


        :param description: The description of this ContainerModify.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def columns(self): # -> None:
        """Gets the columns of this ContainerModify.


        :return: The columns of this ContainerModify.
        :rtype: list[Column]
        """
        ...
    
    @columns.setter
    def columns(self, columns): # -> None:
        """Sets the columns of this ContainerModify.


        :param columns: The columns of this ContainerModify.  # noqa: E501
        :type: list[Column]
        """
        ...
    
    @property
    def file_spec(self): # -> None:
        """Gets the file_spec of this ContainerModify.


        :return: The file_spec of this ContainerModify.
        :rtype: DataViewFileSpec
        """
        ...
    
    @file_spec.setter
    def file_spec(self, file_spec): # -> None:
        """Sets the file_spec of this ContainerModify.


        :param file_spec: The file_spec of this ContainerModify.  # noqa: E501
        :type: DataViewFileSpec
        """
        ...
    
    @property
    def filter(self): # -> None:
        """Gets the filter of this ContainerModify.


        :return: The filter of this ContainerModify.
        :rtype: str
        """
        ...
    
    @filter.setter
    def filter(self, filter): # -> None:
        """Sets the filter of this ContainerModify.


        :param filter: The filter of this ContainerModify.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def group_by(self): # -> None:
        """Gets the group_by of this ContainerModify.


        :return: The group_by of this ContainerModify.
        :rtype: GroupBy
        """
        ...
    
    @group_by.setter
    def group_by(self, group_by): # -> None:
        """Sets the group_by of this ContainerModify.


        :param group_by: The group_by of this ContainerModify.  # noqa: E501
        :type: GroupBy
        """
        ...
    
    @property
    def include_ids(self): # -> None:
        """Gets the include_ids of this ContainerModify.

        Whether or not to include container id fields. Default is true

        :return: The include_ids of this ContainerModify.
        :rtype: bool
        """
        ...
    
    @include_ids.setter
    def include_ids(self, include_ids): # -> None:
        """Sets the include_ids of this ContainerModify.

        Whether or not to include container id fields. Default is true

        :param include_ids: The include_ids of this ContainerModify.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def include_labels(self): # -> None:
        """Gets the include_labels of this ContainerModify.

        Whether or not to include container label fields. Default is true

        :return: The include_labels of this ContainerModify.
        :rtype: bool
        """
        ...
    
    @include_labels.setter
    def include_labels(self, include_labels): # -> None:
        """Sets the include_labels of this ContainerModify.

        Whether or not to include container label fields. Default is true

        :param include_labels: The include_labels of this ContainerModify.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def error_column(self): # -> None:
        """Gets the error_column of this ContainerModify.

        Whether or not to include errors column. Default is true

        :return: The error_column of this ContainerModify.
        :rtype: bool
        """
        ...
    
    @error_column.setter
    def error_column(self, error_column): # -> None:
        """Sets the error_column of this ContainerModify.

        Whether or not to include errors column. Default is true

        :param error_column: The error_column of this ContainerModify.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def missing_data_strategy(self): # -> None:
        """Gets the missing_data_strategy of this ContainerModify.


        :return: The missing_data_strategy of this ContainerModify.
        :rtype: DataStrategy
        """
        ...
    
    @missing_data_strategy.setter
    def missing_data_strategy(self, missing_data_strategy): # -> None:
        """Sets the missing_data_strategy of this ContainerModify.


        :param missing_data_strategy: The missing_data_strategy of this ContainerModify.  # noqa: E501
        :type: DataStrategy
        """
        ...
    
    @property
    def sort(self): # -> None:
        """Gets the sort of this ContainerModify.

        Opt out of sorting results by setting value to false

        :return: The sort of this ContainerModify.
        :rtype: bool
        """
        ...
    
    @sort.setter
    def sort(self, sort): # -> None:
        """Sets the sort of this ContainerModify.

        Opt out of sorting results by setting value to false

        :param sort: The sort of this ContainerModify.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def id(self): # -> None:
        """Gets the id of this ContainerModify.

        Unique database ID

        :return: The id of this ContainerModify.
        :rtype: str
        """
        ...
    
    @id.setter
    def id(self, id): # -> None:
        """Sets the id of this ContainerModify.

        Unique database ID

        :param id: The id of this ContainerModify.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def origin(self): # -> None:
        """Gets the origin of this ContainerModify.


        :return: The origin of this ContainerModify.
        :rtype: Origin
        """
        ...
    
    @origin.setter
    def origin(self, origin): # -> None:
        """Sets the origin of this ContainerModify.


        :param origin: The origin of this ContainerModify.  # noqa: E501
        :type: Origin
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


