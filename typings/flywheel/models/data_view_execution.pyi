"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class DataViewExecution:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, id=..., created=..., modified=..., timestamp_ran=..., user_id=..., project_id=..., state=..., data_view_label=..., data_view_id=..., storage_file_id=..., task_id=..., expires_on=..., revision=...) -> None:
        """DataViewExecution - a model defined in Swagger"""
        ...
    
    @property
    def id(self): # -> None:
        """Gets the id of this DataViewExecution.

        Unique database ID

        :return: The id of this DataViewExecution.
        :rtype: str
        """
        ...
    
    @id.setter
    def id(self, id): # -> None:
        """Sets the id of this DataViewExecution.

        Unique database ID

        :param id: The id of this DataViewExecution.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def created(self): # -> None:
        """Gets the created of this DataViewExecution.

        Creation time (automatically set)

        :return: The created of this DataViewExecution.
        :rtype: datetime
        """
        ...
    
    @created.setter
    def created(self, created): # -> None:
        """Sets the created of this DataViewExecution.

        Creation time (automatically set)

        :param created: The created of this DataViewExecution.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def modified(self): # -> None:
        """Gets the modified of this DataViewExecution.

        Last modification time (automatically updated)

        :return: The modified of this DataViewExecution.
        :rtype: datetime
        """
        ...
    
    @modified.setter
    def modified(self, modified): # -> None:
        """Sets the modified of this DataViewExecution.

        Last modification time (automatically updated)

        :param modified: The modified of this DataViewExecution.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def timestamp_ran(self): # -> None:
        """Gets the timestamp_ran of this DataViewExecution.


        :return: The timestamp_ran of this DataViewExecution.
        :rtype: datetime
        """
        ...
    
    @timestamp_ran.setter
    def timestamp_ran(self, timestamp_ran): # -> None:
        """Sets the timestamp_ran of this DataViewExecution.


        :param timestamp_ran: The timestamp_ran of this DataViewExecution.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def user_id(self): # -> None:
        """Gets the user_id of this DataViewExecution.

        Database ID of a user

        :return: The user_id of this DataViewExecution.
        :rtype: str
        """
        ...
    
    @user_id.setter
    def user_id(self, user_id): # -> None:
        """Sets the user_id of this DataViewExecution.

        Database ID of a user

        :param user_id: The user_id of this DataViewExecution.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def project_id(self): # -> None:
        """Gets the project_id of this DataViewExecution.

        Unique database ID

        :return: The project_id of this DataViewExecution.
        :rtype: str
        """
        ...
    
    @project_id.setter
    def project_id(self, project_id): # -> None:
        """Sets the project_id of this DataViewExecution.

        Unique database ID

        :param project_id: The project_id of this DataViewExecution.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def state(self): # -> None:
        """Gets the state of this DataViewExecution.


        :return: The state of this DataViewExecution.
        :rtype: DataViewExecutionState
        """
        ...
    
    @state.setter
    def state(self, state): # -> None:
        """Sets the state of this DataViewExecution.


        :param state: The state of this DataViewExecution.  # noqa: E501
        :type: DataViewExecutionState
        """
        ...
    
    @property
    def data_view_label(self): # -> None:
        """Gets the data_view_label of this DataViewExecution.


        :return: The data_view_label of this DataViewExecution.
        :rtype: str
        """
        ...
    
    @data_view_label.setter
    def data_view_label(self, data_view_label): # -> None:
        """Sets the data_view_label of this DataViewExecution.


        :param data_view_label: The data_view_label of this DataViewExecution.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def data_view_id(self): # -> None:
        """Gets the data_view_id of this DataViewExecution.

        Unique database ID

        :return: The data_view_id of this DataViewExecution.
        :rtype: str
        """
        ...
    
    @data_view_id.setter
    def data_view_id(self, data_view_id): # -> None:
        """Sets the data_view_id of this DataViewExecution.

        Unique database ID

        :param data_view_id: The data_view_id of this DataViewExecution.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def storage_file_id(self): # -> None:
        """Gets the storage_file_id of this DataViewExecution.

        Unique database ID

        :return: The storage_file_id of this DataViewExecution.
        :rtype: str
        """
        ...
    
    @storage_file_id.setter
    def storage_file_id(self, storage_file_id): # -> None:
        """Sets the storage_file_id of this DataViewExecution.

        Unique database ID

        :param storage_file_id: The storage_file_id of this DataViewExecution.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def task_id(self): # -> None:
        """Gets the task_id of this DataViewExecution.

        Hyphen-separated universally unique identifier

        :return: The task_id of this DataViewExecution.
        :rtype: str
        """
        ...
    
    @task_id.setter
    def task_id(self, task_id): # -> None:
        """Sets the task_id of this DataViewExecution.

        Hyphen-separated universally unique identifier

        :param task_id: The task_id of this DataViewExecution.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def expires_on(self): # -> None:
        """Gets the expires_on of this DataViewExecution.


        :return: The expires_on of this DataViewExecution.
        :rtype: datetime
        """
        ...
    
    @expires_on.setter
    def expires_on(self, expires_on): # -> None:
        """Sets the expires_on of this DataViewExecution.


        :param expires_on: The expires_on of this DataViewExecution.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def revision(self): # -> None:
        """Gets the revision of this DataViewExecution.

        An incremental document revision number

        :return: The revision of this DataViewExecution.
        :rtype: int
        """
        ...
    
    @revision.setter
    def revision(self, revision): # -> None:
        """Sets the revision of this DataViewExecution.

        An incremental document revision number

        :param revision: The revision of this DataViewExecution.  # noqa: E501
        :type: int
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


