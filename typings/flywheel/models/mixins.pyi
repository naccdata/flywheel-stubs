"""
This type stub file was generated by pyright.
"""

class ContextBase:
    def __init__(self) -> None:
        ...
    


class ContainerBase:
    def __init__(self) -> None:
        ...
    
    def update(self, *args, **kwargs): # -> Any:
        """Update container using dictionary or kwargs"""
        ...
    
    def reload(self): # -> Any:
        """Reload the object from the server, and return the result"""
        ...
    
    def ref(self): # -> dict[str, Finder | Any]:
        """Make a container reference"""
        ...
    
    @property
    def local_created(self): # -> Any | None:
        """Get the creation time in the local timezone"""
        ...
    
    @property
    def local_modified(self): # -> Any | None:
        """Get the modification time in the local timezone"""
        ...
    
    def __getattr__(self, name): # -> Finder | Any:
        ...
    


class InfoMethods:
    def replace_info(self, info):
        """Fully replace this object's info with the provided value"""
        ...
    
    def update_info(self, *args, **kwargs):
        """Update the info with the passed in arguments"""
        ...
    
    def delete_info(self, *args):
        """Delete the info fields listed in args"""
        ...
    


class TagMethods:
    def add_tag(self, tag, **kwargs):
        """Add the given tag to the object"""
        ...
    
    def rename_tag(self, tag, new_tag, **kwargs):
        """Rename tag on object"""
        ...
    
    def delete_tag(self, tag, **kwargs):
        """Delete tag from object"""
        ...
    


class NoteMethods:
    def add_note(self, message, **kwargs):
        """Add the given note to the object"""
        ...
    
    def delete_note(self, note_id, **kwargs):
        """Delete the given note on the object"""
        ...
    


class PermissionMethods:
    def add_permission(self, permission, **kwargs):
        """Add a permission to a container"""
        ...
    
    def get_permission(self, user_id, **kwargs):
        """Get a user's permission from container"""
        ...
    
    def update_permission(self, user_id, permission, **kwargs):
        """Update a user's permission on container"""
        ...
    
    def delete_permission(self, user_id, **kwargs):
        """Delete a user's permission from container"""
        ...
    


class DownloadMethods:
    def download_tar(self, dest_file, include_types=..., exclude_types=..., **kwargs):
        """Download the container as a tarball to dest_file.

        :param str dest_file: (required) The destination file on disk
        :param list include_types: The optional list of types to include in the download (e.g. ['nifti'])
        :param list exclude_types: The optional list of types to exclude from the download (e.g. ['dicom'])
        :return: A summary of the download
        """
        ...
    
    def download_zip(self, dest_file, include_types=..., exclude_types=..., **kwargs):
        """Download the container as a zip archive to dest_file.

        :param str dest_file: (required) The destination file on disk
        :param list include_types: The optional list of types to include in the download (e.g. ['nifti'])
        :param list exclude_types: The optional list of types to exclude from the download (e.g. ['dicom'])
        :return: A summary of the download
        """
        ...
    


class AnalysisMethods:
    def add_analysis(self, *args, **kwargs): # -> None:
        """Add an analysis to this container"""
        ...
    


class FileMethods:
    def upload_file(self, file, **kwargs):
        """Upload a file to a container"""
        ...
    
    def download_file(self, file_name, dest_file, **kwargs):
        """Download file to the given path"""
        ...
    
    def get_file_download_url(self, file_name, **kwargs):
        """Get a ticketed download url for the file"""
        ...
    
    def read_file(self, file_name, **kwargs):
        """Read the contents of the file"""
        ...
    
    def update_file(self, file_name, *args, **kwargs):
        """Update a file's type and/or modality"""
        ...
    
    def delete_file(self, file_name, **kwargs):
        """Delete file from the container"""
        ...
    
    def replace_file_info(self, file_name, info, **kwargs):
        """Fully replace this file's info with the provided value"""
        ...
    
    def update_file_info(self, file_name, *args, **kwargs):
        """Update the file's info with the passed in arguments"""
        ...
    
    def delete_file_info(self, file_name, *args, **kwargs):
        """Delete the file info fields listed in args"""
        ...
    
    def replace_file_classification(self, file_name, classification, modality=..., **kwargs):
        """Fully replace a file's modality and classification"""
        ...
    
    def update_file_classification(self, file_name, classification, **kwargs):
        """Update a file's classification"""
        ...
    
    def delete_file_classification(self, file_name, classification, **kwargs):
        """Delete a file's classification fields"""
        ...
    
    def get_files(self, **kwargs): # -> Any | None:
        """Get the files collection, retrieving the container if necessary"""
        ...
    
    def get_file(self, name, **kwargs): # -> Any | None:
        """Get the first file entry with the given name, retrieving the container if necessary"""
        ...
    
    def file_ref(self, name, **kwargs): # -> Any | None:
        """Get a reference to the given file"""
        ...
    
    def get_file_zip_info(self, file_name, **kwargs):
        """Get zip member information for this file"""
        ...
    
    def download_file_zip_member(self, file_name, member_path, dest_file, **kwargs):
        """Download file's zip member to the given path"""
        ...
    
    def read_file_zip_member(self, file_name, member_path, **kwargs):
        """Read contents of file's zip member"""
        ...
    


class TimestampMethods:
    @property
    def local_timestamp(self):
        """Get the timestamp in the local timezone"""
        ...
    
    @property
    def original_timestamp(self): # -> None:
        """Get the timestamp in the original timezone"""
        ...
    


class GroupMixin(ContainerBase, TagMethods, PermissionMethods):
    container_type = ...
    child_types = ...
    def add_project(self, *args, **kwargs): # -> Any | None:
        """Add a project to this group"""
        ...
    
    def add_permission_template(self, permission, **kwargs): # -> Any:
        """Add a permission template for a group"""
        ...
    
    def get_permission_template(self, user_id, **kwargs): # -> Any:
        """Get a user's permission template for a group"""
        ...
    
    def update_permission_template(self, user_id, permission, **kwargs): # -> Any:
        """Update a user's permission template for a group"""
        ...
    
    def delete_permission_template(self, user_id, **kwargs): # -> Any:
        """Delete a user's permission template from a group"""
        ...
    


class ProjectMixin(ContainerBase, TagMethods, NoteMethods, PermissionMethods, FileMethods, InfoMethods, DownloadMethods, AnalysisMethods):
    container_type = ...
    child_types = ...
    def add_subject(self, *args, **kwargs): # -> Any | None:
        """Add a subject to this project"""
        ...
    
    def add_session(self, *args, **kwargs): # -> Any | None:
        """Add a session to this project"""
        ...
    


class SubjectMixin(ContainerBase, TagMethods, NoteMethods, FileMethods, InfoMethods, AnalysisMethods):
    container_type = ...
    child_types = ...
    def add_session(self, *args, **kwargs): # -> Any | None:
        """Add a session to this subject"""
        ...
    


class SessionMixin(ContainerBase, TagMethods, NoteMethods, FileMethods, InfoMethods, TimestampMethods, DownloadMethods, AnalysisMethods):
    container_type = ...
    child_types = ...
    def add_acquisition(self, *args, **kwargs): # -> Any | None:
        """Add a acquisition to this session"""
        ...
    
    @property
    def age_years(self): # -> Any:
        ...
    
    @property
    def age_months(self): # -> Any:
        ...
    
    @property
    def age_weeks(self): # -> Any:
        ...
    
    @property
    def age_days(self): # -> Any:
        ...
    


class AcquisitionMixin(ContainerBase, NoteMethods, TagMethods, FileMethods, InfoMethods, TimestampMethods, DownloadMethods, AnalysisMethods):
    container_type = ...
    child_types = ...


class AnalysisMixin(ContainerBase, NoteMethods, TagMethods, FileMethods, InfoMethods, DownloadMethods):
    container_type = ...
    child_types = ...
    _file_group = ...
    def upload_file(self, file, **kwargs): # -> Any:
        """Upload an output file to analysis"""
        ...
    
    def upload_output(self, file, **kwargs): # -> Any:
        """Upload an output file to analysis"""
        ...
    
    def update_file_info(self, file_name, *args, **kwargs): # -> Any:
        """Update the file's info with the passed in arguments"""
        ...
    


class CollectionMixin(ContainerBase, NoteMethods, TagMethods, FileMethods, InfoMethods):
    container_type = ...
    child_types = ...
    def add_sessions(self, *args, **kwargs): # -> Any:
        ...
    
    def add_acquisitions(self, *args, **kwargs): # -> Any:
        ...
    


class FileMixin(ContainerBase):
    container_type = ...
    child_types = ...
    def __init__(self) -> None:
        ...
    
    @property
    def parent(self, **kwargs): # -> Any:
        ...
    
    @property
    def local_replaced(self): # -> Any | None:
        """Get the replaced timestamp in local time"""
        ...
    
    def url(self, **kwargs): # -> Any:
        """Get a ticketed download url for the file"""
        ...
    
    def download(self, dest_file, **kwargs): # -> Any:
        """Download file to the given path"""
        ...
    
    def read(self, **kwargs): # -> Any:
        """Read the contents of the file"""
        ...
    
    def replace_info(self, info, **kwargs): # -> Any:
        """Fully replace this file's info with the provided value"""
        ...
    
    def update_info(self, *args, **kwargs): # -> Any:
        """Update the file's info with the passed in arguments"""
        ...
    
    def delete_info(self, *args, **kwargs): # -> Any:
        """Delete the file info fields listed in args"""
        ...
    
    def update(self, *args, **kwargs): # -> Any:
        """Update a file's type and/or modality"""
        ...
    
    def replace_classification(self, classification, modality=..., **kwargs): # -> Any:
        """Fully replace a file's modality and classification"""
        ...
    
    def update_classification(self, classification, **kwargs): # -> Any:
        """Update a file's classification"""
        ...
    
    def delete_classification(self, classification, **kwargs): # -> Any:
        """Delete a file's classification fields"""
        ...
    
    def set_tags(self, tags, **kwargs): # -> Any:
        """Set the tags list on the file"""
        ...
    
    def add_tags(self, tags, **kwargs): # -> Any:
        """Add the tags to the tags list on the file"""
        ...
    
    def add_tag(self, tag, **kwargs): # -> Any:
        """Add the given tag to the file"""
        ...
    
    def rename_tag(self, tag, new_tag, **kwargs): # -> Any:
        """Rename tag on file"""
        ...
    
    def delete_tag(self, tag, **kwargs): # -> Any:
        """Delete tag from file"""
        ...
    
    def ref(self): # -> Any:
        """Make a file reference"""
        ...
    
    def reload(self, **kwargs): # -> Any:
        """Reload the file."""
        ...
    
    def get_zip_info(self, **kwargs): # -> Any:
        """Get zip member information for this file"""
        ...
    
    def download_zip_member(self, member_path, dest_file, **kwargs): # -> Any:
        """Download file's zip member to the given path"""
        ...
    
    def read_zip_member(self, member_path, **kwargs): # -> Any:
        """Read contents of file's zip member"""
        ...
    


class JobMixin(ContainerBase):
    container_type = ...
    child_types = ...
    def change_state(self, new_state, **kwargs): # -> Any:
        """Change the state of the job to new_state"""
        ...
    
    def get_logs(self, **kwargs): # -> Any:
        """Get the job log entries"""
        ...
    
    def print_logs(self, file=..., **kwargs): # -> None:
        """Print logs to file (or stdout, if file is not specified)"""
        ...
    
    def update_priority(self, priority, **kwargs): # -> Any:
        """Update priority of jobs"""
        ...
    


class ResolverOutputMixin:
    ...


class SearchResponseMixin:
    ...


class BatchProposalMixin(ContextBase):
    """Batch mixin that provides run/cancel shorthand"""
    def run(self, **kwargs):
        """Execute the batch proposal"""
        ...
    


class BatchMixin(ContextBase):
    """Batch mixin that provides cancel shorthand"""
    def cancel(self, **kwargs):
        """Cancel the batch proposal and any associated jobs"""
        ...
    


