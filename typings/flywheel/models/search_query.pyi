"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class SearchQuery:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, return_type=..., structured_query=..., search_string=..., filters=..., all_data=..., sort=..., size=...) -> None:
        """SearchQuery - a model defined in Swagger"""
        ...
    
    @property
    def return_type(self): # -> None:
        """Gets the return_type of this SearchQuery.

        Sets the type of search results to return

        :return: The return_type of this SearchQuery.
        :rtype: SearchReturnType
        """
        ...
    
    @return_type.setter
    def return_type(self, return_type): # -> None:
        """Sets the return_type of this SearchQuery.

        Sets the type of search results to return

        :param return_type: The return_type of this SearchQuery.  # noqa: E501
        :type: SearchReturnType
        """
        ...
    
    @property
    def structured_query(self): # -> None:
        """Gets the structured_query of this SearchQuery.

        Represents structured query language search

        :return: The structured_query of this SearchQuery.
        :rtype: str
        """
        ...
    
    @structured_query.setter
    def structured_query(self, structured_query): # -> None:
        """Sets the structured_query of this SearchQuery.

        Represents structured query language search

        :param structured_query: The structured_query of this SearchQuery.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def search_string(self): # -> None:
        """Gets the search_string of this SearchQuery.

        Represents the plain text search query

        :return: The search_string of this SearchQuery.
        :rtype: str
        """
        ...
    
    @search_string.setter
    def search_string(self, search_string): # -> None:
        """Sets the search_string of this SearchQuery.

        Represents the plain text search query

        :param search_string: The search_string of this SearchQuery.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def filters(self): # -> None:
        """Gets the filters of this SearchQuery.

        See https://www.elastic.co/guide/en/elasticsearch/reference/current/term-level-queries.html

        :return: The filters of this SearchQuery.
        :rtype: list[object]
        """
        ...
    
    @filters.setter
    def filters(self, filters): # -> None:
        """Sets the filters of this SearchQuery.

        See https://www.elastic.co/guide/en/elasticsearch/reference/current/term-level-queries.html

        :param filters: The filters of this SearchQuery.  # noqa: E501
        :type: list[object]
        """
        ...
    
    @property
    def all_data(self): # -> None:
        """Gets the all_data of this SearchQuery.

        When set will include all data that the user does not have access to read

        :return: The all_data of this SearchQuery.
        :rtype: bool
        """
        ...
    
    @all_data.setter
    def all_data(self, all_data): # -> None:
        """Sets the all_data of this SearchQuery.

        When set will include all data that the user does not have access to read

        :param all_data: The all_data of this SearchQuery.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def sort(self): # -> None:
        """Gets the sort of this SearchQuery.


        :return: The sort of this SearchQuery.
        :rtype: Sort
        """
        ...
    
    @sort.setter
    def sort(self, sort): # -> None:
        """Sets the sort of this SearchQuery.


        :param sort: The sort of this SearchQuery.  # noqa: E501
        :type: Sort
        """
        ...
    
    @property
    def size(self): # -> None:
        """Gets the size of this SearchQuery.


        :return: The size of this SearchQuery.
        :rtype: int
        """
        ...
    
    @size.setter
    def size(self, size): # -> None:
        """Sets the size of this SearchQuery.


        :param size: The size of this SearchQuery.  # noqa: E501
        :type: int
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


