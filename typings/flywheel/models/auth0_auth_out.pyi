"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class Auth0AuthOut:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, client_id=..., domain=..., audience=..., claim_namespace=..., jwks=..., options=..., cookie_domain=...) -> None:
        """Auth0AuthOut - a model defined in Swagger"""
        ...
    
    @property
    def client_id(self): # -> None:
        """Gets the client_id of this Auth0AuthOut.


        :return: The client_id of this Auth0AuthOut.
        :rtype: str
        """
        ...
    
    @client_id.setter
    def client_id(self, client_id): # -> None:
        """Sets the client_id of this Auth0AuthOut.


        :param client_id: The client_id of this Auth0AuthOut.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def domain(self): # -> None:
        """Gets the domain of this Auth0AuthOut.


        :return: The domain of this Auth0AuthOut.
        :rtype: str
        """
        ...
    
    @domain.setter
    def domain(self, domain): # -> None:
        """Sets the domain of this Auth0AuthOut.


        :param domain: The domain of this Auth0AuthOut.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def audience(self): # -> None:
        """Gets the audience of this Auth0AuthOut.


        :return: The audience of this Auth0AuthOut.
        :rtype: list[str]
        """
        ...
    
    @audience.setter
    def audience(self, audience): # -> None:
        """Sets the audience of this Auth0AuthOut.


        :param audience: The audience of this Auth0AuthOut.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def claim_namespace(self): # -> None:
        """Gets the claim_namespace of this Auth0AuthOut.


        :return: The claim_namespace of this Auth0AuthOut.
        :rtype: str
        """
        ...
    
    @claim_namespace.setter
    def claim_namespace(self, claim_namespace): # -> None:
        """Sets the claim_namespace of this Auth0AuthOut.


        :param claim_namespace: The claim_namespace of this Auth0AuthOut.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def jwks(self): # -> None:
        """Gets the jwks of this Auth0AuthOut.


        :return: The jwks of this Auth0AuthOut.
        :rtype: dict(str, object)
        """
        ...
    
    @jwks.setter
    def jwks(self, jwks): # -> None:
        """Sets the jwks of this Auth0AuthOut.


        :param jwks: The jwks of this Auth0AuthOut.  # noqa: E501
        :type: dict(str, object)
        """
        ...
    
    @property
    def options(self): # -> None:
        """Gets the options of this Auth0AuthOut.


        :return: The options of this Auth0AuthOut.
        :rtype: Auth0OptionsOut
        """
        ...
    
    @options.setter
    def options(self, options): # -> None:
        """Sets the options of this Auth0AuthOut.


        :param options: The options of this Auth0AuthOut.  # noqa: E501
        :type: Auth0OptionsOut
        """
        ...
    
    @property
    def cookie_domain(self): # -> None:
        """Gets the cookie_domain of this Auth0AuthOut.


        :return: The cookie_domain of this Auth0AuthOut.
        :rtype: str
        """
        ...
    
    @cookie_domain.setter
    def cookie_domain(self, cookie_domain): # -> None:
        """Sets the cookie_domain of this Auth0AuthOut.


        :param cookie_domain: The cookie_domain of this Auth0AuthOut.  # noqa: E501
        :type: str
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


