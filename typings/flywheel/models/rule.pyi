"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class Rule:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, project_id=..., gear_id=..., name=..., config=..., fixed_inputs=..., auto_update=..., any=..., all=..., _not=..., disabled=..., compute_provider_id=..., id=...) -> None:
        """Rule - a model defined in Swagger"""
        ...
    
    @property
    def project_id(self): # -> None:
        """Gets the project_id of this Rule.


        :return: The project_id of this Rule.
        :rtype: str
        """
        ...
    
    @project_id.setter
    def project_id(self, project_id): # -> None:
        """Sets the project_id of this Rule.


        :param project_id: The project_id of this Rule.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def gear_id(self): # -> None:
        """Gets the gear_id of this Rule.


        :return: The gear_id of this Rule.
        :rtype: str
        """
        ...
    
    @gear_id.setter
    def gear_id(self, gear_id): # -> None:
        """Sets the gear_id of this Rule.


        :param gear_id: The gear_id of this Rule.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def name(self): # -> None:
        """Gets the name of this Rule.


        :return: The name of this Rule.
        :rtype: str
        """
        ...
    
    @name.setter
    def name(self, name): # -> None:
        """Sets the name of this Rule.


        :param name: The name of this Rule.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def config(self): # -> None:
        """Gets the config of this Rule.


        :return: The config of this Rule.
        :rtype: object
        """
        ...
    
    @config.setter
    def config(self, config): # -> None:
        """Sets the config of this Rule.


        :param config: The config of this Rule.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def fixed_inputs(self): # -> None:
        """Gets the fixed_inputs of this Rule.


        :return: The fixed_inputs of this Rule.
        :rtype: list[JobInputsArrayItem]
        """
        ...
    
    @fixed_inputs.setter
    def fixed_inputs(self, fixed_inputs): # -> None:
        """Sets the fixed_inputs of this Rule.


        :param fixed_inputs: The fixed_inputs of this Rule.  # noqa: E501
        :type: list[JobInputsArrayItem]
        """
        ...
    
    @property
    def auto_update(self): # -> None:
        """Gets the auto_update of this Rule.


        :return: The auto_update of this Rule.
        :rtype: bool
        """
        ...
    
    @auto_update.setter
    def auto_update(self, auto_update): # -> None:
        """Sets the auto_update of this Rule.


        :param auto_update: The auto_update of this Rule.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def any(self): # -> None:
        """Gets the any of this Rule.


        :return: The any of this Rule.
        :rtype: list[RuleAny]
        """
        ...
    
    @any.setter
    def any(self, any): # -> None:
        """Sets the any of this Rule.


        :param any: The any of this Rule.  # noqa: E501
        :type: list[RuleAny]
        """
        ...
    
    @property
    def all(self): # -> None:
        """Gets the all of this Rule.


        :return: The all of this Rule.
        :rtype: list[RuleAny]
        """
        ...
    
    @all.setter
    def all(self, all): # -> None:
        """Sets the all of this Rule.


        :param all: The all of this Rule.  # noqa: E501
        :type: list[RuleAny]
        """
        ...
    
    @property
    def disabled(self): # -> None:
        """Gets the disabled of this Rule.


        :return: The disabled of this Rule.
        :rtype: bool
        """
        ...
    
    @disabled.setter
    def disabled(self, disabled): # -> None:
        """Sets the disabled of this Rule.


        :param disabled: The disabled of this Rule.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def compute_provider_id(self): # -> None:
        """Gets the compute_provider_id of this Rule.

        Unique database ID

        :return: The compute_provider_id of this Rule.
        :rtype: str
        """
        ...
    
    @compute_provider_id.setter
    def compute_provider_id(self, compute_provider_id): # -> None:
        """Sets the compute_provider_id of this Rule.

        Unique database ID

        :param compute_provider_id: The compute_provider_id of this Rule.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def id(self): # -> None:
        """Gets the id of this Rule.


        :return: The id of this Rule.
        :rtype: str
        """
        ...
    
    @id.setter
    def id(self, id): # -> None:
        """Sets the id of this Rule.


        :param id: The id of this Rule.  # noqa: E501
        :type: str
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


