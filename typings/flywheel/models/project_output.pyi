"""
This type stub file was generated by pyright.
"""

from .mixins import ProjectMixin

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class ProjectOutput(ProjectMixin):
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, id=..., label=..., description=..., group=..., parents=..., editions=..., providers=..., ldap_sync=..., permissions=..., files=..., info=..., info_exists=..., notes=..., tags=..., templates=..., join_origin=..., analyses=..., settings=..., locked=..., revision=..., modified=..., created=..., copyable=..., copy_status=..., copy_failure_reason=..., copy_of=..., original_copy_of=..., stats=...) -> None:
        """ProjectOutput - a model defined in Swagger"""
        ...
    
    @property
    def id(self): # -> None:
        """Gets the id of this ProjectOutput.


        :return: The id of this ProjectOutput.
        :rtype: str
        """
        ...
    
    @id.setter
    def id(self, id): # -> None:
        """Sets the id of this ProjectOutput.


        :param id: The id of this ProjectOutput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def label(self): # -> None:
        """Gets the label of this ProjectOutput.


        :return: The label of this ProjectOutput.
        :rtype: str
        """
        ...
    
    @label.setter
    def label(self, label): # -> None:
        """Sets the label of this ProjectOutput.


        :param label: The label of this ProjectOutput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def description(self): # -> None:
        """Gets the description of this ProjectOutput.


        :return: The description of this ProjectOutput.
        :rtype: str
        """
        ...
    
    @description.setter
    def description(self, description): # -> None:
        """Sets the description of this ProjectOutput.


        :param description: The description of this ProjectOutput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def group(self): # -> None:
        """Gets the group of this ProjectOutput.


        :return: The group of this ProjectOutput.
        :rtype: str
        """
        ...
    
    @group.setter
    def group(self, group): # -> None:
        """Sets the group of this ProjectOutput.


        :param group: The group of this ProjectOutput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def parents(self): # -> None:
        """Gets the parents of this ProjectOutput.


        :return: The parents of this ProjectOutput.
        :rtype: ProjectParents
        """
        ...
    
    @parents.setter
    def parents(self, parents): # -> None:
        """Sets the parents of this ProjectOutput.


        :param parents: The parents of this ProjectOutput.  # noqa: E501
        :type: ProjectParents
        """
        ...
    
    @property
    def editions(self): # -> None:
        """Gets the editions of this ProjectOutput.


        :return: The editions of this ProjectOutput.
        :rtype: Edition
        """
        ...
    
    @editions.setter
    def editions(self, editions): # -> None:
        """Sets the editions of this ProjectOutput.


        :param editions: The editions of this ProjectOutput.  # noqa: E501
        :type: Edition
        """
        ...
    
    @property
    def providers(self): # -> None:
        """Gets the providers of this ProjectOutput.


        :return: The providers of this ProjectOutput.
        :rtype: Providers
        """
        ...
    
    @providers.setter
    def providers(self, providers): # -> None:
        """Sets the providers of this ProjectOutput.


        :param providers: The providers of this ProjectOutput.  # noqa: E501
        :type: Providers
        """
        ...
    
    @property
    def ldap_sync(self): # -> None:
        """Gets the ldap_sync of this ProjectOutput.


        :return: The ldap_sync of this ProjectOutput.
        :rtype: LdapSyncStatus
        """
        ...
    
    @ldap_sync.setter
    def ldap_sync(self, ldap_sync): # -> None:
        """Sets the ldap_sync of this ProjectOutput.


        :param ldap_sync: The ldap_sync of this ProjectOutput.  # noqa: E501
        :type: LdapSyncStatus
        """
        ...
    
    @property
    def permissions(self): # -> None:
        """Gets the permissions of this ProjectOutput.


        :return: The permissions of this ProjectOutput.
        :rtype: list[RolePermission]
        """
        ...
    
    @permissions.setter
    def permissions(self, permissions): # -> None:
        """Sets the permissions of this ProjectOutput.


        :param permissions: The permissions of this ProjectOutput.  # noqa: E501
        :type: list[RolePermission]
        """
        ...
    
    @property
    def files(self): # -> None:
        """Gets the files of this ProjectOutput.


        :return: The files of this ProjectOutput.
        :rtype: list[FileOutput]
        """
        ...
    
    @files.setter
    def files(self, files): # -> None:
        """Sets the files of this ProjectOutput.


        :param files: The files of this ProjectOutput.  # noqa: E501
        :type: list[FileOutput]
        """
        ...
    
    @property
    def info(self): # -> None:
        """Gets the info of this ProjectOutput.


        :return: The info of this ProjectOutput.
        :rtype: object
        """
        ...
    
    @info.setter
    def info(self, info): # -> None:
        """Sets the info of this ProjectOutput.


        :param info: The info of this ProjectOutput.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def info_exists(self): # -> None:
        """Gets the info_exists of this ProjectOutput.


        :return: The info_exists of this ProjectOutput.
        :rtype: bool
        """
        ...
    
    @info_exists.setter
    def info_exists(self, info_exists): # -> None:
        """Sets the info_exists of this ProjectOutput.


        :param info_exists: The info_exists of this ProjectOutput.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def notes(self): # -> None:
        """Gets the notes of this ProjectOutput.


        :return: The notes of this ProjectOutput.
        :rtype: list[Note]
        """
        ...
    
    @notes.setter
    def notes(self, notes): # -> None:
        """Sets the notes of this ProjectOutput.


        :param notes: The notes of this ProjectOutput.  # noqa: E501
        :type: list[Note]
        """
        ...
    
    @property
    def tags(self): # -> None:
        """Gets the tags of this ProjectOutput.


        :return: The tags of this ProjectOutput.
        :rtype: list[str]
        """
        ...
    
    @tags.setter
    def tags(self, tags): # -> None:
        """Sets the tags of this ProjectOutput.


        :param tags: The tags of this ProjectOutput.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def templates(self): # -> None:
        """Gets the templates of this ProjectOutput.


        :return: The templates of this ProjectOutput.
        :rtype: list[ProjectTemplate]
        """
        ...
    
    @templates.setter
    def templates(self, templates): # -> None:
        """Sets the templates of this ProjectOutput.


        :param templates: The templates of this ProjectOutput.  # noqa: E501
        :type: list[ProjectTemplate]
        """
        ...
    
    @property
    def join_origin(self): # -> None:
        """Gets the join_origin of this ProjectOutput.


        :return: The join_origin of this ProjectOutput.
        :rtype: JoinOrigins
        """
        ...
    
    @join_origin.setter
    def join_origin(self, join_origin): # -> None:
        """Sets the join_origin of this ProjectOutput.


        :param join_origin: The join_origin of this ProjectOutput.  # noqa: E501
        :type: JoinOrigins
        """
        ...
    
    @property
    def analyses(self): # -> None:
        """Gets the analyses of this ProjectOutput.


        :return: The analyses of this ProjectOutput.
        :rtype: list[union[AnalysisOutput,AnalysisOutputInflatedJob]]
        """
        ...
    
    @analyses.setter
    def analyses(self, analyses): # -> None:
        """Sets the analyses of this ProjectOutput.


        :param analyses: The analyses of this ProjectOutput.  # noqa: E501
        :type: list[union[AnalysisOutput,AnalysisOutputInflatedJob]]
        """
        ...
    
    @property
    def settings(self): # -> None:
        """Gets the settings of this ProjectOutput.


        :return: The settings of this ProjectOutput.
        :rtype: ProjectSettingsOutput
        """
        ...
    
    @settings.setter
    def settings(self, settings): # -> None:
        """Sets the settings of this ProjectOutput.


        :param settings: The settings of this ProjectOutput.  # noqa: E501
        :type: ProjectSettingsOutput
        """
        ...
    
    @property
    def locked(self): # -> None:
        """Gets the locked of this ProjectOutput.


        :return: The locked of this ProjectOutput.
        :rtype: Locked
        """
        ...
    
    @locked.setter
    def locked(self, locked): # -> None:
        """Sets the locked of this ProjectOutput.


        :param locked: The locked of this ProjectOutput.  # noqa: E501
        :type: Locked
        """
        ...
    
    @property
    def revision(self): # -> None:
        """Gets the revision of this ProjectOutput.


        :return: The revision of this ProjectOutput.
        :rtype: int
        """
        ...
    
    @revision.setter
    def revision(self, revision): # -> None:
        """Sets the revision of this ProjectOutput.


        :param revision: The revision of this ProjectOutput.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def modified(self): # -> None:
        """Gets the modified of this ProjectOutput.


        :return: The modified of this ProjectOutput.
        :rtype: datetime
        """
        ...
    
    @modified.setter
    def modified(self, modified): # -> None:
        """Sets the modified of this ProjectOutput.


        :param modified: The modified of this ProjectOutput.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def created(self): # -> None:
        """Gets the created of this ProjectOutput.


        :return: The created of this ProjectOutput.
        :rtype: datetime
        """
        ...
    
    @created.setter
    def created(self, created): # -> None:
        """Sets the created of this ProjectOutput.


        :param created: The created of this ProjectOutput.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def copyable(self): # -> None:
        """Gets the copyable of this ProjectOutput.


        :return: The copyable of this ProjectOutput.
        :rtype: bool
        """
        ...
    
    @copyable.setter
    def copyable(self, copyable): # -> None:
        """Sets the copyable of this ProjectOutput.


        :param copyable: The copyable of this ProjectOutput.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def copy_status(self): # -> None:
        """Gets the copy_status of this ProjectOutput.


        :return: The copy_status of this ProjectOutput.
        :rtype: CopyStatus
        """
        ...
    
    @copy_status.setter
    def copy_status(self, copy_status): # -> None:
        """Sets the copy_status of this ProjectOutput.


        :param copy_status: The copy_status of this ProjectOutput.  # noqa: E501
        :type: CopyStatus
        """
        ...
    
    @property
    def copy_failure_reason(self): # -> None:
        """Gets the copy_failure_reason of this ProjectOutput.


        :return: The copy_failure_reason of this ProjectOutput.
        :rtype: str
        """
        ...
    
    @copy_failure_reason.setter
    def copy_failure_reason(self, copy_failure_reason): # -> None:
        """Sets the copy_failure_reason of this ProjectOutput.


        :param copy_failure_reason: The copy_failure_reason of this ProjectOutput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def copy_of(self): # -> None:
        """Gets the copy_of of this ProjectOutput.


        :return: The copy_of of this ProjectOutput.
        :rtype: str
        """
        ...
    
    @copy_of.setter
    def copy_of(self, copy_of): # -> None:
        """Sets the copy_of of this ProjectOutput.


        :param copy_of: The copy_of of this ProjectOutput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def original_copy_of(self): # -> None:
        """Gets the original_copy_of of this ProjectOutput.


        :return: The original_copy_of of this ProjectOutput.
        :rtype: str
        """
        ...
    
    @original_copy_of.setter
    def original_copy_of(self, original_copy_of): # -> None:
        """Sets the original_copy_of of this ProjectOutput.


        :param original_copy_of: The original_copy_of of this ProjectOutput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def stats(self): # -> None:
        """Gets the stats of this ProjectOutput.


        :return: The stats of this ProjectOutput.
        :rtype: ProjectStats
        """
        ...
    
    @stats.setter
    def stats(self, stats): # -> None:
        """Sets the stats of this ProjectOutput.


        :param stats: The stats of this ProjectOutput.  # noqa: E501
        :type: ProjectStats
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


