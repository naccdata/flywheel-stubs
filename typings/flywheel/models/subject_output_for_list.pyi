"""
This type stub file was generated by pyright.
"""

from .mixins import SubjectMixin

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class SubjectOutputForList(SubjectMixin):
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, id=..., project=..., created=..., date_of_birth=..., modified=..., revision=..., parents=..., permissions=..., cohort=..., mlset=..., type=..., species=..., strain=..., label=..., code=..., master_code=..., notes=..., tags=..., info=..., info_exists=..., state=..., files=..., analyses=..., join_origin=..., copy_of=..., original_copy_of=..., firstname=..., lastname=..., sex=..., age=..., race=..., ethnicity=...) -> None:
        """SubjectOutputForList - a model defined in Swagger"""
        ...
    
    @property
    def id(self): # -> None:
        """Gets the id of this SubjectOutputForList.


        :return: The id of this SubjectOutputForList.
        :rtype: str
        """
        ...
    
    @id.setter
    def id(self, id): # -> None:
        """Sets the id of this SubjectOutputForList.


        :param id: The id of this SubjectOutputForList.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def project(self): # -> None:
        """Gets the project of this SubjectOutputForList.


        :return: The project of this SubjectOutputForList.
        :rtype: str
        """
        ...
    
    @project.setter
    def project(self, project): # -> None:
        """Sets the project of this SubjectOutputForList.


        :param project: The project of this SubjectOutputForList.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def created(self): # -> None:
        """Gets the created of this SubjectOutputForList.


        :return: The created of this SubjectOutputForList.
        :rtype: datetime
        """
        ...
    
    @created.setter
    def created(self, created): # -> None:
        """Sets the created of this SubjectOutputForList.


        :param created: The created of this SubjectOutputForList.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def date_of_birth(self): # -> None:
        """Gets the date_of_birth of this SubjectOutputForList.


        :return: The date_of_birth of this SubjectOutputForList.
        :rtype: datetime
        """
        ...
    
    @date_of_birth.setter
    def date_of_birth(self, date_of_birth): # -> None:
        """Sets the date_of_birth of this SubjectOutputForList.


        :param date_of_birth: The date_of_birth of this SubjectOutputForList.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def modified(self): # -> None:
        """Gets the modified of this SubjectOutputForList.


        :return: The modified of this SubjectOutputForList.
        :rtype: datetime
        """
        ...
    
    @modified.setter
    def modified(self, modified): # -> None:
        """Sets the modified of this SubjectOutputForList.


        :param modified: The modified of this SubjectOutputForList.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def revision(self): # -> None:
        """Gets the revision of this SubjectOutputForList.


        :return: The revision of this SubjectOutputForList.
        :rtype: int
        """
        ...
    
    @revision.setter
    def revision(self, revision): # -> None:
        """Sets the revision of this SubjectOutputForList.


        :param revision: The revision of this SubjectOutputForList.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def parents(self): # -> None:
        """Gets the parents of this SubjectOutputForList.


        :return: The parents of this SubjectOutputForList.
        :rtype: SubjectParents
        """
        ...
    
    @parents.setter
    def parents(self, parents): # -> None:
        """Sets the parents of this SubjectOutputForList.


        :param parents: The parents of this SubjectOutputForList.  # noqa: E501
        :type: SubjectParents
        """
        ...
    
    @property
    def permissions(self): # -> None:
        """Gets the permissions of this SubjectOutputForList.


        :return: The permissions of this SubjectOutputForList.
        :rtype: list[RolePermission]
        """
        ...
    
    @permissions.setter
    def permissions(self, permissions): # -> None:
        """Sets the permissions of this SubjectOutputForList.


        :param permissions: The permissions of this SubjectOutputForList.  # noqa: E501
        :type: list[RolePermission]
        """
        ...
    
    @property
    def cohort(self): # -> None:
        """Gets the cohort of this SubjectOutputForList.


        :return: The cohort of this SubjectOutputForList.
        :rtype: Cohort
        """
        ...
    
    @cohort.setter
    def cohort(self, cohort): # -> None:
        """Sets the cohort of this SubjectOutputForList.


        :param cohort: The cohort of this SubjectOutputForList.  # noqa: E501
        :type: Cohort
        """
        ...
    
    @property
    def mlset(self): # -> None:
        """Gets the mlset of this SubjectOutputForList.


        :return: The mlset of this SubjectOutputForList.
        :rtype: MLType
        """
        ...
    
    @mlset.setter
    def mlset(self, mlset): # -> None:
        """Sets the mlset of this SubjectOutputForList.


        :param mlset: The mlset of this SubjectOutputForList.  # noqa: E501
        :type: MLType
        """
        ...
    
    @property
    def type(self): # -> None:
        """Gets the type of this SubjectOutputForList.


        :return: The type of this SubjectOutputForList.
        :rtype: str
        """
        ...
    
    @type.setter
    def type(self, type): # -> None:
        """Sets the type of this SubjectOutputForList.


        :param type: The type of this SubjectOutputForList.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def species(self): # -> None:
        """Gets the species of this SubjectOutputForList.


        :return: The species of this SubjectOutputForList.
        :rtype: str
        """
        ...
    
    @species.setter
    def species(self, species): # -> None:
        """Sets the species of this SubjectOutputForList.


        :param species: The species of this SubjectOutputForList.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def strain(self): # -> None:
        """Gets the strain of this SubjectOutputForList.


        :return: The strain of this SubjectOutputForList.
        :rtype: str
        """
        ...
    
    @strain.setter
    def strain(self, strain): # -> None:
        """Sets the strain of this SubjectOutputForList.


        :param strain: The strain of this SubjectOutputForList.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def label(self): # -> None:
        """Gets the label of this SubjectOutputForList.


        :return: The label of this SubjectOutputForList.
        :rtype: str
        """
        ...
    
    @label.setter
    def label(self, label): # -> None:
        """Sets the label of this SubjectOutputForList.


        :param label: The label of this SubjectOutputForList.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def code(self): # -> None:
        """Gets the code of this SubjectOutputForList.


        :return: The code of this SubjectOutputForList.
        :rtype: str
        """
        ...
    
    @code.setter
    def code(self, code): # -> None:
        """Sets the code of this SubjectOutputForList.


        :param code: The code of this SubjectOutputForList.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def master_code(self): # -> None:
        """Gets the master_code of this SubjectOutputForList.


        :return: The master_code of this SubjectOutputForList.
        :rtype: str
        """
        ...
    
    @master_code.setter
    def master_code(self, master_code): # -> None:
        """Sets the master_code of this SubjectOutputForList.


        :param master_code: The master_code of this SubjectOutputForList.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def notes(self): # -> None:
        """Gets the notes of this SubjectOutputForList.


        :return: The notes of this SubjectOutputForList.
        :rtype: list[Note]
        """
        ...
    
    @notes.setter
    def notes(self, notes): # -> None:
        """Sets the notes of this SubjectOutputForList.


        :param notes: The notes of this SubjectOutputForList.  # noqa: E501
        :type: list[Note]
        """
        ...
    
    @property
    def tags(self): # -> None:
        """Gets the tags of this SubjectOutputForList.


        :return: The tags of this SubjectOutputForList.
        :rtype: list[str]
        """
        ...
    
    @tags.setter
    def tags(self, tags): # -> None:
        """Sets the tags of this SubjectOutputForList.


        :param tags: The tags of this SubjectOutputForList.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def info(self): # -> None:
        """Gets the info of this SubjectOutputForList.


        :return: The info of this SubjectOutputForList.
        :rtype: object
        """
        ...
    
    @info.setter
    def info(self, info): # -> None:
        """Sets the info of this SubjectOutputForList.


        :param info: The info of this SubjectOutputForList.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def info_exists(self): # -> None:
        """Gets the info_exists of this SubjectOutputForList.


        :return: The info_exists of this SubjectOutputForList.
        :rtype: bool
        """
        ...
    
    @info_exists.setter
    def info_exists(self, info_exists): # -> None:
        """Sets the info_exists of this SubjectOutputForList.


        :param info_exists: The info_exists of this SubjectOutputForList.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def state(self): # -> None:
        """Gets the state of this SubjectOutputForList.


        :return: The state of this SubjectOutputForList.
        :rtype: SubjectState
        """
        ...
    
    @state.setter
    def state(self, state): # -> None:
        """Sets the state of this SubjectOutputForList.


        :param state: The state of this SubjectOutputForList.  # noqa: E501
        :type: SubjectState
        """
        ...
    
    @property
    def files(self): # -> None:
        """Gets the files of this SubjectOutputForList.


        :return: The files of this SubjectOutputForList.
        :rtype: list[FileListOutput]
        """
        ...
    
    @files.setter
    def files(self, files): # -> None:
        """Sets the files of this SubjectOutputForList.


        :param files: The files of this SubjectOutputForList.  # noqa: E501
        :type: list[FileListOutput]
        """
        ...
    
    @property
    def analyses(self): # -> None:
        """Gets the analyses of this SubjectOutputForList.


        :return: The analyses of this SubjectOutputForList.
        :rtype: list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]
        """
        ...
    
    @analyses.setter
    def analyses(self, analyses): # -> None:
        """Sets the analyses of this SubjectOutputForList.


        :param analyses: The analyses of this SubjectOutputForList.  # noqa: E501
        :type: list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]
        """
        ...
    
    @property
    def join_origin(self): # -> None:
        """Gets the join_origin of this SubjectOutputForList.


        :return: The join_origin of this SubjectOutputForList.
        :rtype: JoinOrigins
        """
        ...
    
    @join_origin.setter
    def join_origin(self, join_origin): # -> None:
        """Sets the join_origin of this SubjectOutputForList.


        :param join_origin: The join_origin of this SubjectOutputForList.  # noqa: E501
        :type: JoinOrigins
        """
        ...
    
    @property
    def copy_of(self): # -> None:
        """Gets the copy_of of this SubjectOutputForList.


        :return: The copy_of of this SubjectOutputForList.
        :rtype: str
        """
        ...
    
    @copy_of.setter
    def copy_of(self, copy_of): # -> None:
        """Sets the copy_of of this SubjectOutputForList.


        :param copy_of: The copy_of of this SubjectOutputForList.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def original_copy_of(self): # -> None:
        """Gets the original_copy_of of this SubjectOutputForList.


        :return: The original_copy_of of this SubjectOutputForList.
        :rtype: str
        """
        ...
    
    @original_copy_of.setter
    def original_copy_of(self, original_copy_of): # -> None:
        """Sets the original_copy_of of this SubjectOutputForList.


        :param original_copy_of: The original_copy_of of this SubjectOutputForList.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def firstname(self): # -> None:
        """Gets the firstname of this SubjectOutputForList.


        :return: The firstname of this SubjectOutputForList.
        :rtype: str
        """
        ...
    
    @firstname.setter
    def firstname(self, firstname): # -> None:
        """Sets the firstname of this SubjectOutputForList.


        :param firstname: The firstname of this SubjectOutputForList.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def lastname(self): # -> None:
        """Gets the lastname of this SubjectOutputForList.


        :return: The lastname of this SubjectOutputForList.
        :rtype: str
        """
        ...
    
    @lastname.setter
    def lastname(self, lastname): # -> None:
        """Sets the lastname of this SubjectOutputForList.


        :param lastname: The lastname of this SubjectOutputForList.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def sex(self): # -> None:
        """Gets the sex of this SubjectOutputForList.


        :return: The sex of this SubjectOutputForList.
        :rtype: str
        """
        ...
    
    @sex.setter
    def sex(self, sex): # -> None:
        """Sets the sex of this SubjectOutputForList.


        :param sex: The sex of this SubjectOutputForList.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def age(self): # -> None:
        """Gets the age of this SubjectOutputForList.


        :return: The age of this SubjectOutputForList.
        :rtype: int
        """
        ...
    
    @age.setter
    def age(self, age): # -> None:
        """Sets the age of this SubjectOutputForList.


        :param age: The age of this SubjectOutputForList.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def race(self): # -> None:
        """Gets the race of this SubjectOutputForList.


        :return: The race of this SubjectOutputForList.
        :rtype: str
        """
        ...
    
    @race.setter
    def race(self, race): # -> None:
        """Sets the race of this SubjectOutputForList.


        :param race: The race of this SubjectOutputForList.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def ethnicity(self): # -> None:
        """Gets the ethnicity of this SubjectOutputForList.


        :return: The ethnicity of this SubjectOutputForList.
        :rtype: str
        """
        ...
    
    @ethnicity.setter
    def ethnicity(self, ethnicity): # -> None:
        """Sets the ethnicity of this SubjectOutputForList.


        :param ethnicity: The ethnicity of this SubjectOutputForList.  # noqa: E501
        :type: str
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


