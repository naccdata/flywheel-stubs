"""
This type stub file was generated by pyright.
"""

from .mixins import CollectionMixin

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class CollectionOutput(CollectionMixin):
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, created=..., modified=..., label=..., description=..., info=..., id=..., curator=..., revision=..., notes=..., tags=..., analyses=..., permissions=..., join_origin=..., files=..., attachment_count=..., session_count=..., noncompliant_session_count=..., subject_count=...) -> None:
        """CollectionOutput - a model defined in Swagger"""
        ...
    
    @property
    def created(self): # -> None:
        """Gets the created of this CollectionOutput.


        :return: The created of this CollectionOutput.
        :rtype: datetime
        """
        ...
    
    @created.setter
    def created(self, created): # -> None:
        """Sets the created of this CollectionOutput.


        :param created: The created of this CollectionOutput.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def modified(self): # -> None:
        """Gets the modified of this CollectionOutput.


        :return: The modified of this CollectionOutput.
        :rtype: datetime
        """
        ...
    
    @modified.setter
    def modified(self, modified): # -> None:
        """Sets the modified of this CollectionOutput.


        :param modified: The modified of this CollectionOutput.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def label(self): # -> None:
        """Gets the label of this CollectionOutput.


        :return: The label of this CollectionOutput.
        :rtype: str
        """
        ...
    
    @label.setter
    def label(self, label): # -> None:
        """Sets the label of this CollectionOutput.


        :param label: The label of this CollectionOutput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def description(self): # -> None:
        """Gets the description of this CollectionOutput.


        :return: The description of this CollectionOutput.
        :rtype: str
        """
        ...
    
    @description.setter
    def description(self, description): # -> None:
        """Sets the description of this CollectionOutput.


        :param description: The description of this CollectionOutput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def info(self): # -> None:
        """Gets the info of this CollectionOutput.


        :return: The info of this CollectionOutput.
        :rtype: object
        """
        ...
    
    @info.setter
    def info(self, info): # -> None:
        """Sets the info of this CollectionOutput.


        :param info: The info of this CollectionOutput.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def id(self): # -> None:
        """Gets the id of this CollectionOutput.


        :return: The id of this CollectionOutput.
        :rtype: str
        """
        ...
    
    @id.setter
    def id(self, id): # -> None:
        """Sets the id of this CollectionOutput.


        :param id: The id of this CollectionOutput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def curator(self): # -> None:
        """Gets the curator of this CollectionOutput.


        :return: The curator of this CollectionOutput.
        :rtype: str
        """
        ...
    
    @curator.setter
    def curator(self, curator): # -> None:
        """Sets the curator of this CollectionOutput.


        :param curator: The curator of this CollectionOutput.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def revision(self): # -> None:
        """Gets the revision of this CollectionOutput.


        :return: The revision of this CollectionOutput.
        :rtype: int
        """
        ...
    
    @revision.setter
    def revision(self, revision): # -> None:
        """Sets the revision of this CollectionOutput.


        :param revision: The revision of this CollectionOutput.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def notes(self): # -> None:
        """Gets the notes of this CollectionOutput.


        :return: The notes of this CollectionOutput.
        :rtype: list[Note]
        """
        ...
    
    @notes.setter
    def notes(self, notes): # -> None:
        """Sets the notes of this CollectionOutput.


        :param notes: The notes of this CollectionOutput.  # noqa: E501
        :type: list[Note]
        """
        ...
    
    @property
    def tags(self): # -> None:
        """Gets the tags of this CollectionOutput.


        :return: The tags of this CollectionOutput.
        :rtype: list[str]
        """
        ...
    
    @tags.setter
    def tags(self, tags): # -> None:
        """Sets the tags of this CollectionOutput.


        :param tags: The tags of this CollectionOutput.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def analyses(self): # -> None:
        """Gets the analyses of this CollectionOutput.


        :return: The analyses of this CollectionOutput.
        :rtype: list[Analysis]
        """
        ...
    
    @analyses.setter
    def analyses(self, analyses): # -> None:
        """Sets the analyses of this CollectionOutput.


        :param analyses: The analyses of this CollectionOutput.  # noqa: E501
        :type: list[Analysis]
        """
        ...
    
    @property
    def permissions(self): # -> None:
        """Gets the permissions of this CollectionOutput.


        :return: The permissions of this CollectionOutput.
        :rtype: list[AccessPermission]
        """
        ...
    
    @permissions.setter
    def permissions(self, permissions): # -> None:
        """Sets the permissions of this CollectionOutput.


        :param permissions: The permissions of this CollectionOutput.  # noqa: E501
        :type: list[AccessPermission]
        """
        ...
    
    @property
    def join_origin(self): # -> None:
        """Gets the join_origin of this CollectionOutput.


        :return: The join_origin of this CollectionOutput.
        :rtype: JoinOrigins
        """
        ...
    
    @join_origin.setter
    def join_origin(self, join_origin): # -> None:
        """Sets the join_origin of this CollectionOutput.


        :param join_origin: The join_origin of this CollectionOutput.  # noqa: E501
        :type: JoinOrigins
        """
        ...
    
    @property
    def files(self): # -> None:
        """Gets the files of this CollectionOutput.


        :return: The files of this CollectionOutput.
        :rtype: list[FileOutput]
        """
        ...
    
    @files.setter
    def files(self, files): # -> None:
        """Sets the files of this CollectionOutput.


        :param files: The files of this CollectionOutput.  # noqa: E501
        :type: list[FileOutput]
        """
        ...
    
    @property
    def attachment_count(self): # -> None:
        """Gets the attachment_count of this CollectionOutput.


        :return: The attachment_count of this CollectionOutput.
        :rtype: int
        """
        ...
    
    @attachment_count.setter
    def attachment_count(self, attachment_count): # -> None:
        """Sets the attachment_count of this CollectionOutput.


        :param attachment_count: The attachment_count of this CollectionOutput.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def session_count(self): # -> None:
        """Gets the session_count of this CollectionOutput.


        :return: The session_count of this CollectionOutput.
        :rtype: int
        """
        ...
    
    @session_count.setter
    def session_count(self, session_count): # -> None:
        """Sets the session_count of this CollectionOutput.


        :param session_count: The session_count of this CollectionOutput.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def noncompliant_session_count(self): # -> None:
        """Gets the noncompliant_session_count of this CollectionOutput.


        :return: The noncompliant_session_count of this CollectionOutput.
        :rtype: int
        """
        ...
    
    @noncompliant_session_count.setter
    def noncompliant_session_count(self, noncompliant_session_count): # -> None:
        """Sets the noncompliant_session_count of this CollectionOutput.


        :param noncompliant_session_count: The noncompliant_session_count of this CollectionOutput.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def subject_count(self): # -> None:
        """Gets the subject_count of this CollectionOutput.


        :return: The subject_count of this CollectionOutput.
        :rtype: int
        """
        ...
    
    @subject_count.setter
    def subject_count(self, subject_count): # -> None:
        """Sets the subject_count of this CollectionOutput.


        :param subject_count: The subject_count of this CollectionOutput.  # noqa: E501
        :type: int
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


