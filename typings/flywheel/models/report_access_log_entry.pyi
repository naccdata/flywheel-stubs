"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class ReportAccessLogEntry:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, id=..., access_type=..., context=..., origin=..., actions=..., count=..., destination=..., first_access=..., last_access=..., role_id=..., role_ids=..., user_id=..., user_role_type=..., error=..., request_method=..., request_path=..., timestamp=...) -> None:
        """ReportAccessLogEntry - a model defined in Swagger"""
        ...
    
    @property
    def id(self): # -> None:
        """Gets the id of this ReportAccessLogEntry.

        The access log entry id

        :return: The id of this ReportAccessLogEntry.
        :rtype: str
        """
        ...
    
    @id.setter
    def id(self, id): # -> None:
        """Sets the id of this ReportAccessLogEntry.

        The access log entry id

        :param id: The id of this ReportAccessLogEntry.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def access_type(self): # -> None:
        """Gets the access_type of this ReportAccessLogEntry.

        A named field used in the access log report

        :return: The access_type of this ReportAccessLogEntry.
        :rtype: str
        """
        ...
    
    @access_type.setter
    def access_type(self, access_type): # -> None:
        """Sets the access_type of this ReportAccessLogEntry.

        A named field used in the access log report

        :param access_type: The access_type of this ReportAccessLogEntry.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def context(self): # -> None:
        """Gets the context of this ReportAccessLogEntry.


        :return: The context of this ReportAccessLogEntry.
        :rtype: ReportAccessLogContext
        """
        ...
    
    @context.setter
    def context(self, context): # -> None:
        """Sets the context of this ReportAccessLogEntry.


        :param context: The context of this ReportAccessLogEntry.  # noqa: E501
        :type: ReportAccessLogContext
        """
        ...
    
    @property
    def origin(self): # -> None:
        """Gets the origin of this ReportAccessLogEntry.


        :return: The origin of this ReportAccessLogEntry.
        :rtype: ReportAccessLogOrigin
        """
        ...
    
    @origin.setter
    def origin(self, origin): # -> None:
        """Sets the origin of this ReportAccessLogEntry.


        :param origin: The origin of this ReportAccessLogEntry.  # noqa: E501
        :type: ReportAccessLogOrigin
        """
        ...
    
    @property
    def actions(self): # -> None:
        """Gets the actions of this ReportAccessLogEntry.

        Array of actions

        :return: The actions of this ReportAccessLogEntry.
        :rtype: list[str]
        """
        ...
    
    @actions.setter
    def actions(self, actions): # -> None:
        """Sets the actions of this ReportAccessLogEntry.

        Array of actions

        :param actions: The actions of this ReportAccessLogEntry.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def count(self): # -> None:
        """Gets the count of this ReportAccessLogEntry.

        null

        :return: The count of this ReportAccessLogEntry.
        :rtype: int
        """
        ...
    
    @count.setter
    def count(self, count): # -> None:
        """Sets the count of this ReportAccessLogEntry.

        null

        :param count: The count of this ReportAccessLogEntry.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def destination(self): # -> None:
        """Gets the destination of this ReportAccessLogEntry.


        :return: The destination of this ReportAccessLogEntry.
        :rtype: object
        """
        ...
    
    @destination.setter
    def destination(self, destination): # -> None:
        """Sets the destination of this ReportAccessLogEntry.


        :param destination: The destination of this ReportAccessLogEntry.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def first_access(self): # -> None:
        """Gets the first_access of this ReportAccessLogEntry.

        Datetime of first access

        :return: The first_access of this ReportAccessLogEntry.
        :rtype: datetime
        """
        ...
    
    @first_access.setter
    def first_access(self, first_access): # -> None:
        """Sets the first_access of this ReportAccessLogEntry.

        Datetime of first access

        :param first_access: The first_access of this ReportAccessLogEntry.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def last_access(self): # -> None:
        """Gets the last_access of this ReportAccessLogEntry.

        Datetime of last access

        :return: The last_access of this ReportAccessLogEntry.
        :rtype: datetime
        """
        ...
    
    @last_access.setter
    def last_access(self, last_access): # -> None:
        """Sets the last_access of this ReportAccessLogEntry.

        Datetime of last access

        :param last_access: The last_access of this ReportAccessLogEntry.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def role_id(self): # -> None:
        """Gets the role_id of this ReportAccessLogEntry.

        Id of role

        :return: The role_id of this ReportAccessLogEntry.
        :rtype: str
        """
        ...
    
    @role_id.setter
    def role_id(self, role_id): # -> None:
        """Sets the role_id of this ReportAccessLogEntry.

        Id of role

        :param role_id: The role_id of this ReportAccessLogEntry.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def role_ids(self): # -> None:
        """Gets the role_ids of this ReportAccessLogEntry.

        Array of role ids

        :return: The role_ids of this ReportAccessLogEntry.
        :rtype: list[str]
        """
        ...
    
    @role_ids.setter
    def role_ids(self, role_ids): # -> None:
        """Sets the role_ids of this ReportAccessLogEntry.

        Array of role ids

        :param role_ids: The role_ids of this ReportAccessLogEntry.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def user_id(self): # -> None:
        """Gets the user_id of this ReportAccessLogEntry.

        User id

        :return: The user_id of this ReportAccessLogEntry.
        :rtype: str
        """
        ...
    
    @user_id.setter
    def user_id(self, user_id): # -> None:
        """Sets the user_id of this ReportAccessLogEntry.

        User id

        :param user_id: The user_id of this ReportAccessLogEntry.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def user_role_type(self): # -> None:
        """Gets the user_role_type of this ReportAccessLogEntry.

        User role type

        :return: The user_role_type of this ReportAccessLogEntry.
        :rtype: list[str]
        """
        ...
    
    @user_role_type.setter
    def user_role_type(self, user_role_type): # -> None:
        """Sets the user_role_type of this ReportAccessLogEntry.

        User role type

        :param user_role_type: The user_role_type of this ReportAccessLogEntry.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def error(self): # -> None:
        """Gets the error of this ReportAccessLogEntry.

        Error

        :return: The error of this ReportAccessLogEntry.
        :rtype: str
        """
        ...
    
    @error.setter
    def error(self, error): # -> None:
        """Sets the error of this ReportAccessLogEntry.

        Error

        :param error: The error of this ReportAccessLogEntry.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def request_method(self): # -> None:
        """Gets the request_method of this ReportAccessLogEntry.

        The http request method (e.g. GET, PUT, POST, DELETE)

        :return: The request_method of this ReportAccessLogEntry.
        :rtype: str
        """
        ...
    
    @request_method.setter
    def request_method(self, request_method): # -> None:
        """Sets the request_method of this ReportAccessLogEntry.

        The http request method (e.g. GET, PUT, POST, DELETE)

        :param request_method: The request_method of this ReportAccessLogEntry.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def request_path(self): # -> None:
        """Gets the request_path of this ReportAccessLogEntry.

        The HTTP request path (e.g. /api/projects)

        :return: The request_path of this ReportAccessLogEntry.
        :rtype: str
        """
        ...
    
    @request_path.setter
    def request_path(self, request_path): # -> None:
        """Sets the request_path of this ReportAccessLogEntry.

        The HTTP request path (e.g. /api/projects)

        :param request_path: The request_path of this ReportAccessLogEntry.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def timestamp(self): # -> None:
        """Gets the timestamp of this ReportAccessLogEntry.


        :return: The timestamp of this ReportAccessLogEntry.
        :rtype: datetime
        """
        ...
    
    @timestamp.setter
    def timestamp(self, timestamp): # -> None:
        """Sets the timestamp of this ReportAccessLogEntry.


        :param timestamp: The timestamp of this ReportAccessLogEntry.  # noqa: E501
        :type: datetime
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


