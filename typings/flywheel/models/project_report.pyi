"""
This type stub file was generated by pyright.
"""

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class ProjectReport:
    swagger_types = ...
    attribute_map = ...
    rattribute_map = ...
    def __init__(self, name=..., group_name=..., admins=..., session_count=..., subjects_count=..., female_count=..., male_count=..., other_count=..., demographics_grid=..., demographics_total=..., over_18_count=..., under_18_count=...) -> None:
        """ProjectReport - a model defined in Swagger"""
        ...
    
    @property
    def name(self): # -> None:
        """Gets the name of this ProjectReport.

        Application-specific label

        :return: The name of this ProjectReport.
        :rtype: str
        """
        ...
    
    @name.setter
    def name(self, name): # -> None:
        """Sets the name of this ProjectReport.

        Application-specific label

        :param name: The name of this ProjectReport.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def group_name(self): # -> None:
        """Gets the group_name of this ProjectReport.


        :return: The group_name of this ProjectReport.
        :rtype: str
        """
        ...
    
    @group_name.setter
    def group_name(self, group_name): # -> None:
        """Sets the group_name of this ProjectReport.


        :param group_name: The group_name of this ProjectReport.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def admins(self): # -> None:
        """Gets the admins of this ProjectReport.


        :return: The admins of this ProjectReport.
        :rtype: list[object]
        """
        ...
    
    @admins.setter
    def admins(self, admins): # -> None:
        """Sets the admins of this ProjectReport.


        :param admins: The admins of this ProjectReport.  # noqa: E501
        :type: list[object]
        """
        ...
    
    @property
    def session_count(self): # -> None:
        """Gets the session_count of this ProjectReport.


        :return: The session_count of this ProjectReport.
        :rtype: int
        """
        ...
    
    @session_count.setter
    def session_count(self, session_count): # -> None:
        """Sets the session_count of this ProjectReport.


        :param session_count: The session_count of this ProjectReport.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def subjects_count(self): # -> None:
        """Gets the subjects_count of this ProjectReport.


        :return: The subjects_count of this ProjectReport.
        :rtype: int
        """
        ...
    
    @subjects_count.setter
    def subjects_count(self, subjects_count): # -> None:
        """Sets the subjects_count of this ProjectReport.


        :param subjects_count: The subjects_count of this ProjectReport.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def female_count(self): # -> None:
        """Gets the female_count of this ProjectReport.


        :return: The female_count of this ProjectReport.
        :rtype: int
        """
        ...
    
    @female_count.setter
    def female_count(self, female_count): # -> None:
        """Sets the female_count of this ProjectReport.


        :param female_count: The female_count of this ProjectReport.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def male_count(self): # -> None:
        """Gets the male_count of this ProjectReport.


        :return: The male_count of this ProjectReport.
        :rtype: int
        """
        ...
    
    @male_count.setter
    def male_count(self, male_count): # -> None:
        """Sets the male_count of this ProjectReport.


        :param male_count: The male_count of this ProjectReport.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def other_count(self): # -> None:
        """Gets the other_count of this ProjectReport.


        :return: The other_count of this ProjectReport.
        :rtype: int
        """
        ...
    
    @other_count.setter
    def other_count(self, other_count): # -> None:
        """Sets the other_count of this ProjectReport.


        :param other_count: The other_count of this ProjectReport.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def demographics_grid(self): # -> None:
        """Gets the demographics_grid of this ProjectReport.


        :return: The demographics_grid of this ProjectReport.
        :rtype: object
        """
        ...
    
    @demographics_grid.setter
    def demographics_grid(self, demographics_grid): # -> None:
        """Sets the demographics_grid of this ProjectReport.


        :param demographics_grid: The demographics_grid of this ProjectReport.  # noqa: E501
        :type: object
        """
        ...
    
    @property
    def demographics_total(self): # -> None:
        """Gets the demographics_total of this ProjectReport.


        :return: The demographics_total of this ProjectReport.
        :rtype: int
        """
        ...
    
    @demographics_total.setter
    def demographics_total(self, demographics_total): # -> None:
        """Sets the demographics_total of this ProjectReport.


        :param demographics_total: The demographics_total of this ProjectReport.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def over_18_count(self): # -> None:
        """Gets the over_18_count of this ProjectReport.


        :return: The over_18_count of this ProjectReport.
        :rtype: int
        """
        ...
    
    @over_18_count.setter
    def over_18_count(self, over_18_count): # -> None:
        """Sets the over_18_count of this ProjectReport.


        :param over_18_count: The over_18_count of this ProjectReport.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def under_18_count(self): # -> None:
        """Gets the under_18_count of this ProjectReport.


        :return: The under_18_count of this ProjectReport.
        :rtype: int
        """
        ...
    
    @under_18_count.setter
    def under_18_count(self, under_18_count): # -> None:
        """Sets the under_18_count of this ProjectReport.


        :param under_18_count: The under_18_count of this ProjectReport.  # noqa: E501
        :type: int
        """
        ...
    
    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        ...
    
    def return_value(self): # -> Self:
        """Unwraps return value from model"""
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    
    def __getitem__(self, key): # -> Any:
        """Returns the value of key"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Sets the value of key"""
        ...
    
    def __contains__(self, key): # -> bool:
        """Checks if the given value is a key in this object"""
        ...
    
    def keys(self): # -> dict_keys[str, str]:
        """Returns the list of json properties in the object"""
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        """Returns the list of values in the object"""
        ...
    
    def items(self): # -> Generator[tuple[str, Any], Any, None]:
        """Returns the list of json property to value mapping"""
        ...
    
    def get(self, key, default=...): # -> Any | None:
        """Get the value of the provided json property, or default"""
        ...
    


