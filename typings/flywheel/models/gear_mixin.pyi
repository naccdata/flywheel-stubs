"""
This type stub file was generated by pyright.
"""

"""Provides gear mixin"""
class GearMixin:
    """Gear mixin that provides additional functionality"""
    def __init__(self) -> None:
        ...
    
    def create_invocation(self): # -> GearInvocation:
        """Create a job invocation object"""
        ...
    
    def is_analysis_gear(self):
        """Check if this is an analysis gear"""
        ...
    
    def print_details(self, width=...): # -> None:
        """Print details about a gear to stdout

        :param int width: The maximum line width for printing
        """
        ...
    
    def get_default_config(self): # -> dict[Any, Any]:
        """Get the default configuration for gear"""
        ...
    
    def run(self, config=..., analysis_label=..., tags=..., destination=..., inputs=..., priority=..., **kwargs): # -> Any:
        """Run the gear.

        :param dict config: The configuration to use, if overriding defaults.
        :param str analysis_label: The label of the analysis, if running an analysis gear.
        :param list tags: The list of tags to set for the job.
        :param object destination: The destination container.
        :param dict inputs: The list of input containers or files.

        :return: The id of the job that was created (utility gear) or of the analysis container created (analysis gear).
        """
        ...
    
    def propose_batch(self, containers, config=..., analysis_label=..., tags=..., priority=..., optional_input_policy=...):
        """Propose a batch run of the gear.

        :param list containers: The list of targets.
        :param dict config: The configuration to use, if overriding defaults.
        :param str analysis_label: The label of the analysis, if running an analysis gear.
        :param list tags: The list of tags to set for the job.
        :param str priority: The priority of the job.
        :param str optional_input_policy: The optional input policy, default is 'ignored'

        :return: The batch proposal, which can be started with proposal.run()
        """
        ...
    
    def get_series(self): # -> Any | None:
        """Get gear series by gear name."""
        ...
    
    def add_permission(self, permission_type, permission_id): # -> Any | None:
        """Add individual permission to gear."""
        ...
    
    def replace_permissions(self, permissions): # -> Any | None:
        """Replace gear permissions."""
        ...
    
    def delete_permission(self, permission_type, permission_id): # -> None:
        """Delete individual permission by type and id"""
        ...
    
    def delete_all_permissions(self): # -> None:
        """
        Delete gear all permissions. Also sets `is_restricted` on the gear
            series to `False`.
        """
        ...
    
    def modify_gear_series(self, gear_series_update): # -> Any | None:
        """
        Modify the gear series attributes such as `is_restricted`

        :param GearSeriesUpdate gear_series_update: the dictionary specifying
            the updates to make to the gear series

        Example::
            update_dict = {"is_restricted": True}
            gear.modify_gear_series(update_dict)
        """
        ...
    


