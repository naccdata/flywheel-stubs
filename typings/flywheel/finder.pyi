"""
This type stub file was generated by pyright.
"""

"""Provides finder interface for collections"""
class Finder:
    """Finder wrapper for finding objects in a collection"""
    def __init__(self, context, method, *args) -> None:
        """Create a new finder object for the given method

        :param object context: The context object (i.e. Flywheel client)
        :param str method: The name of the method to invoke (must support pagination)
        :param args: Additional arguments to pass to the find function (e.g. id)
        """
        ...
    
    def __call__(self, *args, **kwargs): # -> Any:
        """Invoke the underlying get function directly

        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        """
        ...
    
    def find(self, *args, **kwargs): # -> Any | list[Any] | None:
        """Find all items in the collection that match the provided filter

        :param args: The list of filters to apply (e.g. 'label=my-label' , 'created>2018-09-22')
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        """
        ...
    
    def find_one(self, *args, **kwargs): # -> Any | list[Any] | None:
        """Find exactly one item matching the provided filter. Raises a ValueError if 0 or 2+ items matched.

        :param args: The list of filters to apply (e.g. 'label=my-label' , 'created>2018-09-22')
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        """
        ...
    
    def find_first(self, *args, **kwargs): # -> Any | list[Any] | None:
        """Find the first item matching the provided filter. Returns None if no items matched.

        :param args: The list of filters to apply (e.g. 'label=my-label' , 'created>2018-09-22')
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        """
        ...
    
    def iter(self, limit=...): # -> Generator[Any, Any, None]:
        """Iterate over all items in the collection, without limit.

        :param int limit: The number of entries to return per call (default is 250)
        """
        ...
    
    def iter_find(self, *args, **kwargs): # -> Generator[Any, Any, None]:
        """Find all items in the collection that match the provided filter, without limit.

        :param args: The list of filters to apply (e.g. 'label=my-label' , 'created>2018-09-22')
        :param int limit: The number of entries to return per call (default is 250)
        """
        ...
    


